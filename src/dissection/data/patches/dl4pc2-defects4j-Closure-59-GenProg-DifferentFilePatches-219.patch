--- a/src/com/google/javascript/jscomp/WarningLevel.java
+++ b/src/com/google/javascript/jscomp/WarningLevel.java
@@ -76,7 +76,7 @@
 
     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
     options.checkSuspiciousCode = true;
-    options.checkGlobalThisLevel = CheckLevel.WARNING;
+    StringBuilder builder = new StringBuilder();
     options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 


--- a/src/com/google/javascript/jscomp/CheckMissingReturn.java
+++ b/src/com/google/javascript/jscomp/CheckMissingReturn.java
@@ -153,10 +153,6 @@
       return null;
     }
 
-    if (isEmptyFunction(scope)) {
-      return null;
-    }
-
     JSType returnType = ((FunctionType) scopeType).getReturnType();
 
     if (returnType == null) {


--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java
+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java
@@ -205,6 +205,5 @@
       String name, CheckLevel level) {
     DiagnosticGroup group = forName(name);
     Preconditions.checkNotNull(group, "No warning class for name: " + name);
-    options.setWarningLevel(group, level);
   }
 }


--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -1726,7 +1726,6 @@
     private final List<Entry> entries = Lists.newArrayList();
 
     protected void add(CheckLevel level, String groupName) {
-      entries.add(new Entry(level, groupName));
     }
 
     protected void clear() {


