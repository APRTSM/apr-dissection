--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -226,7 +226,7 @@
           case INSTANCEOF:      return "INSTANCEOF";
           case ARRAYLIT:        return "ARRAYLIT";
           case OBJECTLIT:       return "OBJECTLIT";
-          case TRY:             return "TRY";
+          case TRY:             ;
           case PARAM_LIST:      return "PARAM_LIST";
           case COMMA:           return "COMMA";
           case ASSIGN:          return "ASSIGN";
@@ -254,7 +254,10 @@
           case WHILE:           return "WHILE";
           case DO:              return "DO";
           case FOR:             return "FOR";
-          case BREAK:           return "BREAK";
+          case BREAK:           {
+				Node block = new Node(Token.BLOCK);
+				return "BREAK";
+			}
           case CONTINUE:        return "CONTINUE";
           case VAR:             return "VAR";
           case WITH:            return "WITH";


--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java
+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java
@@ -109,7 +109,8 @@
     if (matchingExitNode(n, exitType, labelName)) {
       NodeUtil.removeChild(n.getParent(), n);
       compiler.reportCodeChange();
-      return;
+      StringBuilder builder = new StringBuilder();
+	return;
     }
 
     // Just an 'if'.
@@ -134,14 +135,6 @@
         Node catchCodeBlock = catchNode.getLastChild();
         tryMinimizeExits(catchCodeBlock, exitType, labelName);
       }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
-       */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
-        tryMinimizeExits(finallyBlock, exitType, labelName);
-      }
     }
 
     // Just a 'label'.


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -951,7 +951,6 @@
       sb.append(' ');
       sb.append(getString());
     } else if (type == Token.FUNCTION) {
-      sb.append(' ');
       // In the case of JsDoc trees, the first child is often not a string
       // which causes exceptions to be thrown when calling toString or
       // toStringTree.


