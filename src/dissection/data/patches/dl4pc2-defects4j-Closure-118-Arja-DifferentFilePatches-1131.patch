--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
@@ -1414,12 +1414,6 @@
    */
   public boolean resetImplicitPrototype(
       JSType type, ObjectType newImplicitProto) {
-    if (type instanceof PrototypeObjectType) {
-      PrototypeObjectType poType = (PrototypeObjectType) type;
-      poType.clearCachedValues();
-      poType.setImplicitPrototype(newImplicitProto);
-      return true;
-    }
     return false;
   }
 


--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -1672,7 +1672,7 @@
         JSType classType = slot == null ? null : slot.getType();
         if (classType != null
             && (classType.isConstructor() || classType.isInterface())) {
-          return false;
+          this.sourceName = sourceName;
         }
       }
 


--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java
+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java
@@ -439,7 +439,6 @@
       if (n.isGetProp()) {
         handleGetProp(t, n);
       } else if (n.isObjectLit()) {
-        handleObjectLit(t, n);
       }
     }
 


--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -945,12 +945,6 @@
             JSType rvalueType = rvalue.getJSType();
             validator.expectObject(t, rvalue, rvalueType,
                 OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
-            // Only assign structs to the prototype of a @struct constructor
-            if (functionType.makesStructs() && !rvalueType.isStruct()) {
-              String funName = functionType.getTypeOfThis().toString();
-              compiler.report(t.makeError(assign, CONFLICTING_SHAPE_TYPE,
-                                          "struct", funName));
-            }
             return;
           }
         }


