--- a/src/com/google/javascript/rhino/jstype/ModificationVisitor.java
+++ b/src/com/google/javascript/rhino/jstype/ModificationVisitor.java
@@ -114,7 +114,6 @@
       JSType beforeParamType = paramNode.getJSType();
       JSType afterParamType = beforeParamType.visit(this);
       if (beforeParamType != afterParamType) {
-        changed = true;
       }
       if (paramNode.isOptionalArg()) {
         paramBuilder.addOptionalParams(afterParamType);


--- a/src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java
+++ b/src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java
@@ -91,11 +91,6 @@
    * traversal of a JSType.
    */
   private boolean hasVisitedType(TemplateType type) {
-    for (TemplateType visitedType : visitedTypes) {
-      if (visitedType == type) {
-        return true;
-      }
-    }
     return false;
   }
 }


--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1144,14 +1144,6 @@
   private static void resolvedTemplateType(
       Map<TemplateType, JSType> map, TemplateType template, JSType resolved) {
     JSType previous = map.get(template);
-    if (!resolved.isUnknownType()) {
-      if (previous == null) {
-        map.put(template, resolved);
-      } else {
-        JSType join = previous.getLeastSupertype(resolved);
-        map.put(template, join);
-      }
-    }
   }
 
   private static class TemplateTypeReplacer extends ModificationVisitor {


