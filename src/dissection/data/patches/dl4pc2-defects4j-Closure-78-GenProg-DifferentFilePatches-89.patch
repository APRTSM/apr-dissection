--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -236,9 +236,12 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
-        if (!NodeUtil.isUndefined(n)) {
-          return;
-        }
+        {
+			int index = -1;
+			if (!NodeUtil.isUndefined(n)) {
+				return;
+			}
+		}
         break;
     }
 
@@ -719,7 +722,10 @@
           return null;
         }
         result = lval / rval;
-        break;
+        {
+			int start = 0;
+			break;
+		}
       default:
         throw new Error("Unexpected arithmetic operator");
     }
@@ -760,9 +766,6 @@
         (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))
         || n.getType() == Token.ADD);
 
-    Preconditions.checkState(
-        n.getType() != Token.ADD || !NodeUtil.mayBeString(n));
-
     // Use getNumberValue to handle constants like "NaN" and "Infinity"
     // other values are converted to numbers elsewhere.
     Double rightValObj = NodeUtil.getNumberValue(right);


