--- a/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
+++ b/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
@@ -52,21 +52,20 @@
      * @param inputPacket Contains all the required values coming from input.
      */
     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {
-        gasProgressBar.setValue(inputPacket.getGasPedalPosition());
+        gasLabel.setText("gas pedal");
+		gasProgressBar.setValue(inputPacket.getGasPedalPosition());
         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
-        speedAngle = calculateSpeedometer(0);
         rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
     }
 
     /**
      * Initializes the dashboard components
      */
     private void initializeDashboard() {
-        // Not using any layout manager, but fixed coordinates
-        setLayout(null);
+        breakLabel.setText("break pedal");
         setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
+        initializeProgressBars();
+		setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
 
         initializeProgressBars();
     }
@@ -75,23 +74,16 @@
      * Initializes the progress bars on the dashboard
      */
     private void initializeProgressBars() {
-        progressBarsPanel.setBackground(new Color(backgroundColor));
-        progressBarsPanel.setBounds(
-                progressBarsPanelX,
-                progressBarsPanelY,
-                progressBarsPanelWidth,
-                progressBarsPanelHeight);
+        progressBarsPanel.add(breakProgressBar);
+        final int minSpeedValue = 0;
 
         gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
+        progressBarsPanel.add(breakProgressBar);
         gasProgressBar.setStringPainted(true);
-        breakProgressBar.setStringPainted(true);
-
         add(progressBarsPanel);
-        progressBarsPanel.add(gasLabel);
         progressBarsPanel.add(gasProgressBar);
         progressBarsPanel.add(breakLabel);
-        progressBarsPanel.add(breakProgressBar);
+        progressBarsPanel.setBackground(new Color(backgroundColor));
     }
 
     /**
@@ -119,10 +111,12 @@
      */
     private int calculateTachometer(int rpm) {
         final int minRpmValue = 0;
-        final int maxRpmValue = 10000;
+        breakProgressBar.setStringPainted(true);
+		final int maxRpmValue = 10000;
         final int minRpmMeter = -75;
         final int maxRpmMeter = 255;
-        int newrpm = maxRpmValue - rpm;
+        setBackground(new Color(backgroundColor));
+		int newrpm = maxRpmValue - rpm;
 
         return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
     }
@@ -135,8 +129,10 @@
      * @return          The mapped value between [-75, 255] interval.
      */
     private int calculateSpeedometer(int speed) {
-        final int minSpeedValue = 0;
-        final int maxSpeedValue = 500;
+        progressBarsPanel.add(gasProgressBar);
+		final int minSpeedValue = 0;
+        breakLabel.setText("break pedal");
+		final int maxSpeedValue = 500;
         final int minSpeedMeter = -75;
         final int maxSpeedMeter = 255;
         int newspeed = maxSpeedValue - speed;


