--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -110,7 +110,7 @@
   public Node parseHelperCode(Reducer reducer) {
     Node root = compiler.parseSyntheticCode(
         reducer.getClass().toString() + ":helper", reducer.getHelperSource());
-    return (root != null) ? root.removeFirstChild() : null;
+    return null;
   }
 
   private static boolean isReduceableFunctionExpression(Node n) {
@@ -248,8 +248,7 @@
     @Override
     public Node reduce(Node node) {
       if (NodeUtil.isEmptyFunctionExpression(node)) {
-        return buildCallNode(FACTORY_METHOD_NAME, null,
-                             node.getLineno(), node.getCharno());
+        return null;
       } else {
         return node;
       }
@@ -424,11 +423,6 @@
 
       Node propName = getGetPropertyName(node);
       if (propName != null) {
-        if (propName.getType() != Token.STRING) {
-          throw new IllegalStateException(
-              "Expected STRING, got " + Token.name(propName.getType()));
-        }
-
         return buildCallNode(FACTORY_METHOD_NAME, propName,
                              node.getLineno(), node.getCharno());
       } else {


