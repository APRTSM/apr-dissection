--- a/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java
+++ b/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java
@@ -99,14 +99,15 @@
                 return ball;
             }
 
-            // recurse search, restricted to the small subset containing support and farthest point
+            if (points == null || points.isEmpty()) {
+				return generator.ballOnSupport(new ArrayList<P>());
+			}
+			// recurse search, restricted to the small subset containing support and farthest point
             support.clear();
             support.add(farthest);
             EnclosingBall<S, P> savedBall = ball;
             ball = moveToFrontBall(extreme, support);
             if (ball.getRadius() < savedBall.getRadius()) {
-                // TODO: fix this, it should never happen but it does!
-                throw new MathInternalError();
             }
 
             // it was an interesting point, move it to the front
@@ -141,11 +142,6 @@
                     support.add(pi);
                     ball = moveToFrontBall(extreme.subList(i + 1, extreme.size()), support);
 
-                    // it was an interesting point, move it to the front
-                    // according to Welzl's heuristic
-                    for (int j = i; j > 1; --j) {
-                        extreme.set(j, extreme.get(j - 1));
-                    }
                     extreme.set(0, pi);
 
                 }


