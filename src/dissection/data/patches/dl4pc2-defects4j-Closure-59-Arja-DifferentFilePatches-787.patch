--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -260,7 +260,7 @@
     if (options.checkTypes &&
         (options.enables(DiagnosticGroups.ACCESS_CONTROLS)
          || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {
-      checks.add(checkAccessControls);
+      return null;
     }
 
     if (options.checkGlobalNamesLevel.isOn()) {


--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java
+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java
@@ -205,6 +205,6 @@
       String name, CheckLevel level) {
     DiagnosticGroup group = forName(name);
     Preconditions.checkNotNull(group, "No warning class for name: " + name);
-    options.setWarningLevel(group, level);
+    return;
   }
 }


--- a/src/com/google/javascript/jscomp/CommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java
@@ -438,7 +438,6 @@
       @Override public Class getType() { return proxy.getType(); }
 
       @Override public void addValue(Object value) throws CmdLineException {
-        proxy.addValue((String) value);
         warningGuardSpec.add(level, (String) value);
       }
     }


--- a/src/com/google/javascript/jscomp/WarningLevel.java
+++ b/src/com/google/javascript/jscomp/WarningLevel.java
@@ -77,7 +77,6 @@
     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
     options.checkSuspiciousCode = true;
     options.checkGlobalThisLevel = CheckLevel.WARNING;
-    options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 
     // checkTypes has the side-effect of asserting that the


