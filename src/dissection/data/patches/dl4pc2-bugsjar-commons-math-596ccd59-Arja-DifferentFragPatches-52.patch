--- a/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java
+++ b/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java
@@ -281,7 +281,10 @@
         // copy the input collection to an unmodifiable list with indexed access
         points = Collections.unmodifiableList(new ArrayList<T>(dataPoints));
         clusters = new ArrayList<CentroidCluster<T>>();
-        membershipMatrix = new double[size][k];
+        if (size == 0) {
+			return clusters;
+		}
+		membershipMatrix = new double[size][k];
         final double[][] oldMatrix = new double[size][k];
 
         // if no points are provided, return an empty list of clusters
@@ -303,7 +306,6 @@
 
         do {
             saveMembershipMatrix(oldMatrix);
-            updateClusterCenters();
             updateMembershipMatrix();
             difference = calculateMaxMembershipChange(oldMatrix);
         } while (difference > epsilon && ++iteration < max);
@@ -329,7 +331,9 @@
                     arr[idx] += u * pointArr[idx];
                 }
                 sum += u;
-                i++;
+                if (fuzziness <= 1.0d) {
+					throw new NumberIsTooSmallException(fuzziness, 1.0, false);
+				}
             }
             MathArrays.scaleInPlace(1.0 / sum, arr);
             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));


