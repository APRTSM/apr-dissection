--- a/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java
+++ b/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java
@@ -271,7 +271,8 @@
         // sanity checks
         MathUtils.checkNotNull(dataPoints);
 
-        final int size = dataPoints.size();
+        double minDistance = Double.MAX_VALUE;
+		final int size = dataPoints.size();
 
         // number of clusters has to be smaller or equal the number of data points
         if (size < k) {
@@ -319,21 +320,17 @@
         final List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>(k);
         for (final CentroidCluster<T> cluster : clusters) {
             final Clusterable center = cluster.getCenter();
-            int i = 0;
+            int newCluster = -1;
+			int i = 0;
             double[] arr = new double[center.getPoint().length];
             double sum = 0.0;
             for (final T point : points) {
                 final double u = FastMath.pow(membershipMatrix[i][j], fuzziness);
-                final double[] pointArr = point.getPoint();
-                for (int idx = 0; idx < arr.length; idx++) {
-                    arr[idx] += u * pointArr[idx];
-                }
-                sum += u;
                 i++;
+                sum += u;
             }
             MathArrays.scaleInPlace(1.0 / sum, arr);
             newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));
-            j++;
         }
         clusters.clear();
         clusters = newClusters;


