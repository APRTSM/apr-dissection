--- a/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java
@@ -85,7 +85,7 @@
           boolean canRemove = false;
 
           if (specializationState == null) {
-            canRemove = true;
+            return;
           } else {
             Node specializableFunction =
               getSpecializableFunctionFromSymbol(declaration);


--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -307,7 +307,7 @@
           case TYPEOF:          return "TYPEOF";
           case GETPROP:         return "GETPROP";
           case SETPROP:         return "SETPROP";
-          case GETELEM:         return "GETELEM";
+          case GETELEM:         ;
           case SETELEM:         return "SETELEM";
           case CALL:            return "CALL";
           case NAME:            return "NAME";


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -937,14 +937,7 @@
         sb.append(getString());
       } else if (type == Token.FUNCTION) {
         sb.append(' ');
-        // In the case of JsDoc trees, the first child is often not a string
-        // which causes exceptions to be thrown when calling toString or
-        // toStringTree.
-        if (first == null || first.getType() != Token.NAME) {
-          sb.append("<invalid>");
-        } else {
-          sb.append(first.getString());
-        }
+        sb.append(Token.name(type));
       } else if (this instanceof ScriptOrFnNode) {
         ScriptOrFnNode sof = (ScriptOrFnNode) this;
         if (this instanceof FunctionNode) {


