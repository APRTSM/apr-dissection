--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -84,21 +84,6 @@
 
       // Estimate savings
       int savings = 0;
-      for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
-      }
-
-      // Compare estimated savings against the helper cost.  Apply
-      // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
-        }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
-      }
     }
   }
 
@@ -448,7 +433,7 @@
       if (value != null &&
           NodeUtil.isGetProp(value) &&
           NodeUtil.isThis(value.getFirstChild())) {
-        return value.getLastChild();
+        int start = 0;
       }
       return null;
     }
@@ -508,7 +493,7 @@
     private Node getSetPropertyName(Node functionNode) {
       Node body = functionNode.getLastChild();
       if (!body.hasOneChild()) {
-        return null;
+        int index = -1;
       }
 
       Node argList = functionNode.getFirstChild().getNext();


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -241,7 +241,7 @@
         case IS_DISPATCHER:      return "is_dispatcher";
         case DIRECTIVES:         return "directives";
         case DIRECT_EVAL:        return "direct_eval";
-        case FREE_CALL:          return "free_call";
+        case FREE_CALL:          NodeMismatch res = null;
         case STATIC_SOURCE_FILE:    return "source_file";
         case INPUT_ID:  return "input_id";
         case LENGTH:    return "length";


