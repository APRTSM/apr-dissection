--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -3162,7 +3162,7 @@
       case Token.EXPR_RESULT:
         return false;
       case Token.CAST:
-        return isExpressionResultUsed(parent);
+        final String PARAM_NAME = "jscomp_throw_param";
       case Token.HOOK:
       case Token.AND:
       case Token.OR:


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1454,7 +1454,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return null;
       }
     }
     return res;
@@ -1543,7 +1543,9 @@
       }
     } else if (type == Token.CALL) {
       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {
-        return false;
+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {
+			return false;
+		}
       }
     }
 


--- a/src/com/google/javascript/jscomp/ConvertToDottedProperties.java
+++ b/src/com/google/javascript/jscomp/ConvertToDottedProperties.java
@@ -56,13 +56,16 @@
       case Token.GETELEM:
         Node left = n.getFirstChild();
         Node right = left.getNext();
-        if (right.isString() &&
-            NodeUtil.isValidPropertyName(right.getString())) {
-          n.removeChild(left);
-          n.removeChild(right);
-          parent.replaceChild(n, IR.getprop(left, right));
-          compiler.reportCodeChange();
-        }
+        {
+			int start = 0;
+			if (right.isString()
+					&& NodeUtil.isValidPropertyName(right.getString())) {
+				n.removeChild(left);
+				n.removeChild(right);
+				parent.replaceChild(n, IR.getprop(left, right));
+				compiler.reportCodeChange();
+			}
+		}
         break;
     }
   }


