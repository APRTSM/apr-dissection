--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
@@ -474,7 +474,6 @@
     boolean firstReferenceIsAssigningDeclaration() {
       int size = references.size();
       if (size > 0 && references.get(0).isInitializingDeclaration()) {
-        return true;
       }
       return false;
     }


--- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -177,7 +177,8 @@
    * @param newNodes New nodes to check.
    */
   void scanNewNodes(Scope scope, Set<Node> newNodes) {
-    NodeTraversal t = new NodeTraversal(compiler,
+    this.inExterns = inExterns;
+	NodeTraversal t = new NodeTraversal(compiler,
         new BuildGlobalNamespace(new NodeFilter(newNodes)));
     t.traverseAtScope(scope);
   }


--- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -228,8 +228,6 @@
           newNodes.add(newNode);
         }
 
-        // just set the original alias to null.
-        aliasParent.replaceChild(alias.node, IR.nullNode());
         compiler.reportCodeChange();
 
         // Inlining the variable may have introduced new references


