--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java
+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java
@@ -1267,13 +1267,24 @@
              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
          }
          for (int i = 0; i < len; i++) {
+			if (Double.isNaN(values[i])) {
+				out[i] = Double.NaN;
+			} else {
+				out[i] = values[i] * normalizedSum / sum;
+			}
+		}
+		for (int i = 0; i < len; i++) {
              if (Double.isNaN(values[i])) {
                  out[i] = Double.NaN;
              } else {
                  out[i] = values[i] * normalizedSum / sum;
              }
          }
-         return out;
+         if (Double.isInfinite(normalizedSum)) {
+			throw new MathIllegalArgumentException(
+					LocalizedFormats.NORMALIZE_INFINITE);
+		}
+		return out;
      }
 
      /** Build an array of elements.


--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
@@ -187,7 +187,6 @@
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
         }
 
         return out;


