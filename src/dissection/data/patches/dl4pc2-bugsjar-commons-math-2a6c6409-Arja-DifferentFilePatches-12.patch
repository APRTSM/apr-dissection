--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java
@@ -471,7 +471,8 @@
      * PolyhedronsSet PolyhedronsSet} instance)
      */
     public PolyhedronsSet wholeSpace() {
-        return new PolyhedronsSet(tolerance);
+        v = Vector3D.crossProduct(w, u);
+		return new PolyhedronsSet(tolerance);
     }
 
     /** Check if the instance contains a point.


--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
@@ -823,7 +823,7 @@
         }
 
         if ((end == null) && !open) {
-            throw new MathInternalError();
+            return null;
         }
 
         return loop;


--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
@@ -158,7 +158,10 @@
 
         final SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane());
         if (chopped == null || chopped.isEmpty()) {
-            cut          = null;
+            if (cut != null) {
+				plus.parent = null;
+				minus.parent = null;
+			}
             plus         = null;
             minus        = null;
             return false;


