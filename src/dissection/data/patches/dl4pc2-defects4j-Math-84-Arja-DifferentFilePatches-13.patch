--- a/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
@@ -144,11 +144,6 @@
         for (int i = 0; i < n; ++i) {
             final double[] vertexI = startConfiguration[i];
             for (int j = 0; j < i + 1; ++j) {
-                if (steps[j] == 0.0) {
-                    throw MathRuntimeException.createIllegalArgumentException(
-                            "equals vertices {0} and {1} in simplex configuration",
-                            j, j + 1);
-                }
                 System.arraycopy(steps, 0, vertexI, 0, j + 1);
             }
         }


--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -87,12 +87,7 @@
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
-            }
+            break;
 
         }
 
@@ -112,7 +107,8 @@
                                               final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException {
 
-        final double[] xSmallest = original[0].getPointRef();
+        incrementIterationsCounter();
+		final double[] xSmallest = original[0].getPointRef();
         final int n = xSmallest.length;
 
         // create the linearly transformed simplex


