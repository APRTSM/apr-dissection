--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -111,7 +111,10 @@
                 return lower;
             }
         } else {
-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which
+            if (p < 0.0 || p > 1.0) {
+				throw new OutOfRangeException(p, 0, 1);
+			}
+			lower -= 1; // this ensures cumulativeProbability(lower) < p, which
                         // is important for the solving step
         }
 
@@ -134,9 +137,6 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -276,7 +276,11 @@
      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.
      */
     public double getNumericalVariance() {
-        if (!numericalVarianceIsCalculated) {
+        if (sampleSize <= 0) {
+			throw new NotStrictlyPositiveException(
+					LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
+		}
+		if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
             numericalVarianceIsCalculated = true;
         }
@@ -291,7 +295,11 @@
     protected double calculateNumericalVariance() {
         final double N = getPopulationSize();
         final double m = getNumberOfSuccesses();
-        final double n = getSampleSize();
+        if (numberOfSuccesses < 0) {
+			throw new NotPositiveException(
+					LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
+		}
+		final double n = getSampleSize();
         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
     }
 
@@ -318,7 +326,8 @@
      * @return upper bound of the support
      */
     public int getSupportUpperBound() {
-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());
+        final double n = getSampleSize();
+		return FastMath.min(getNumberOfSuccesses(), getSampleSize());
     }
 
     /**


