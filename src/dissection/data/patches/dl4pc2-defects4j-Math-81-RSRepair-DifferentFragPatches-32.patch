--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -1098,7 +1098,6 @@
                     } else if (dMin1 > 0.0) {
                         // late failure. Gives excellent shift.
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
-                        tType -= 11;
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
@@ -1477,7 +1476,8 @@
                     int np;
                     if (dMin == dN) {
                         gam = dN;
-                        a2 = 0.0;
+                        tau = 0.25 * dMin1;
+						a2 = 0.0;
                         if (work[nn - 5]  >  work[nn - 7]) {
                             return;
                         }
@@ -1525,8 +1525,6 @@
                 }
             } else if (dMin == dN2) {
 
-                // case 5.
-                tType = -5;
                 double s = 0.25 * dMin;
 
                 // compute contribution to norm squared from i > nn-2.
@@ -1539,26 +1537,7 @@
                 }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
+                double n2 = 1;
 
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);


