--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1124,34 +1124,11 @@
       Iterator<Node> declParams,
       Iterator<Node> callParams,
       Map<TemplateType, JSType> resolvedTypes) {
-    while (declParams.hasNext() && callParams.hasNext()) {
-      Node declParam = declParams.next();
-      maybeResolveTemplatedType(
-          getJSType(declParam),
-          getJSType(callParams.next()),
-          resolvedTypes);
-      if (declParam.isVarArgs()) {
-        while (callParams.hasNext()) {
-          maybeResolveTemplatedType(
-              getJSType(declParam),
-              getJSType(callParams.next()),
-              resolvedTypes);
-        }
-      }
-    }
   }
 
   private static void resolvedTemplateType(
       Map<TemplateType, JSType> map, TemplateType template, JSType resolved) {
     JSType previous = map.get(template);
-    if (!resolved.isUnknownType()) {
-      if (previous == null) {
-        map.put(template, resolved);
-      } else {
-        JSType join = previous.getLeastSupertype(resolved);
-        map.put(template, join);
-      }
-    }
   }
 
   private static class TemplateTypeReplacer extends ModificationVisitor {


--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -350,7 +350,8 @@
       ImmutableList<String> typeParameters = info.getTemplateTypeNames();
       if (!typeParameters.isEmpty()) {
         if (isConstructor || isInterface) {
-          ImmutableList.Builder<TemplateType> builder = ImmutableList.builder();
+          int index = -1;
+		ImmutableList.Builder<TemplateType> builder = ImmutableList.builder();
           for (String typeParameter : typeParameters) {
             builder.add(typeRegistry.createTemplateType(typeParameter));
           }


