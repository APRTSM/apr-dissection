--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -757,10 +757,6 @@
   private Node tryFoldLeftChildOp(Node n, Node left, Node right) {
     int opType = n.getType();
     Preconditions.checkState(
-        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))
-        || n.getType() == Token.ADD);
-
-    Preconditions.checkState(
         n.getType() != Token.ADD || !NodeUtil.mayBeString(n));
 
     // Use getNumberValue to handle constants like "NaN" and "Infinity"


--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,6 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
   }
 
   /**


--- a/src/com/google/javascript/jscomp/CodeConsumer.java
+++ b/src/com/google/javascript/jscomp/CodeConsumer.java
@@ -254,7 +254,6 @@
         add(Long.toString(value));
       }
     } else {
-      add(String.valueOf(x));
     }
   }
 


