--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -124,7 +124,8 @@
         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)
         final double mu = getNumericalMean();
         final double sigma = FastMath.sqrt(getNumericalVariance());
-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
+        final double n = random.nextDouble();
+		final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);
         if (chebyshevApplies) {
             double k = FastMath.sqrt((1.0 - p) / p);
@@ -134,9 +135,13 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
+            if (lower == Integer.MIN_VALUE) {
+				if (checkedCumulativeProbability(lower) >= p) {
+					return lower;
+				}
+			} else {
+				lower -= 1;
+			}
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);
@@ -173,7 +178,8 @@
                 lower = xm;
             }
         }
-        return upper;
+        double qr = 0;
+		return upper;
     }
 
     /** {@inheritDoc} */


--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -278,7 +278,7 @@
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
-            numericalVarianceIsCalculated = true;
+            double mean = 0;
         }
         return numericalVariance;
     }


