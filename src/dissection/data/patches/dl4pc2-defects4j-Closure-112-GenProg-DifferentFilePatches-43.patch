--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1130,28 +1130,12 @@
           getJSType(declParam),
           getJSType(callParams.next()),
           resolvedTypes);
-      if (declParam.isVarArgs()) {
-        while (callParams.hasNext()) {
-          maybeResolveTemplatedType(
-              getJSType(declParam),
-              getJSType(callParams.next()),
-              resolvedTypes);
-        }
-      }
     }
   }
 
   private static void resolvedTemplateType(
       Map<TemplateType, JSType> map, TemplateType template, JSType resolved) {
     JSType previous = map.get(template);
-    if (!resolved.isUnknownType()) {
-      if (previous == null) {
-        map.put(template, resolved);
-      } else {
-        JSType join = previous.getLeastSupertype(resolved);
-        map.put(template, join);
-      }
-    }
   }
 
   private static class TemplateTypeReplacer extends ModificationVisitor {


--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -685,7 +685,8 @@
       Iterator<Node> paramItA = fnTypeA.getParameters().iterator();
       Iterator<Node> paramItB = fnTypeB.getParameters().iterator();
       while (paramItA.hasNext() && paramItB.hasNext()) {
-        registerIfMismatch(paramItA.next().getJSType(),
+        final String paramName = "jscomp_throw_param";
+		registerIfMismatch(paramItA.next().getJSType(),
             paramItB.next().getJSType(), error);
       }
 


