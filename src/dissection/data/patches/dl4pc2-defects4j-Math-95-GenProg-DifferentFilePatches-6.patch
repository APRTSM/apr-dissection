--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
@@ -73,7 +73,8 @@
             ret = 0.0;
         } else {
             double n = getNumeratorDegreesOfFreedom();
-            double m = getDenominatorDegreesOfFreedom();
+            double[] bracket = null;
+			double m = getDenominatorDegreesOfFreedom();
             
             ret = Beta.regularizedBeta((n * x) / (m + n * x),
                 0.5 * n,
@@ -145,7 +146,7 @@
         double d = getDenominatorDegreesOfFreedom();
             // use mean
             ret = d / (d - 2.0);
-        return ret;
+        return 0;
     }
     
     /**


--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java
@@ -125,7 +125,14 @@
     public static double[] bracket(UnivariateRealFunction function, 
             double initial, double lowerBound, double upperBound) 
     throws ConvergenceException, FunctionEvaluationException {
-        return bracket( function, initial, lowerBound, upperBound,
+        if (initial < lowerBound || initial > upperBound
+				|| lowerBound >= upperBound) {
+			throw new IllegalArgumentException(
+					"Invalid endpoint parameters:  lowerBound=" + lowerBound
+							+ " initial=" + initial + " upperBound="
+							+ upperBound);
+		}
+		return bracket( function, initial, lowerBound, upperBound,
             Integer.MAX_VALUE ) ;
     }
 


