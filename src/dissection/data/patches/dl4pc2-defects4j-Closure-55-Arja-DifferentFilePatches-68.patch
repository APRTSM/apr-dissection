--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -84,10 +84,6 @@
 
       // Estimate savings
       int savings = 0;
-      for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
-      }
-
       // Compare estimated savings against the helper cost.  Apply
       // reductions if doing so will result in some savings.
       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
@@ -215,7 +211,6 @@
     protected final Node buildCallNode(String methodName, Node argumentNode,
                                        int lineno, int charno) {
       Node call = new Node(Token.CALL, lineno, charno);
-      call.putBooleanProp(Node.FREE_CALL, true);
       call.addChildToBack(Node.newString(Token.NAME, methodName));
       if (argumentNode != null) {
         call.addChildToBack(argumentNode.cloneTree());
@@ -274,7 +269,7 @@
 
       Node statement = body.getFirstChild();
       if (statement.getType() == Token.RETURN) {
-        return statement.getFirstChild();
+        return null;
       }
       return null;
     }


--- a/src/com/google/javascript/jscomp/AstValidator.java
+++ b/src/com/google/javascript/jscomp/AstValidator.java
@@ -765,9 +765,7 @@
 
   private void validateNodeType(int type, Node n) {
     if (n.getType() != type) {
-      violation(
-          "Expected " + Node.tokenToName(type) + " but was "
-              + Node.tokenToName(n.getType()), n);
+      validateNodeType(Token.RETURN, n);
     }
   }
 


