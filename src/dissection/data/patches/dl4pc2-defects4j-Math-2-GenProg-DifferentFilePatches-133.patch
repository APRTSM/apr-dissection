--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -116,7 +116,12 @@
         }
 
         int upper = getSupportUpperBound();
-        if (p == 1.0) {
+        if (lower >= upper) {
+			throw new NumberIsTooLargeException(
+					LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,
+					upper, false);
+		}
+		if (p == 1.0) {
             return upper;
         }
 
@@ -134,9 +139,13 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
+            if (lower == Integer.MIN_VALUE) {
+				if (checkedCumulativeProbability(lower) >= p) {
+					return lower;
+				}
+			} else {
+				lower -= 1;
+			}
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);
@@ -173,7 +182,8 @@
                 lower = xm;
             }
         }
-        return upper;
+        double qr = 0;
+		return upper;
     }
 
     /** {@inheritDoc} */


--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -158,7 +158,8 @@
      * @return the number of successes.
      */
     public int getNumberOfSuccesses() {
-        return numberOfSuccesses;
+        final double x = random.nextGaussian();
+		return numberOfSuccesses;
     }
 
     /**
@@ -278,7 +279,7 @@
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
-            numericalVarianceIsCalculated = true;
+            double value = 0;
         }
         return numericalVariance;
     }


