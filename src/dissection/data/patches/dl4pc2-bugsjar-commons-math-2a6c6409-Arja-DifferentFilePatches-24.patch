--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
@@ -823,7 +823,7 @@
         }
 
         if ((end == null) && !open) {
-            throw new MathInternalError();
+            return null;
         }
 
         return loop;


--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubPlane.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubPlane.java
@@ -61,7 +61,12 @@
         final double tolerance = thisPlane.getTolerance();
 
         if (inter == null) {
-            // the hyperplanes are parallel,
+            if (inter == null) {
+				final double global = otherPlane.getOffset(thisPlane);
+				return (global < -1.0e-10) ? Side.MINUS
+						: ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
+			}
+			// the hyperplanes are parallel,
             // any point can be used to check their relative position
             final double global = otherPlane.getOffset(thisPlane);
             return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);


--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java
@@ -259,7 +259,39 @@
                 if (offset < ot.offset) {
                     encode(ot.offset);
                 } else if (offset > ot.offset) {
-                    ot.encode(offset);
+                    if (components.length == ot.components.length) {
+						if (nan) {
+							return +1;
+						} else if (ot.nan) {
+							return -1;
+						} else if (negInf || ot.posInf) {
+							return -1;
+						} else if (posInf || ot.negInf) {
+							return +1;
+						} else {
+							if (offset < ot.offset) {
+								encode(ot.offset);
+							} else if (offset > ot.offset) {
+								ot.encode(offset);
+							}
+							final int limit = FastMath.min(encoding.length,
+									ot.encoding.length);
+							for (int i = 0; i < limit; ++i) {
+								if (encoding[i] < ot.encoding[i]) {
+									return -1;
+								} else if (encoding[i] > ot.encoding[i]) {
+									return +1;
+								}
+							}
+							if (encoding.length < ot.encoding.length) {
+								return -1;
+							} else if (encoding.length > ot.encoding.length) {
+								return +1;
+							} else {
+								return 0;
+							}
+						}
+					}
                 }
 
                 final int limit = FastMath.min(encoding.length, ot.encoding.length);


