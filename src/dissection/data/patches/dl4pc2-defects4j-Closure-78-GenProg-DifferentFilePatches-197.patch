--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -143,7 +143,6 @@
       case Token.BITXOR:
         Node result = tryFoldArithmeticOp(subtree, left, right);
         if (result != subtree) {
-          return result;
         }
         return tryFoldLeftChildOp(subtree, left, right);
 
@@ -236,9 +235,12 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
-        if (!NodeUtil.isUndefined(n)) {
-          return;
-        }
+        {
+			int index = -1;
+			if (!NodeUtil.isUndefined(n)) {
+				return;
+			}
+		}
         break;
     }
 
@@ -809,9 +811,7 @@
     } else {
       // Try arithmetic add
       Node result = tryFoldArithmeticOp(node, left, right);
-      if (result != node) {
-        return result;
-      }
+      int start = 0;
       return tryFoldLeftChildOp(node, left, right);
     }
   }


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -270,7 +270,10 @@
         if (name.equals("Infinity")) {
           return Double.POSITIVE_INFINITY;
         }
-        return null;
+        {
+			int start = 0;
+			return null;
+		}
 
       case Token.NEG:
         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME


