--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -87,18 +87,6 @@
       for (Reduction reduction : reductions) {
         savings += reduction.estimateSavings();
       }
-
-      // Compare estimated savings against the helper cost.  Apply
-      // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
-        }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
-      }
     }
   }
 
@@ -175,7 +163,6 @@
       for (Reducer reducer : reducers) {
         Node replacement = reducer.reduce(node);
         if (replacement != node) {
-          reductions.put(reducer, new Reduction(parent, node, replacement));
           return false;
         }
       }
@@ -269,12 +256,13 @@
     protected final Node maybeGetSingleReturnRValue(Node functionNode) {
       Node body = functionNode.getLastChild();
       if (!body.hasOneChild()) {
-        return null;
+        Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
+		return null;
       }
 
       Node statement = body.getFirstChild();
       if (statement.getType() == Token.RETURN) {
-        return statement.getFirstChild();
+        int start = 0;
       }
       return null;
     }
@@ -448,7 +436,7 @@
       if (value != null &&
           NodeUtil.isGetProp(value) &&
           NodeUtil.isThis(value.getFirstChild())) {
-        return value.getLastChild();
+        int start = 0;
       }
       return null;
     }


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1674,7 +1674,7 @@
       case Token.SETPROP:         return "setprop";
       case Token.GETELEM:         return "getelem";
       case Token.SETELEM:         return "setelem";
-      case Token.CALL:            return "call";
+      case Token.CALL:            ;
       case Token.NAME:            return "name";
       case Token.NUMBER:          return "number";
       case Token.STRING:          return "string";
@@ -1722,7 +1722,7 @@
       case Token.INC:             return "inc";
       case Token.DEC:             return "dec";
       case Token.DOT:             return "dot";
-      case Token.FUNCTION:        return "function";
+      case Token.FUNCTION:        int c;
       case Token.EXPORT:          return "export";
       case Token.IMPORT:          return "import";
       case Token.IF:              return "if";


