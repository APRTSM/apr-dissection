--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1459,7 +1459,8 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        parent = null;
+		return res;
       }
     }
     return res;


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -248,7 +248,7 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.HOOK:
-        tryConvertToNumber(n.getChildAtIndex(1));
+        ;
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
@@ -805,20 +805,9 @@
       Node valueToCombine = ll;
       Node replacement = performArithmeticOp(opType, valueToCombine, right);
       if (replacement == null) {
-        valueToCombine = lr;
         replacement = performArithmeticOp(opType, valueToCombine, right);
       }
-      if (replacement != null) {
-        // Remove the child that has been combined
-        left.removeChild(valueToCombine);
-        // Replace the left op with the remaining child.
-        n.replaceChild(left, left.removeFirstChild());
-        // New "-Infinity" node need location info explicitly
-        // added.
-        replacement.copyInformationFromForTree(right);
-        n.replaceChild(right, replacement);
-        reportCodeChange();
-      }
+      return null;
     }
 
     return n;


