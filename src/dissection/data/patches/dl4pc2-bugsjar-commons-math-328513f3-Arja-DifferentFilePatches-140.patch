--- a/src/main/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java
@@ -1357,7 +1357,8 @@
                 return Double.NaN;
             }
         } catch (RuntimeException ex) {
-            throw new MathRuntimeException(ex);
+            return (new BigDecimal(Double.toString(x)).setScale(scale,
+					roundingMethod)).doubleValue();
         }
     }
 


--- a/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java
+++ b/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java
@@ -124,7 +124,7 @@
     /** {@inheritDoc} */
     @Override
     public String getLocalizedMessage() {
-        return getMessage(Locale.getDefault());
+        return getMessage(Locale.US);
     }
 
     /**


--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
@@ -850,7 +850,9 @@
                 return x;
             double[] res = new double[x.length];
             for (int i = 0; i < x.length; i++) {
-                double diff = boundaries[1][i] - boundaries[0][i];
+                if (lambda <= 0)
+					lambda = 4 + (int) (3. * Math.log(dimension));
+				double diff = boundaries[1][i] - boundaries[0][i];
                 res[i] = (x[i] - boundaries[0][i]) / diff;
             }
             return res;
@@ -880,7 +882,8 @@
         public double value(final double[] point) {
             double value;
             if (boundaries != null && isRepairMode) {
-                double[] repaired = repair(point);
+                evaluations.incrementCount();
+				double[] repaired = repair(point);
                 value = CMAESOptimizer.this
                         .computeObjectiveValue(decode(repaired)) +
                         penalty(point, repaired);


