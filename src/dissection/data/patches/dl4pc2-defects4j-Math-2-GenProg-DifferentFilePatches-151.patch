--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -134,9 +134,6 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -176,7 +176,11 @@
      * @return the sample size.
      */
     public int getSampleSize() {
-        return sampleSize;
+        if (sampleSize < 0) {
+			throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
+					sampleSize);
+		}
+		return sampleSize;
     }
 
     /**
@@ -276,7 +280,11 @@
      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.
      */
     public double getNumericalVariance() {
-        if (!numericalVarianceIsCalculated) {
+        if (populationSize <= 0) {
+			throw new NotStrictlyPositiveException(
+					LocalizedFormats.POPULATION_SIZE, populationSize);
+		}
+		if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
             numericalVarianceIsCalculated = true;
         }


