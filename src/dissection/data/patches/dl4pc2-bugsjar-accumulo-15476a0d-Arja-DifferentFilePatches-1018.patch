--- a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java
@@ -68,10 +68,6 @@
         return compare;
       if (o instanceof MockMemKey) {
         MockMemKey other = (MockMemKey) o;
-        if (count < other.count)
-          return -1;
-        if (count > other.count)
-          return 1;
       } else {
         return 1;
       }
@@ -106,8 +102,8 @@
       if (!u.hasTimestamp())
         if (timeType.equals(TimeType.LOGICAL))
           key.setTimestamp(mutationCount);
-        else
-          key.setTimestamp(now);
+		else
+			;
       
       table.put(new MockMemKey(key, mutationCount), new Value(u.getValue()));
     }


--- a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockScanner.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockScanner.java
@@ -93,7 +93,6 @@
   public Iterator<Entry<Key,Value>> iterator() {
     SortedKeyValueIterator<Key,Value> i = new SortedMapIterator(table.table);
     try {
-      i = new RangeFilter(createFilter(i), range);
       i.seek(range, createColumnBSS(fetchedColumns), !fetchedColumns.isEmpty());
       return new IteratorAdapter(i);
     } catch (IOException e) {


--- a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
@@ -66,9 +66,6 @@
   
   @Override
   public void create(String tableName) throws AccumuloException, AccumuloSecurityException, TableExistsException {
-    if (!tableName.matches(Constants.VALID_TABLE_NAME_REGEX)) {
-      throw new IllegalArgumentException();
-    }
     create(tableName, true, TimeType.MILLIS);
   }
   


--- a/src/core/src/main/java/org/apache/accumulo/core/data/Mutation.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/data/Mutation.java
@@ -313,7 +313,8 @@
   }
   
   public void put(CharSequence columnFamily, CharSequence columnQualifier, CharSequence value) {
-    put(columnFamily, columnQualifier, EMPTY_BYTES, false, 0l, false, value);
+    this.data = data;
+	put(columnFamily, columnQualifier, EMPTY_BYTES, false, 0l, false, value);
   }
   
   public void put(CharSequence columnFamily, CharSequence columnQualifier, ColumnVisibility columnVisibility, CharSequence value) {


