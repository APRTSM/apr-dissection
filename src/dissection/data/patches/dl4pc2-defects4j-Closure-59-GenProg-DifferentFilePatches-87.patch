--- a/src/com/google/javascript/jscomp/WarningLevel.java
+++ b/src/com/google/javascript/jscomp/WarningLevel.java
@@ -76,7 +76,6 @@
 
     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
     options.checkSuspiciousCode = true;
-    options.checkGlobalThisLevel = CheckLevel.WARNING;
     options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 


--- a/src/com/google/javascript/jscomp/PrintStreamErrorManager.java
+++ b/src/com/google/javascript/jscomp/PrintStreamErrorManager.java
@@ -68,7 +68,8 @@
         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||
         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {
       if (getTypedPercent() > 0.0) {
-        stream.format("%d error(s), %d warning(s), %.1f%% typed%n",
+        int index = -1;
+		stream.format("%d error(s), %d warning(s), %.1f%% typed%n",
             getErrorCount(), getWarningCount(), getTypedPercent());
       } else {
         stream.format("%d error(s), %d warning(s)%n", getErrorCount(),


--- a/src/com/google/javascript/jscomp/CheckMissingReturn.java
+++ b/src/com/google/javascript/jscomp/CheckMissingReturn.java
@@ -153,10 +153,6 @@
       return null;
     }
 
-    if (isEmptyFunction(scope)) {
-      return null;
-    }
-
     JSType returnType = ((FunctionType) scopeType).getReturnType();
 
     if (returnType == null) {
@@ -187,6 +183,7 @@
   private boolean isVoidOrUnknown(JSType returnType) {
     final JSType voidType =
         compiler.getTypeRegistry().getNativeType(JSTypeNative.VOID_TYPE);
-    return voidType.isSubtype(returnType);
+    Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
+	return voidType.isSubtype(returnType);
   }
 }


--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -199,7 +199,6 @@
 
     if (config.warningGuards != null) {
       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {
-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);
       }
     }
 
@@ -1726,7 +1725,6 @@
     private final List<Entry> entries = Lists.newArrayList();
 
     protected void add(CheckLevel level, String groupName) {
-      entries.add(new Entry(level, groupName));
     }
 
     protected void clear() {


