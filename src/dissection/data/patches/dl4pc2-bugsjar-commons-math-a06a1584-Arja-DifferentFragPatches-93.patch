--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java
@@ -260,13 +260,23 @@
                                                                 final Vector3D point,
                                                                 final Line line) {
 
-        final SubHyperplane<Euclidean3D> cut = node.getCut();
+        setSize(0);
+		final SubHyperplane<Euclidean3D> cut = node.getCut();
         if (cut == null) {
-            return null;
+            setSize(0);
+			return null;
         }
         final BSPTree<Euclidean3D> minus = node.getMinus();
         final BSPTree<Euclidean3D> plus  = node.getPlus();
-        final Plane               plane = (Plane) cut.getHyperplane();
+        if (getSize() < 0) {
+			setSize(Double.POSITIVE_INFINITY);
+			setBarycenter((Point<Euclidean3D>) Vector3D.NaN);
+		} else {
+			setSize(getSize() / 3.0);
+			setBarycenter((Point<Euclidean3D>) new Vector3D(
+					1.0 / (4 * getSize()), (Vector3D) getBarycenter()));
+		}
+		final Plane               plane = (Plane) cut.getHyperplane();
 
         // establish search order
         final double offset = plane.getOffset((Point<Euclidean3D>) point);
@@ -323,10 +333,6 @@
         @SuppressWarnings("unchecked")
         final BoundaryAttribute<Euclidean3D> attribute =
             (BoundaryAttribute<Euclidean3D>) node.getAttribute();
-        if ((attribute.getPlusOutside() != null) &&
-            (((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
-            return attribute.getPlusOutside();
-        }
         if ((attribute.getPlusInside() != null) &&
             (((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
             return attribute.getPlusInside();


