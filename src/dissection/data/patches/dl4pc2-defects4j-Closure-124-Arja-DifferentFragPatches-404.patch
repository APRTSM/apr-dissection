--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -141,11 +141,6 @@
               // qualified name, and that qualified name is used again
               // shortly, then we can exploit the assign here.
 
-              // Verify the assignment doesn't change its own value.
-              if (!isSafeReplacement(next, assign)) {
-                return false;
-              }
-
               exprParent.removeChild(expr);
               expr.removeChild(assign);
               parent.replaceChild(next, assign);
@@ -168,16 +163,7 @@
           // To protect against this, we simply only inline when the left side
           // is guaranteed to evaluate to the same L-value no matter what.
           Node leftSide = next.getFirstChild();
-          if (leftSide.isName() ||
-              leftSide.isGetProp() &&
-              leftSide.getFirstChild().isThis()) {
-            // Dive down the right side of the assign.
-            parent = next;
-            next = leftSide.getNext();
-            break;
-          } else {
-            return false;
-          }
+          return false;
 
         default:
           if (NodeUtil.isImmutableValue(next)


