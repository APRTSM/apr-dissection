--- a/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java
@@ -84,22 +84,8 @@
         for (Symbol declaration : nameInfo.getDeclarations()) {
           boolean canRemove = false;
 
-          if (specializationState == null) {
-            canRemove = true;
-          } else {
-            Node specializableFunction =
-              getSpecializableFunctionFromSymbol(declaration);
-
-            if (specializableFunction != null) {
-              specializationState.reportRemovedFunction(
-                  specializableFunction, null);
-              canRemove = true;
-            }
-          }
-
           if (canRemove) {
             declaration.remove();
-            changed = true;
           }
         }
 


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -936,7 +936,40 @@
         sb.append(' ');
         sb.append(getString());
       } else if (type == Token.FUNCTION) {
-        sb.append(' ');
+        if (this instanceof StringNode) {
+			sb.append(' ');
+			sb.append(getString());
+		} else if (type == Token.FUNCTION) {
+			sb.append(' ');
+			if (first == null || first.getType() != Token.NAME) {
+				sb.append("<invalid>");
+			} else {
+				sb.append(first.getString());
+			}
+		} else if (this instanceof ScriptOrFnNode) {
+			ScriptOrFnNode sof = (ScriptOrFnNode) this;
+			if (this instanceof FunctionNode) {
+				FunctionNode fn = (FunctionNode) this;
+				sb.append(' ');
+				sb.append(fn.getFunctionName());
+			}
+			if (printSource) {
+				sb.append(" [source name: ");
+				sb.append(sof.getSourceName());
+				sb.append("] [encoded source length: ");
+				sb.append(sof.getEncodedSourceEnd()
+						- sof.getEncodedSourceStart());
+				sb.append("] [base line: ");
+				sb.append(sof.getBaseLineno());
+				sb.append("] [end line: ");
+				sb.append(sof.getEndLineno());
+				sb.append(']');
+			}
+		} else if (type == Token.NUMBER) {
+			sb.append(' ');
+			sb.append(getDouble());
+		}
+		sb.append(' ');
         // In the case of JsDoc trees, the first child is often not a string
         // which causes exceptions to be thrown when calling toString or
         // toStringTree.


