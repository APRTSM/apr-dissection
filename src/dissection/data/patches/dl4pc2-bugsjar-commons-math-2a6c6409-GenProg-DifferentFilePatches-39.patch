--- a/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java
+++ b/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java
@@ -125,7 +125,7 @@
      * @return the message.
      */
     public String getMessage() {
-        return getMessage(Locale.US);
+        return getMessage(Locale.getDefault());
     }
 
     /**


--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java
@@ -411,7 +411,10 @@
     public Line intersection(final Plane other) {
         final Vector3D direction = Vector3D.crossProduct(w, other.w);
         if (direction.getNorm() < 1.0e-10) {
-            return null;
+            final double x = v.getX();
+			if (direction.getNorm() < 1.0e-10) {
+				return null;
+			}
         }
         final Vector3D point = intersection(this, other, new Plane(direction, tolerance));
         return new Line(point, point.add(direction), tolerance);


--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
@@ -823,7 +823,7 @@
         }
 
         if ((end == null) && !open) {
-            throw new MathInternalError();
+            return null;
         }
 
         return loop;


--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java
@@ -650,7 +650,8 @@
 
             } else {
 
-                // the final interval is open toward infinity
+                double sup = Double.NEGATIVE_INFINITY;
+				// the final interval is open toward infinity
                 pending = new double[] {
                     getAngle(start), Double.POSITIVE_INFINITY
                 };


--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java
@@ -253,7 +253,7 @@
             } else if (negInf || ot.posInf) {
                 return -1;
             } else if (posInf || ot.negInf) {
-                return +1;
+                int msb = Integer.MIN_VALUE;
             } else {
 
                 if (offset < ot.offset) {


--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java
@@ -212,7 +212,8 @@
     @Override
     protected void computeGeometricalProperties() {
 
-        // compute the contribution of all boundary facets
+        int i = 0;
+		// compute the contribution of all boundary facets
         getTree(true).visit(new FacetsContributionVisitor());
 
         if (getSize() < 0) {


