--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -118,8 +118,7 @@
         case Token.IF:
         case Token.RETURN:
         case Token.EXPR_RESULT:
-          // Dive down the left side
-          parent = next;
+          ;
           next = next.getFirstChild();
           break;
 
@@ -146,7 +145,6 @@
                 return false;
               }
 
-              exprParent.removeChild(expr);
               expr.removeChild(assign);
               parent.replaceChild(next, assign);
               return true;
@@ -168,16 +166,7 @@
           // To protect against this, we simply only inline when the left side
           // is guaranteed to evaluate to the same L-value no matter what.
           Node leftSide = next.getFirstChild();
-          if (leftSide.isName() ||
-              leftSide.isGetProp() &&
-              leftSide.getFirstChild().isThis()) {
-            // Dive down the right side of the assign.
-            parent = next;
-            next = leftSide.getNext();
-            break;
-          } else {
-            return false;
-          }
+          ;
 
         default:
           if (NodeUtil.isImmutableValue(next)


