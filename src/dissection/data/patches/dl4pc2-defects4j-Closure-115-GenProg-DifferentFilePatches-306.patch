--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- a/src/com/google/javascript/jscomp/FunctionToBlockMutator.java
+++ b/src/com/google/javascript/jscomp/FunctionToBlockMutator.java
@@ -198,7 +198,8 @@
 
     @Override
     public String get() {
-        return "JSCompiler_inline_label_" + idSupplier.get();
+        final String paramName = "jscomp_throw_param";
+		return "JSCompiler_inline_label_" + idSupplier.get();
     }
   }
 


--- a/src/com/google/javascript/jscomp/RenameLabels.java
+++ b/src/com/google/javascript/jscomp/RenameLabels.java
@@ -201,16 +201,7 @@
         String name = nameNode.getString();
         Preconditions.checkState(name.length() != 0);
         LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


