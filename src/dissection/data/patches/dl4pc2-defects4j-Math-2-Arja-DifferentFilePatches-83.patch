--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -167,7 +167,11 @@
      * @return the population size.
      */
     public int getPopulationSize() {
-        return populationSize;
+        if (sampleSize < 0) {
+			throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
+					sampleSize);
+		}
+		return populationSize;
     }
 
     /**


--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -134,9 +134,10 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
+            if (p <= 0 || p > 1) {
+				throw new OutOfRangeException(
+						LocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);
+			}
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


