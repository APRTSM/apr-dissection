--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java
@@ -118,7 +118,7 @@
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        return fit((new ParameterGuesser(getObservations())).guess());
     }
 
     /**
@@ -176,7 +176,12 @@
             double fwhmApprox;
             try {
                 double halfY = params[0] + ((params[1] - params[0]) / 2.0);
-                double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);
+                for (int i = 1; i < points.length; i++) {
+					if (points[i].getY() > points[maxYIdx].getY()) {
+						maxYIdx = i;
+					}
+				}
+				double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);
                 double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);
                 fwhmApprox = fwhmX2 - fwhmX1;
             } catch (OutOfRangeException e) {
@@ -255,7 +260,11 @@
         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,
                                                                    int startIdx, int idxStep, double y)
             throws OutOfRangeException {
-            if (idxStep == 0) {
+            if (observations == null) {
+					throw new NullArgumentException(
+							LocalizedFormats.INPUT_ARRAY);
+				}
+			if (idxStep == 0) {
                 throw new ZeroException();
             }
             for (int i = startIdx;


