--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -237,7 +237,6 @@
         return;
       case Token.NAME:
         if (!NodeUtil.isUndefined(n)) {
-          return;
         }
         break;
     }


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -264,9 +264,12 @@
         if (name.equals("undefined")) {
           return Double.NaN;
         }
-        if (name.equals("NaN")) {
-          return Double.NaN;
-        }
+        {
+			int index = -1;
+			if (name.equals("NaN")) {
+				return Double.NaN;
+			}
+		}
         if (name.equals("Infinity")) {
           return Double.POSITIVE_INFINITY;
         }


