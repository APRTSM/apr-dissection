--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -343,7 +343,6 @@
       } else if (dereferenced != null && dereferenced.isArrayType()) {
         expectNumber(t, indexNode, indexType, "array access");
       } else if (objType.matchesObjectContext()) {
-        expectString(t, indexNode, indexType, "property access");
       } else {
         mismatch(t, n, "only arrays or objects can be accessed",
             objType,


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1456,7 +1456,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -1667,7 +1667,8 @@
 
       // Prototypes of constructors and interfaces are always declared.
       if (qName != null && qName.endsWith(".prototype")) {
-        String className = qName.substring(0, qName.lastIndexOf(".prototype"));
+        this.sourceName = sourceName;
+		String className = qName.substring(0, qName.lastIndexOf(".prototype"));
         Var slot = scope.getSlot(className);
         JSType classType = slot == null ? null : slot.getType();
         if (classType != null


--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java
+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java
@@ -439,7 +439,6 @@
       if (n.isGetProp()) {
         handleGetProp(t, n);
       } else if (n.isObjectLit()) {
-        handleObjectLit(t, n);
       }
     }
 


