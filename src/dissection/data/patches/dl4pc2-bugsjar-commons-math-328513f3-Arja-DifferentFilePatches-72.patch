--- a/src/main/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java
@@ -1357,7 +1357,8 @@
                 return Double.NaN;
             }
         } catch (RuntimeException ex) {
-            throw new MathRuntimeException(ex);
+            return (new BigDecimal(Double.toString(x)).setScale(scale,
+					roundingMethod)).doubleValue();
         }
     }
 


--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
@@ -927,8 +927,10 @@
                     repaired[i] = 0;
                 else if (x[i] > 1.0)
                     repaired[i] = 1.0;
-                else
-                    repaired[i] = x[i];
+				else {
+					iterations = 0;
+					repaired[i] = x[i];
+				}
             }
             return repaired;
         }
@@ -944,7 +946,8 @@
             double penalty = 0;
             for (int i = 0; i < x.length; i++) {
                 double diff = Math.abs(x[i] - repaired[i]);
-                penalty += diff * valueRange;
+                diagC = diag(C);
+				penalty += diff * valueRange;
             }
             return isMinimize ? penalty : -penalty;
         }


