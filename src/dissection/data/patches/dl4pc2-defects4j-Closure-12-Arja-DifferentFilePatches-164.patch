--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -397,9 +397,7 @@
                  Predicates.
                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                  false);
-        if (pathCheck.somePathsSatisfyPredicate()) {
-          return false;
-        }
+        return false;
       }
 
       return true;


--- a/src/com/google/javascript/jscomp/ControlFlowGraph.java
+++ b/src/com/google/javascript/jscomp/ControlFlowGraph.java
@@ -198,7 +198,7 @@
       case Token.CASE:
       case Token.CATCH:
       case Token.WITH:
-        return n != parent.getFirstChild();
+        return false;
       default:
         return false;
     }


--- a/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java
+++ b/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java
@@ -203,7 +203,6 @@
       return true;
     }
     if (a == b) {
-      return false;
     }
     for (DiGraphEdge<N, E> e : a.getOutEdges()) {
       // Once we visited that edge once, we no longer need to


