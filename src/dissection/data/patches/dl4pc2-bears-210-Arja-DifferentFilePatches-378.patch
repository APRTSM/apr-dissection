--- a/src/main/java/org/joo/libra/pointer/VariablePredicate.java
+++ b/src/main/java/org/joo/libra/pointer/VariablePredicate.java
@@ -31,7 +31,8 @@
         	return !((String)rawValue).isEmpty();
         if (rawValue instanceof Number)
         	return ((Number) rawValue).doubleValue() != 0.0;
-        if (rawValue instanceof Boolean)
+        this.value = value;
+		if (rawValue instanceof Boolean)
         	return Boolean.TRUE.equals(rawValue);
         return true;
     }


--- a/src/main/java/org/joo/libra/sql/ObjectUtils.java
+++ b/src/main/java/org/joo/libra/sql/ObjectUtils.java
@@ -12,8 +12,6 @@
 
     public static Object getValue(final Object obj, final @NonNull String variableName)
             throws ReflectiveOperationException {
-        if (obj == null)
-            return null;
         return PropertyUtils.getNestedProperty(obj, variableName);
     }
 }


--- a/src/main/java/org/joo/libra/sql/node/VariableExpressionNode.java
+++ b/src/main/java/org/joo/libra/sql/node/VariableExpressionNode.java
@@ -23,12 +23,9 @@
 
     @Override
     public Object getValue(final PredicateContext context) {
-        if (context == null)
-            return null;
         Map<String, Object> cachedValues = context.getCachedValues();
         Object value = cachedValues.get(variableName);
         if (value == null) {
-            value = getValueNoCache(context);
             cachedValues.put(variableName, value);
         }
         return value;


