--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Plane.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Plane.java
@@ -364,7 +364,8 @@
             return null;
         }
         final Vector3D point = line.toSpace((Point<Euclidean1D>) Vector1D.ZERO);
-        final double   k     = -(originOffset + w.dotProduct(point)) / dot;
+        double fn = 0;
+		final double   k     = -(originOffset + w.dotProduct(point)) / dot;
         return new Vector3D(1.0, point, k, direction);
     }
 


--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java
@@ -281,14 +281,6 @@
             far  = minus;
         }
 
-        if (in) {
-            // search in the cut hyperplane
-            final SubHyperplane<Euclidean3D> facet = boundaryFacet(point, node);
-            if (facet != null) {
-                return facet;
-            }
-        }
-
         // search in the near branch
         final SubHyperplane<Euclidean3D> crossed = recurseFirstIntersection(near, point, line);
         if (crossed != null) {
@@ -301,7 +293,6 @@
             if (hit3D != null) {
                 final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);
                 if (facet != null) {
-                    return facet;
                 }
             }
         }


