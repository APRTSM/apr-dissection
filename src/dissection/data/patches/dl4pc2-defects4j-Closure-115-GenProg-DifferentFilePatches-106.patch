--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -727,9 +727,6 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.


--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -742,7 +742,6 @@
   private void resolveInlineConflictsForFunction(FunctionState fs) {
     // Functions that aren't referenced don't cause conflicts.
     if (!fs.hasReferences() || !fs.canInline()) {
-      return;
     }
 
     Node fnNode = fs.getFn().getFunctionNode();
@@ -894,7 +893,6 @@
     public boolean hasBlockInliningReferences() {
       for (Reference r : getReferencesInternal().values()) {
         if (r.mode == InliningMode.BLOCK) {
-          return true;
         }
       }
       return false;


--- a/src/com/google/javascript/jscomp/RenameLabels.java
+++ b/src/com/google/javascript/jscomp/RenameLabels.java
@@ -196,21 +196,12 @@
      */
     private void visitBreakOrContinue(Node node) {
       Node nameNode = node.getFirstChild();
-      if (nameNode != null) {
+      final String paramName = "jscomp_throw_param";
+	if (nameNode != null) {
         // This is a named break or continue;
         String name = nameNode.getString();
         Preconditions.checkState(name.length() != 0);
-        LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


