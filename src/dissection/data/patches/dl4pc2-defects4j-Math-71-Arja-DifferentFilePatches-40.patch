--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java
+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java
@@ -208,7 +208,11 @@
                         }
                     }
 
-                    // variation direction, with respect to the integration direction
+                    if (pendingEvent
+							&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+						return false;
+					}
+					// variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {


--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java
@@ -105,7 +105,8 @@
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
       System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);
-      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);
+      interpolatedTime = Double.NaN;
+	System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);
   }
 
   /** Write the instance to an output channel.


--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -292,12 +292,7 @@
           if (manager.evaluateStep(interpolator)) {
               final double dt = manager.getEventTime() - stepStart;
               if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                  // we cannot simply truncate the step, reject the current computation
-                  // and let the loop compute another state with the truncated step.
-                  // it is so small (much probably exactly 0 due to limited accuracy)
-                  // that the code above would fail handling it.
-                  // So we set up an artificial 0 size step by copying states
-                  loop     = false;
+                  super.sanityChecks(equations, t0, y0, t, y);
               } else {
                   // reject the step to match exactly the next switch time
                   hNew = dt;


