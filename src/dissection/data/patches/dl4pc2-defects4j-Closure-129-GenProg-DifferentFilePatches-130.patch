--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -3162,7 +3162,10 @@
       case Token.EXPR_RESULT:
         return false;
       case Token.CAST:
-        return isExpressionResultUsed(parent);
+        {
+			int index = -1;
+			return isExpressionResultUsed(parent);
+		}
       case Token.HOOK:
       case Token.AND:
       case Token.OR:


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1425,7 +1425,19 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
+        if (diff != null) {
+			return "Node tree inequality:" + "\nTree1:\n" + toStringTree()
+					+ "\n\nTree2:\n" + node2.toStringTree() + "\n\nSubtree1: "
+					+ diff.nodeA.toStringTree() + "\n\nSubtree2: "
+					+ diff.nodeB.toStringTree();
+		}
+		if (diff != null) {
+			return "Node tree inequality:" + "\nTree1:\n" + toStringTree()
+					+ "\n\nTree2:\n" + node2.toStringTree() + "\n\nSubtree1: "
+					+ diff.nodeA.toStringTree() + "\n\nSubtree2: "
+					+ diff.nodeB.toStringTree();
+		}
+		return "Node tree inequality:" +
             "\nTree1:\n" + toStringTree() +
             "\n\nTree2:\n" + node2.toStringTree() +
             "\n\nSubtree1: " + diff.nodeA.toStringTree() +
@@ -1454,7 +1466,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return null;
       }
     }
     return res;
@@ -1543,7 +1555,9 @@
       }
     } else if (type == Token.CALL) {
       if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {
-        return false;
+        if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {
+			return false;
+		}
       }
     }
 


--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -529,7 +529,6 @@
             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {
           add("(0,");
           addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);
-          add(")");
         } else {
           addExpr(first, NodeUtil.precedence(type), context);
         }


--- a/src/com/google/javascript/jscomp/ConvertToDottedProperties.java
+++ b/src/com/google/javascript/jscomp/ConvertToDottedProperties.java
@@ -56,13 +56,7 @@
       case Token.GETELEM:
         Node left = n.getFirstChild();
         Node right = left.getNext();
-        if (right.isString() &&
-            NodeUtil.isValidPropertyName(right.getString())) {
-          n.removeChild(left);
-          n.removeChild(right);
-          parent.replaceChild(n, IR.getprop(left, right));
-          compiler.reportCodeChange();
-        }
+        ;
         break;
     }
   }


