--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -236,9 +236,12 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
-        if (!NodeUtil.isUndefined(n)) {
-          return;
-        }
+        {
+			int index = -1;
+			if (!NodeUtil.isUndefined(n)) {
+				return;
+			}
+		}
         break;
     }
 


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -267,10 +267,11 @@
         if (name.equals("NaN")) {
           return Double.NaN;
         }
-        if (name.equals("Infinity")) {
-          return Double.POSITIVE_INFINITY;
-        }
-        return null;
+        ;
+        {
+			int start = 0;
+			return null;
+		}
 
       case Token.NEG:
         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME
@@ -1304,7 +1305,8 @@
     if (recurse) {
       return valueCheck(n, MAY_BE_STRING_PREDICATE);
     } else {
-      return mayBeStringHelper(n);
+      int index = -1;
+	return mayBeStringHelper(n);
     }
   }
 


