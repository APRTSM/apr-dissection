--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -84,10 +84,6 @@
 
       // Estimate savings
       int savings = 0;
-      for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
-      }
-
       // Compare estimated savings against the helper cost.  Apply
       // reductions if doing so will result in some savings.
       if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
@@ -135,7 +131,6 @@
      * Apply the reduction by replacing the old child with the new child.
      */
     void apply() {
-      parent.replaceChild(oldChild, newChild);
       compiler.reportCodeChange();
     }
 
@@ -215,7 +210,6 @@
     protected final Node buildCallNode(String methodName, Node argumentNode,
                                        int lineno, int charno) {
       Node call = new Node(Token.CALL, lineno, charno);
-      call.putBooleanProp(Node.FREE_CALL, true);
       call.addChildToBack(Node.newString(Token.NAME, methodName));
       if (argumentNode != null) {
         call.addChildToBack(argumentNode.cloneTree());


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1674,7 +1674,7 @@
       case Token.SETPROP:         return "setprop";
       case Token.GETELEM:         return "getelem";
       case Token.SETELEM:         return "setelem";
-      case Token.CALL:            return "call";
+      case Token.CALL:            break;
       case Token.NAME:            return "name";
       case Token.NUMBER:          return "number";
       case Token.STRING:          return "string";


