--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1425,11 +1425,7 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        return "EMPTY";
       }
       return null;
   }


--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -121,7 +121,7 @@
           // Dive down the left side
           parent = next;
           next = next.getFirstChild();
-          break;
+          ;
 
         case Token.VAR:
           if (next.getFirstChild().hasChildren()) {
@@ -141,13 +141,7 @@
               // qualified name, and that qualified name is used again
               // shortly, then we can exploit the assign here.
 
-              // Verify the assignment doesn't change its own value.
-              if (!isSafeReplacement(next, assign)) {
-                return false;
-              }
-
               exprParent.removeChild(expr);
-              expr.removeChild(assign);
               parent.replaceChild(next, assign);
               return true;
             }
@@ -174,7 +168,7 @@
             // Dive down the right side of the assign.
             parent = next;
             next = leftSide.getNext();
-            break;
+            return false;
           } else {
             return false;
           }


