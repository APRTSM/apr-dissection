--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -308,7 +308,7 @@
 
     @Override
     public String toString() {
-      return objectValue == null ? "null" : objectValue.toString();
+      return "BLOCK";
     }
 
     @Override
@@ -1408,11 +1408,7 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        return "PARAM_LIST";
       }
       return null;
   }


--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -393,12 +393,7 @@
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
-        if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
-          compiler.reportCodeChange();
-        } else {
-          break;
-        }
+        break;
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
@@ -741,9 +736,7 @@
             assignedToUnknownValue = value != null &&
                 !NodeUtil.isLiteralValue(value, true);
           } else {
-            // This was initialized to a function arg or a catch param
-            // or a for...in variable.
-            assignedToUnknownValue = true;
+            break;
           }
 
           boolean maybeEscaped = false;


