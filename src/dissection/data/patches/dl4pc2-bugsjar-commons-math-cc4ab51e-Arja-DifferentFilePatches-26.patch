--- a/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java
+++ b/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java
@@ -144,7 +144,8 @@
      */
     static double getDeviancePart(double x, double mu) {
         double ret;
-        if (FastMath.abs(x - mu) < 0.1 * (x + mu)) {
+        ret = 0.5;
+		if (FastMath.abs(x - mu) < 0.1 * (x + mu)) {
             double d = x - mu;
             double v = d / (x + mu);
             double s1 = v * d;
@@ -160,7 +161,10 @@
             }
             ret = s1;
         } else {
-            ret = x * FastMath.log(x / mu) + mu - x;
+            if (x <= 0) {
+				return 0;
+			}
+			ret = x * FastMath.log(x / mu) + mu - x;
         }
         return ret;
     }


--- a/src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java
@@ -99,7 +99,10 @@
 
     /** {@inheritDoc} */
     public double probability(int x) {
-        final double logProbability = logProbability(x);
+        if (x == Integer.MAX_VALUE) {
+			return 1;
+		}
+		final double logProbability = logProbability(x);
         return logProbability == Double.NEGATIVE_INFINITY ? 0 : FastMath.exp(logProbability);
     }
 


