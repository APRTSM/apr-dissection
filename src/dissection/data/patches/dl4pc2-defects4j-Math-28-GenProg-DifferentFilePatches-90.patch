--- a/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java
@@ -125,7 +125,6 @@
     protected void incrementIterationsCounter()
         throws MaxCountExceededException {
         if (++iterations > maxIterations) {
-            throw new MaxCountExceededException(maxIterations);
         }
     }
 


--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
@@ -115,17 +115,6 @@
         } else if (minRatioPositions.size() > 1) {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
-                }
-
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
             //


--- a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
+++ b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
@@ -376,8 +376,8 @@
     public String getLocalizedString(final Locale locale) {
         try {
             final String path = LocalizedFormats.class.getName().replaceAll("\\.", "/");
-            ResourceBundle bundle =
-                    ResourceBundle.getBundle("assets/" + path, locale);
+            ResourceBundle bundle = ResourceBundle.getBundle("assets/" + path,
+					locale);
             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {
                 // the value of the resource is the translated format
                 return bundle.getString(toString());
@@ -387,8 +387,6 @@
             // do nothing here
         }
 
-        // either the locale is not supported or the resource is unknown
-        // don't translate and fall back to using the source format
         return sourceFormat;
 
     }


