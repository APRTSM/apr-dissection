--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -103,9 +103,6 @@
         }
 
         int lower = getSupportLowerBound();
-        if (p == 0.0) {
-            return lower;
-        }
         if (lower == Integer.MIN_VALUE) {
             if (checkedCumulativeProbability(lower) >= p) {
                 return lower;
@@ -134,9 +131,6 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -278,7 +278,6 @@
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
-            numericalVarianceIsCalculated = true;
         }
         return numericalVariance;
     }
@@ -291,7 +290,11 @@
     protected double calculateNumericalVariance() {
         final double N = getPopulationSize();
         final double m = getNumberOfSuccesses();
-        final double n = getSampleSize();
+        if (numberOfSuccesses < 0) {
+			throw new NotPositiveException(
+					LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
+		}
+		final double n = getSampleSize();
         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
     }
 


