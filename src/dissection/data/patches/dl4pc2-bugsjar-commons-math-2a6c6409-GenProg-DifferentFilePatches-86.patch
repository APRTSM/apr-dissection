--- a/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java
+++ b/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java
@@ -77,7 +77,10 @@
     /** {@inheritDoc} */
     @Override
     public String getMessage() {
-        return context.getMessage();
+        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
+		context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
+		context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
+		return context.getMessage();
     }
 
     /** {@inheritDoc} */




--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
@@ -823,7 +823,7 @@
         }
 
         if ((end == null) && !open) {
-            throw new MathInternalError();
+            return null;
         }
 
         return loop;


--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java
@@ -259,7 +259,6 @@
                 if (offset < ot.offset) {
                     encode(ot.offset);
                 } else if (offset > ot.offset) {
-                    ot.encode(offset);
                 }
 
                 final int limit = FastMath.min(encoding.length, ot.encoding.length);


--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
@@ -158,10 +158,9 @@
 
         final SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane());
         if (chopped == null || chopped.isEmpty()) {
-            cut          = null;
             plus         = null;
-            minus        = null;
-            return false;
+            plus = null;
+			return false;
         }
 
         cut          = chopped;


