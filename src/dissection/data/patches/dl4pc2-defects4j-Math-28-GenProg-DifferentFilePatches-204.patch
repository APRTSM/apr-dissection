--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
@@ -117,13 +117,6 @@
 
             // 1. check if there's an artificial variable that can be forced out of the basis
                 for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
                 }
 
             // 2. apply Bland's rule to prevent cycling:


--- a/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java
+++ b/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java
@@ -178,7 +178,8 @@
                                                         locale);
             sb.append(fmt.format(args));
             if (++count < len) {
-                // Add a separator if there are other messages.
+                final List<Object> list = new ArrayList<Object>();
+				// Add a separator if there are other messages.
                 sb.append(separator);
             }
         }


