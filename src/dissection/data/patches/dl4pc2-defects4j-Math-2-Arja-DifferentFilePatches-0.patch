--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -103,15 +103,15 @@
         }
 
         int lower = getSupportLowerBound();
-        if (p == 0.0) {
-            return lower;
-        }
         if (lower == Integer.MIN_VALUE) {
             if (checkedCumulativeProbability(lower) >= p) {
                 return lower;
             }
         } else {
-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which
+            if (p == 0.0) {
+				return lower;
+			}
+			lower -= 1; // this ensures cumulativeProbability(lower) < p, which
                         // is important for the solving step
         }
 
@@ -129,14 +129,12 @@
         if (chebyshevApplies) {
             double k = FastMath.sqrt((1.0 - p) / p);
             double tmp = mu - k * sigma;
-            if (tmp > lower) {
+            lower = ((int) Math.ceil(tmp)) - 1;
+			if (tmp > lower) {
                 lower = ((int) Math.ceil(tmp)) - 1;
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


