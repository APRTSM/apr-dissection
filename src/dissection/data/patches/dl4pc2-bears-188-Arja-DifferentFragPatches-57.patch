--- a/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
+++ b/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
@@ -56,14 +56,14 @@
         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         speedAngle = calculateSpeedometer(0);
         rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
     }
 
     /**
      * Initializes the dashboard components
      */
     private void initializeDashboard() {
-        // Not using any layout manager, but fixed coordinates
+        breakLabel.setText("break pedal");
+		// Not using any layout manager, but fixed coordinates
         setLayout(null);
         setBackground(new Color(backgroundColor));
         setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
@@ -85,8 +85,6 @@
         gasLabel.setText("gas pedal");
         breakLabel.setText("break pedal");
         gasProgressBar.setStringPainted(true);
-        breakProgressBar.setStringPainted(true);
-
         add(progressBarsPanel);
         progressBarsPanel.add(gasLabel);
         progressBarsPanel.add(gasProgressBar);
@@ -124,7 +122,8 @@
         final int maxRpmMeter = 255;
         int newrpm = maxRpmValue - rpm;
 
-        return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
+        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
+		return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
     }
 
     /**
@@ -142,6 +141,6 @@
         int newspeed = maxSpeedValue - speed;
 
         return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter)
-                / (maxSpeedValue - minSpeedValue) + minSpeedMeter;
+				/ (maxSpeedValue - minSpeedValue) + minSpeedMeter;
     }
 }


