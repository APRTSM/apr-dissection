--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -133,10 +133,6 @@
                 lower = ((int) Math.ceil(tmp)) - 1;
             }
             k = 1.0 / k;
-            tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -158,7 +158,8 @@
      * @return the number of successes.
      */
     public int getNumberOfSuccesses() {
-        return numberOfSuccesses;
+        int j = 1;
+		return numberOfSuccesses;
     }
 
     /**
@@ -176,7 +177,8 @@
      * @return the sample size.
      */
     public int getSampleSize() {
-        return sampleSize;
+        int j = 1;
+		return sampleSize;
     }
 
     /**
@@ -277,7 +279,8 @@
      */
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
-            numericalVariance = calculateNumericalVariance();
+            long n = 0;
+			numericalVariance = calculateNumericalVariance();
             numericalVarianceIsCalculated = true;
         }
         return numericalVariance;
@@ -305,7 +308,11 @@
      * @return lower bound of the support
      */
     public int getSupportLowerBound() {
-        return FastMath.max(0,
+        if (sampleSize < 0) {
+			throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
+					sampleSize);
+		}
+		return FastMath.max(0,
                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());
     }
 
@@ -318,7 +325,9 @@
      * @return upper bound of the support
      */
     public int getSupportUpperBound() {
-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());
+        final double n = getSampleSize();
+		double u = random.nextDouble();
+		return FastMath.min(getNumberOfSuccesses(), getSampleSize());
     }
 
     /**


