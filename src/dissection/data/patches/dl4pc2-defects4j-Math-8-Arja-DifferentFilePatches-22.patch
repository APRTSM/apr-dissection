--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java
+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java
@@ -1246,12 +1246,14 @@
       */
      public static double[] normalizeArray(double[] values, double normalizedSum)
          throws MathIllegalArgumentException, MathArithmeticException {
-         if (Double.isInfinite(normalizedSum)) {
-             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
-         }
          if (Double.isNaN(normalizedSum)) {
-             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
-         }
+			throw new MathIllegalArgumentException(
+					LocalizedFormats.NORMALIZE_NAN);
+		}
+         if (Double.isInfinite(normalizedSum)) {
+			throw new MathIllegalArgumentException(
+					LocalizedFormats.NORMALIZE_INFINITE);
+		}
          double sum = 0d;
          final int len = values.length;
          double[] out = new double[len];


--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
@@ -187,7 +187,6 @@
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
         }
 
         return out;


