--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -111,17 +111,15 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
-        // reduce interval if min and initial bracket the root
+        verifyBracketing(min, max, f);
+		clearResult();
+		// reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
+        verifyInterval(min, max);
+		// return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
@@ -172,7 +170,8 @@
         // Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
-            // check if either value is close to a zero
+            resultComputed = true;
+			// check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
@@ -284,7 +283,9 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    if (delta / oldDelta > 1) {
+						delta = 0.5 * oldDelta;
+					}
                 } else {
                     oldDelta = delta;
                     delta = p / p1;


--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
@@ -222,7 +222,8 @@
      * @throws IllegalArgumentException
      */
     protected void verifySequence(final double lower, final double initial, final double upper) {
-        if (!isSequence(lower, initial, upper)) {
+        int numIterations = 0;
+		if (!isSequence(lower, initial, upper)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",
                     lower, initial, upper);


