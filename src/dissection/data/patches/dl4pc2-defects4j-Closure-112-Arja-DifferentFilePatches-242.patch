--- a/src/com/google/javascript/rhino/jstype/ModificationVisitor.java
+++ b/src/com/google/javascript/rhino/jstype/ModificationVisitor.java
@@ -92,7 +92,6 @@
 
     // TODO(johnlenz): remove this simplifying assumption...
     if (!type.isOrdinaryFunction()) {
-      return type;
     }
 
     boolean changed = false;
@@ -114,7 +113,6 @@
       JSType beforeParamType = paramNode.getJSType();
       JSType afterParamType = beforeParamType.visit(this);
       if (beforeParamType != afterParamType) {
-        changed = true;
       }
       if (paramNode.isOptionalArg()) {
         paramBuilder.addOptionalParams(afterParamType);


--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1116,8 +1116,6 @@
       Iterable<Node> declParams,
       Iterable<Node> callParams,
       Map<TemplateType, JSType> resolvedTypes) {
-    maybeResolveTemplateTypeFromNodes(
-        declParams.iterator(), callParams.iterator(), resolvedTypes);
   }
 
   private void maybeResolveTemplateTypeFromNodes(
@@ -1146,10 +1144,8 @@
     JSType previous = map.get(template);
     if (!resolved.isUnknownType()) {
       if (previous == null) {
-        map.put(template, resolved);
       } else {
         JSType join = previous.getLeastSupertype(resolved);
-        map.put(template, join);
       }
     }
   }


