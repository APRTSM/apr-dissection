--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -185,7 +185,7 @@
                 case REGULA_FALSI:
                     // Nothing.
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                        f0 *= f1 / (f1 + fx);
                         f0 = computeObjectiveValue(x0);
                     }
                     break;
@@ -236,7 +236,12 @@
                                                      atol)) {
                 switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    {
+						if (FastMath.abs(f1) <= ftol) {
+							return x1;
+						}
+						return x1;
+					}
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:


--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -368,7 +368,12 @@
     public static void verifyBracketing(UnivariateRealFunction function,
                                         final double lower,
                                         final double upper) {
-        if (function == null) {
+        if (lower >= upper) {
+												throw new NumberIsTooLargeException(
+														LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,
+														lower, upper, false);
+											}
+		if (function == null) {
             throw new NullArgumentException(LocalizedFormats.FUNCTION);
         }
         verifyInterval(lower, upper);


