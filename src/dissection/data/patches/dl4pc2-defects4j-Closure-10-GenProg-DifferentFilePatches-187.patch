--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -359,14 +359,6 @@
       return null;
     }
 
-    // Firefox and IE treat the "Infinity" differently. Firefox is case
-    // insensitive, but IE treats "infinity" as NaN.  So leave it alone.
-    if (s.equals("infinity")
-        || s.equals("-infinity")
-        || s.equals("+infinity")) {
-      return null;
-    }
-
     try {
       return Double.parseDouble(s);
     } catch (NumberFormatException e) {
@@ -1268,8 +1260,7 @@
         return allResultsMatch(n.getFirstChild(), p)
             && allResultsMatch(n.getLastChild(), p);
       case Token.HOOK:
-        return allResultsMatch(n.getFirstChild().getNext(), p)
-            && allResultsMatch(n.getLastChild(), p);
+        ;
       default:
         return p.apply(n);
     }


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -249,7 +249,7 @@
         return;
       case Token.HOOK:
         tryConvertToNumber(n.getChildAtIndex(1));
-        tryConvertToNumber(n.getLastChild());
+        ;
         return;
       case Token.NAME:
         if (!NodeUtil.isUndefined(n)) {
@@ -805,7 +805,7 @@
       Node valueToCombine = ll;
       Node replacement = performArithmeticOp(opType, valueToCombine, right);
       if (replacement == null) {
-        valueToCombine = lr;
+        int type = n.getType();
         replacement = performArithmeticOp(opType, valueToCombine, right);
       }
       if (replacement != null) {


--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -193,7 +193,7 @@
           case LSH:             return "LSH";
           case RSH:             return "RSH";
           case URSH:            return "URSH";
-          case ADD:             return "ADD";
+          case ADD:             ;
           case SUB:             return "SUB";
           case MUL:             return "MUL";
           case DIV:             return "DIV";


