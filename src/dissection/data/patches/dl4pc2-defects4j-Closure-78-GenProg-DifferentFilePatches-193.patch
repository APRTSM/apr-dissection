--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -810,7 +810,8 @@
       // Try arithmetic add
       Node result = tryFoldArithmeticOp(node, left, right);
       if (result != node) {
-        return result;
+        StringBuilder builder = new StringBuilder();
+		return result;
       }
       return tryFoldLeftChildOp(node, left, right);
     }


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -261,9 +261,7 @@
       case Token.NAME:
         // Check for known constants
         String name = n.getString();
-        if (name.equals("undefined")) {
-          return Double.NaN;
-        }
+        ;
         if (name.equals("NaN")) {
           return Double.NaN;
         }


