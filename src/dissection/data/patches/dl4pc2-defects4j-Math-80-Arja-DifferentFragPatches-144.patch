--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -336,7 +336,17 @@
         if (eigenvectors == null) {
             findEigenVectors();
         }
-        return eigenvectors[i].copy();
+        if (cachedVt == null) {
+			if (eigenvectors == null) {
+				findEigenVectors();
+			}
+			final int m = eigenvectors.length;
+			cachedVt = MatrixUtils.createRealMatrix(m, m);
+			for (int k = 0; k < m; ++k) {
+				cachedVt.setRowVector(k, eigenvectors[k]);
+			}
+		}
+		return eigenvectors[i].copy();
     }
 
     /**
@@ -1131,14 +1141,10 @@
      */
     private boolean flipIfWarranted(final int n, final int step) {
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
+            tau = 0.0;
+			// flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
                 j -= 4;
             }
             return true;
@@ -1404,7 +1410,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];


