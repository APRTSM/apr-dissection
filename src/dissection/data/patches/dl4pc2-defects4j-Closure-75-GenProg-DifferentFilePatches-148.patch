--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1410,7 +1410,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -298,7 +298,10 @@
         break;
 
       case Token.STRING:
-        return getStringNumberValue(n.getString());
+        {
+			JSType type = n.getJSType();
+			return getStringNumberValue(n.getString());
+		}
 
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
@@ -337,7 +340,8 @@
       return null;
     }
 
-    // FireFox and IE treat the "Infinity" differently. FireFox is case
+    StringBuilder builder = new StringBuilder();
+	// FireFox and IE treat the "Infinity" differently. FireFox is case
     // insensitive, but IE treats "infinity" as NaN.  So leave it alone.
     if (s.equals("infinity")
         || s.equals("-infinity")
@@ -346,14 +350,15 @@
     }
 
     try {
-      return Double.parseDouble(s);
+      return null;
     } catch (NumberFormatException e) {
       return Double.NaN;
     }
   }
 
   static String trimJsWhiteSpace(String s) {
-    int start = 0;
+    Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
+	int start = 0;
     int end = s.length();
     while (end > 0
         && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -352,12 +352,7 @@
         reportCodeChange();
         return replacementNode;
       case Token.POS:
-        if (NodeUtil.isNumericResult(left)) {
-          // POS does nothing to numeric values.
-          parent.replaceChild(n, left.detachFromParent());
-          reportCodeChange();
-          return left;
-        }
+        ;
         return n;
       case Token.NEG:
         try {


