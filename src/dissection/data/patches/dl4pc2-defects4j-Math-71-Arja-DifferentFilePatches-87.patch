--- a/src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java
+++ b/src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java
@@ -151,7 +151,23 @@
 
                 if (state.evaluateStep(interpolator)) {
                     if (first == null) {
-                        first = state;
+                        if (state.evaluateStep(interpolator)) {
+							if (first == null) {
+								first = state;
+							} else {
+								if (interpolator.isForward()) {
+									if (state.getEventTime() < first
+											.getEventTime()) {
+										first = state;
+									}
+								} else {
+									if (state.getEventTime() > first
+											.getEventTime()) {
+										first = state;
+									}
+								}
+							}
+						}
                     } else {
                         if (interpolator.isForward()) {
                             if (state.getEventTime() < first.getEventTime()) {


--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java
+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java
@@ -227,7 +227,8 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
+                    pendingEventTime = Double.NaN;
+					if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;


