--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -397,9 +397,7 @@
                  Predicates.
                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                  false);
-        if (pathCheck.somePathsSatisfyPredicate()) {
-          return false;
-        }
+        return false;
       }
 
       return true;
@@ -413,7 +411,6 @@
       Node useParent = use.getParent();
       if (def.isAssign()) {
         Node rhs = def.getLastChild();
-        rhs.detachFromParent();
         // Oh yes! I have grandparent to remove this.
         Preconditions.checkState(defParent.isExprResult());
         while (defParent.getParent().isLabel()) {


--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -340,7 +340,6 @@
         continue;
       }
       if (otherDef.depends.contains(var)) {
-        def.reachingDef.put(other, null);
       }
     }
 


--- a/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java
+++ b/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java
@@ -119,7 +119,6 @@
    *     predicate
    */
   public boolean somePathsSatisfyPredicate() {
-    setUp();
     boolean result = checkSomePathsWithoutBackEdges(start, end);
     tearDown();
     return result;


