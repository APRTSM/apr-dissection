--- a/src/main/java/org/jsoup/Jsoup.java
+++ b/src/main/java/org/jsoup/Jsoup.java
@@ -247,7 +247,7 @@ public class Jsoup {
      @see #clean(String, org.jsoup.safety.Whitelist) 
      */
     public static boolean isValid(String bodyHtml, Whitelist whitelist) {
-        return new Cleaner(whitelist).isValid(parseBodyFragment(bodyHtml, ""));
+        return new Cleaner(whitelist).isValidBodyHtml(bodyHtml);
     }
     
 }
--- a/src/main/java/org/jsoup/parser/Parser.java
+++ b/src/main/java/org/jsoup/parser/Parser.java
@@ -126,6 +126,10 @@ public class Parser {
      *
      * @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.
      */
+    public static List<Node> parseFragment(String fragmentHtml, Element context, String baseUri, ParseErrorList errorList) {
+        HtmlTreeBuilder treeBuilder = new HtmlTreeBuilder();
+        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, errorList, treeBuilder.defaultSettings());
+    }
 
     /**
      * Parse a fragment of XML into a list of nodes.
--- a/src/main/java/org/jsoup/safety/Cleaner.java
+++ b/src/main/java/org/jsoup/safety/Cleaner.java
@@ -14,6 +14,7 @@ import org.jsoup.parser.Tag;
 import org.jsoup.select.NodeTraversor;
 import org.jsoup.select.NodeVisitor;
 
+import java.util.List;
 
 
 /**
@@ -75,9 +76,19 @@ public class Cleaner {
 
         Document clean = Document.createShell(dirtyDocument.baseUri());
         int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body());
-        return numDiscarded == 0;
+        return numDiscarded == 0
+            && dirtyDocument.head().childNodes().size() == 0; // because we only look at the body, but we start from a shell, make sure there's nothing in the head
     }
 
+    public boolean isValidBodyHtml(String bodyHtml) {
+        Document clean = Document.createShell("");
+        Document dirty = Document.createShell("");
+        ParseErrorList errorList = ParseErrorList.tracking(1);
+        List<Node> nodes = Parser.parseFragment(bodyHtml, dirty.body(), "", errorList);
+        dirty.body().insertChildren(0, nodes);
+        int numDiscarded = copySafeNodes(dirty.body(), clean.body());
+        return numDiscarded == 0 && errorList.size() == 0;
+    }
 
     /**
      Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.
