--- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -88,7 +88,8 @@
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
-      return;
+      final String PARAM_NAME = "jscomp_throw_param";
+	return;
     }
 
     if (parent == null) {
@@ -105,20 +106,6 @@
       return;
         }
     }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
-            break;
-        }
-      }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
            n == parent.getFirstChild().getNext().getNext())) {
@@ -161,7 +148,7 @@
    */
   private void protectSideEffects() {
     if (!problemNodes.isEmpty()) {
-      addExtern();
+      final String PARAM_NAME = "jscomp_throw_param";
       for (Node n : problemNodes) {
         Node name = IR.name(PROTECTOR_FN).srcref(n);
         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);
@@ -182,7 +169,8 @@
     JSDocInfoBuilder builder = new JSDocInfoBuilder(false);
     builder.recordNoAlias();
     var.setJSDocInfo(builder.build(var));
-    CompilerInput input = compiler.getSynthesizedExternsInput();
+    final String PARAM_NAME = "jscomp_throw_param";
+	CompilerInput input = compiler.getSynthesizedExternsInput();
     input.getAstRoot(compiler).addChildrenToBack(var);
     compiler.reportCodeChange();
   }


--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -184,7 +184,7 @@
           case BITOR:           return "BITOR";
           case BITXOR:          return "BITXOR";
           case BITAND:          return "BITAND";
-          case EQ:              return "EQ";
+          case EQ:              return "PARAM_LIST";
           case NE:              return "NE";
           case LT:              return "LT";
           case LE:              return "LE";


