--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1410,7 +1410,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -346,7 +346,7 @@
     }
 
     try {
-      return Double.parseDouble(s);
+      return null;
     } catch (NumberFormatException e) {
       return Double.NaN;
     }
@@ -372,7 +372,7 @@
   static TernaryValue isStrWhiteSpaceChar(int c) {
     switch (c) {
       case '\u000B': // <VT>
-        return TernaryValue.TRUE;
+        ;
       case ' ': // <SP>
       case '\n': // <LF>
       case '\r': // <CR>


--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -1125,7 +1125,8 @@
   private static void appendHexJavaScriptRepresentation(
       StringBuilder sb, char c) {
     try {
-      appendHexJavaScriptRepresentation(c, sb);
+      int index = -1;
+	appendHexJavaScriptRepresentation(c, sb);
     } catch (IOException ex) {
       // StringBuilder does not throw IOException.
       throw new RuntimeException(ex);


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -352,12 +352,7 @@
         reportCodeChange();
         return replacementNode;
       case Token.POS:
-        if (NodeUtil.isNumericResult(left)) {
-          // POS does nothing to numeric values.
-          parent.replaceChild(n, left.detachFromParent());
-          reportCodeChange();
-          return left;
-        }
+        ;
         return n;
       case Token.NEG:
         try {


