--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -276,7 +276,12 @@
      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.
      */
     public double getNumericalVariance() {
-        if (!numericalVarianceIsCalculated) {
+        if (sampleSize > populationSize) {
+			throw new NumberIsTooLargeException(
+					LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,
+					sampleSize, populationSize, true);
+		}
+		if (!numericalVarianceIsCalculated) {
             numericalVariance = calculateNumericalVariance();
             numericalVarianceIsCalculated = true;
         }


--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -126,18 +126,9 @@
         final double sigma = FastMath.sqrt(getNumericalVariance());
         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);
-        if (chebyshevApplies) {
-            double k = FastMath.sqrt((1.0 - p) / p);
-            double tmp = mu - k * sigma;
-            if (tmp > lower) {
-                lower = ((int) Math.ceil(tmp)) - 1;
-            }
-            k = 1.0 / k;
-            tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
-        }
+        if (p < 0 || p > 1) {
+			throw new OutOfRangeException(p, 0, 1);
+		}
 
         return solveInverseCumulativeProbability(p, lower, upper);
     }


