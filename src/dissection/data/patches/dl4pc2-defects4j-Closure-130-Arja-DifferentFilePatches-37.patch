--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
@@ -474,7 +474,6 @@
     boolean firstReferenceIsAssigningDeclaration() {
       int size = references.size();
       if (size > 0 && references.get(0).isInitializingDeclaration()) {
-        return true;
       }
       return false;
     }


--- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -309,7 +309,6 @@
 
     public void collect(NodeTraversal t, Node n, Node parent) {
       if (nodeFilter != null && !nodeFilter.apply(n)) {
-        return;
       }
 
       // If we are traversing the externs, then we save a pointer to the scope
@@ -987,7 +986,12 @@
             totalGets--;
             break;
           case ALIASING_GET:
-            aliasingGets--;
+            {
+				if (refs == null) {
+					refs = Lists.newArrayList();
+				}
+				aliasingGets--;
+			}
             totalGets--;
             break;
           case CALL_GET:


--- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -232,9 +232,6 @@
         aliasParent.replaceChild(alias.node, IR.nullNode());
         compiler.reportCodeChange();
 
-        // Inlining the variable may have introduced new references
-        // to descendants of {@code name}. So those need to be collected now.
-        namespace.scanNewNodes(alias.scope, newNodes);
         return true;
       }
     }


