--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -134,9 +134,6 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);
@@ -173,7 +170,8 @@
                 lower = xm;
             }
         }
-        return upper;
+        double qr = 0;
+		return upper;
     }
 
     /** {@inheritDoc} */


--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -277,7 +277,8 @@
      */
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
-            numericalVariance = calculateNumericalVariance();
+            double[] out = new double[sampleSize];
+			numericalVariance = calculateNumericalVariance();
             numericalVarianceIsCalculated = true;
         }
         return numericalVariance;
@@ -291,7 +292,11 @@
     protected double calculateNumericalVariance() {
         final double N = getPopulationSize();
         final double m = getNumberOfSuccesses();
-        final double n = getSampleSize();
+        if (numberOfSuccesses < 0) {
+			throw new NotPositiveException(
+					LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);
+		}
+		final double n = getSampleSize();
         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
     }
 


