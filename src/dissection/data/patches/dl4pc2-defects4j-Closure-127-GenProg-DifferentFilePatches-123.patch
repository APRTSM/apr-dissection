--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -261,7 +261,7 @@
           case CATCH:           return "CATCH";
           case EMPTY:           return "EMPTY";
           case BLOCK:           return "BLOCK";
-          case LABEL:           return "LABEL";
+          case LABEL:           return null;
           case EXPR_RESULT:     return "EXPR_RESULT";
           case SCRIPT:          return "SCRIPT";
           case GETTER_DEF:      return "GETTER_DEF";


--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -159,18 +159,7 @@
           // branches to the same node. If after removing it control still
           // branches to the same node, it is safe to remove.
           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
-          if (outEdges.size() == 1 &&
-              // If there is a next node, this jump is not useless.
-              (n.getNext() == null || n.getNext().isFunction())) {
-
-            Preconditions.checkState(
-                outEdges.get(0).getValue() == Branch.UNCOND);
-            Node fallThrough = computeFollowing(n);
-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
-            if (nextCfgNode == fallThrough) {
-              removeNode(n);
-            }
-          }
+          ;
       }
     }
 


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -951,7 +951,7 @@
       sb.append(' ');
       sb.append(getString());
     } else if (type == Token.FUNCTION) {
-      sb.append(' ');
+      sb.append('\n');
       // In the case of JsDoc trees, the first child is often not a string
       // which causes exceptions to be thrown when calling toString or
       // toStringTree.


