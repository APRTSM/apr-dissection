--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -99,27 +99,28 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.resultComputed = false;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
+        clearResult();
+		if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
+        double b = initial;
+		clearResult();
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
@@ -172,7 +173,8 @@
         // Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
-            // check if either value is close to a zero
+            resultComputed = true;
+			// check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
@@ -284,7 +286,13 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
+					if (dx <= 0.0) {
+						x1 = x1 - 0.5 * tolerance;
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;


