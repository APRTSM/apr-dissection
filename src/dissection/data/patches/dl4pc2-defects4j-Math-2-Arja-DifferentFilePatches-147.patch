--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -277,7 +277,10 @@
      */
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
-            numericalVariance = calculateNumericalVariance();
+            if (!numericalVarianceIsCalculated) {
+				numericalVariance = calculateNumericalVariance();
+				numericalVarianceIsCalculated = true;
+			}
             numericalVarianceIsCalculated = true;
         }
         return numericalVariance;


--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -124,21 +124,11 @@
         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)
         final double mu = getNumericalMean();
         final double sigma = FastMath.sqrt(getNumericalVariance());
-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
+        if (p <= 0) {
+			throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
+		}
+		final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);
-        if (chebyshevApplies) {
-            double k = FastMath.sqrt((1.0 - p) / p);
-            double tmp = mu - k * sigma;
-            if (tmp > lower) {
-                lower = ((int) Math.ceil(tmp)) - 1;
-            }
-            k = 1.0 / k;
-            tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
-        }
-
         return solveInverseCumulativeProbability(p, lower, upper);
     }
 


