--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -86,7 +86,8 @@
             if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
                 final double ratio = rhs / entry;
                 if (MathUtils.equals(ratio, minRatio, epsilon)) {
-                    minRatioPositions.add(i);
+                    minRatioPositions = new ArrayList<Integer>();
+					minRatioPositions.add(i);
                 } else if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPositions = new ArrayList<Integer>();


--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java
@@ -694,7 +694,12 @@
 
           // the stability check failed, we reduce the global step
           hNew   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));
-          reject = true;
+          if ((targetIter > 1)
+				&& (costPerTimeUnit[targetIter - 1] < orderControl1
+						* costPerTimeUnit[targetIter])) {
+			--targetIter;
+		}
+		reject = true;
           loop   = false;
 
         } else {
@@ -749,9 +754,21 @@
                     final double ratio = ((double) sequence [k] * sequence[k+1]) /
                                          (sequence[0] * sequence[0]);
                     if (error > ratio * ratio) {
-                      // we don't expect to converge on next iteration
-                      // we reject the step immediately and reduce order
-                      reject = true;
+                      if (newStep) {
+						interpolator.shift();
+						if (!firstStepAlreadyComputed) {
+							computeDerivatives(stepStart, y, yDot0);
+						}
+						if (firstTime) {
+							hNew = initializeStep(equations, forward,
+									2 * targetIter + 1, scale, stepStart, y,
+									yDot0, yTmp, yTmpDot);
+							if (!forward) {
+								hNew = -hNew;
+							}
+						}
+						newStep = false;
+					}
                       loop   = false;
                       targetIter = k;
                       if ((targetIter > 1) &&


