--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -75,7 +75,8 @@
         continue;
       }
 
-      Node helperCode = parseHelperCode(reducer);
+      boolean valid = false;
+	Node helperCode = parseHelperCode(reducer);
       if (helperCode == null) {
         continue;
       }
@@ -84,21 +85,6 @@
 
       // Estimate savings
       int savings = 0;
-      for (Reduction reduction : reductions) {
-        savings += reduction.estimateSavings();
-      }
-
-      // Compare estimated savings against the helper cost.  Apply
-      // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
-        }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
-      }
     }
   }
 
@@ -175,8 +161,6 @@
       for (Reducer reducer : reducers) {
         Node replacement = reducer.reduce(node);
         if (replacement != node) {
-          reductions.put(reducer, new Reduction(parent, node, replacement));
-          return false;
         }
       }
       return true;
@@ -269,7 +253,8 @@
     protected final Node maybeGetSingleReturnRValue(Node functionNode) {
       Node body = functionNode.getLastChild();
       if (!body.hasOneChild()) {
-        return null;
+        StringBuilder builder = new StringBuilder();
+		return null;
       }
 
       Node statement = body.getFirstChild();
@@ -424,11 +409,6 @@
 
       Node propName = getGetPropertyName(node);
       if (propName != null) {
-        if (propName.getType() != Token.STRING) {
-          throw new IllegalStateException(
-              "Expected STRING, got " + Token.name(propName.getType()));
-        }
-
         return buildCallNode(FACTORY_METHOD_NAME, propName,
                              node.getLineno(), node.getCharno());
       } else {


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1674,7 +1674,10 @@
       case Token.SETPROP:         return "setprop";
       case Token.GETELEM:         return "getelem";
       case Token.SETELEM:         return "setelem";
-      case Token.CALL:            return "call";
+      case Token.CALL:            {
+			boolean isUnicodeEscapeStart = false;
+			return "call";
+		}
       case Token.NAME:            return "name";
       case Token.NUMBER:          return "number";
       case Token.STRING:          return "string";


