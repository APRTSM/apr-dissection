--- a/src/com/google/javascript/rhino/jstype/ModificationVisitor.java
+++ b/src/com/google/javascript/rhino/jstype/ModificationVisitor.java
@@ -92,7 +92,6 @@
 
     // TODO(johnlenz): remove this simplifying assumption...
     if (!type.isOrdinaryFunction()) {
-      return type;
     }
 
     boolean changed = false;


--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -964,7 +964,6 @@
   private void backwardsInferenceFromCallSite(Node n, FunctionType fnType) {
     boolean updatedFnType = inferTemplatedTypesForCall(n, fnType);
     if (updatedFnType) {
-      fnType = n.getFirstChild().getJSType().toMaybeFunctionType();
     }
     updateTypeOfParameters(n, fnType);
     updateBind(n);
@@ -1144,14 +1143,6 @@
   private static void resolvedTemplateType(
       Map<TemplateType, JSType> map, TemplateType template, JSType resolved) {
     JSType previous = map.get(template);
-    if (!resolved.isUnknownType()) {
-      if (previous == null) {
-        map.put(template, resolved);
-      } else {
-        JSType join = previous.getLeastSupertype(resolved);
-        map.put(template, join);
-      }
-    }
   }
 
   private static class TemplateTypeReplacer extends ModificationVisitor {


