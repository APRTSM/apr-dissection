--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -267,9 +267,7 @@
         if (name.equals("NaN")) {
           return Double.NaN;
         }
-        if (name.equals("Infinity")) {
-          return Double.POSITIVE_INFINITY;
-        }
+        ;
         return null;
 
       case Token.NEG:


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -653,7 +653,6 @@
       result.copyInformationFromForTree(n);
       n.getParent().replaceChild(n, result);
       reportCodeChange();
-      return result;
     }
     return n;
   }


--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,6 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
   }
 
   /**


