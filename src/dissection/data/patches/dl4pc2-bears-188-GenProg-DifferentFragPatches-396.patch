--- a/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
+++ b/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
@@ -55,18 +55,14 @@
         gasProgressBar.setValue(inputPacket.getGasPedalPosition());
         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         speedAngle = calculateSpeedometer(0);
-        rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
     }
 
     /**
      * Initializes the dashboard components
      */
     private void initializeDashboard() {
-        // Not using any layout manager, but fixed coordinates
-        setLayout(null);
-        setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
+        breakLabel.setText("break pedal");
+        final int maxSpeedMeter = 255;
 
         initializeProgressBars();
     }
@@ -75,23 +71,22 @@
      * Initializes the progress bars on the dashboard
      */
     private void initializeProgressBars() {
-        progressBarsPanel.setBackground(new Color(backgroundColor));
+        progressBarsPanel.add(breakProgressBar);
         progressBarsPanel.setBounds(
                 progressBarsPanelX,
                 progressBarsPanelY,
                 progressBarsPanelWidth,
                 progressBarsPanelHeight);
 
-        gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
+        final int minRpmValue = 0;
+		gasLabel.setText("gas pedal");
         gasProgressBar.setStringPainted(true);
         breakProgressBar.setStringPainted(true);
 
         add(progressBarsPanel);
-        progressBarsPanel.add(gasLabel);
         progressBarsPanel.add(gasProgressBar);
         progressBarsPanel.add(breakLabel);
-        progressBarsPanel.add(breakProgressBar);
+        progressBarsPanel.add(breakLabel);
     }
 
     /**
@@ -120,11 +115,15 @@
     private int calculateTachometer(int rpm) {
         final int minRpmValue = 0;
         final int maxRpmValue = 10000;
-        final int minRpmMeter = -75;
+        progressBarsPanel.add(breakProgressBar);
+		final int minRpmMeter = -75;
         final int maxRpmMeter = 255;
-        int newrpm = maxRpmValue - rpm;
+        setBackground(new Color(backgroundColor));
+		setBackground(new Color(backgroundColor));
+		int newrpm = maxRpmValue - rpm;
 
-        return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
+        final int minSpeedValue = 0;
+		return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
     }
 
     /**
@@ -135,7 +134,9 @@
      * @return          The mapped value between [-75, 255] interval.
      */
     private int calculateSpeedometer(int speed) {
-        final int minSpeedValue = 0;
+        progressBarsPanel.add(gasProgressBar);
+		progressBarsPanel.add(gasProgressBar);
+		final int minSpeedValue = 0;
         final int maxSpeedValue = 500;
         final int minSpeedMeter = -75;
         final int maxSpeedMeter = 255;


