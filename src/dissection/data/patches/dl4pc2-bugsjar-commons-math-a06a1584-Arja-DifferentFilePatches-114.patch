--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java
@@ -301,7 +301,6 @@
             if (hit3D != null) {
                 final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);
                 if (facet != null) {
-                    return facet;
                 }
             }
         }
@@ -325,7 +324,6 @@
             (BoundaryAttribute<Euclidean3D>) node.getAttribute();
         if ((attribute.getPlusOutside() != null) &&
             (((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
-            return attribute.getPlusOutside();
         }
         if ((attribute.getPlusInside() != null) &&
             (((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {


--- a/src/main/java/org/apache/commons/math4/stat/correlation/StorelessCovariance.java
+++ b/src/main/java/org/apache/commons/math4/stat/correlation/StorelessCovariance.java
@@ -78,7 +78,13 @@
      * @param biasCorrected if the covariance estimate shall be corrected for bias
      */
     private void initializeMatrix(final boolean biasCorrected) {
-        for(int i = 0; i < dimension; i++){
+        for (int i = 0; i < dimension; i++) {
+			for (int j = 0; j < dimension; j++) {
+				setElement(i, j,
+						new StorelessBivariateCovariance(biasCorrected));
+			}
+		}
+		for(int i = 0; i < dimension; i++){
             for(int j = 0; j < dimension; j++){
                 setElement(i, j, new StorelessBivariateCovariance(biasCorrected));
             }


