--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        setResult(max, 0);
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -123,12 +123,10 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        this.iterationCount = iterationCount;
 
-        // reduce interval if initial and max bracket the root
+        verifyBracketing(min, max, f);
+		// reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
@@ -284,7 +282,10 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    if (Math.abs(dx) <= tolerance) {
+						setResult(x1, i);
+						return result;
+					}
                 } else {
                     oldDelta = delta;
                     delta = p / p1;


