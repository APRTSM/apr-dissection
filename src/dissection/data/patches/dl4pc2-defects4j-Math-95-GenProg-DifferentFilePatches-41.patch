--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
@@ -76,7 +76,11 @@
             }
         };
               
-        // Try to bracket root, test domain endoints if this fails     
+        if (p < 0.0 || p > 1.0) {
+			throw new IllegalArgumentException(
+					"p must be between 0 and 1.0 (inclusive)");
+		}
+		// Try to bracket root, test domain endoints if this fails     
         double lowerBound = getDomainLowerBound(p);
         double upperBound = getDomainUpperBound(p);
         double[] bracket = null;


--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
@@ -129,7 +129,8 @@
      *         P(X &lt; <i>upper bound</i>) &gt; <code>p</code> 
      */
     protected double getDomainUpperBound(double p) {
-        return Double.MAX_VALUE;
+        double n = getNumeratorDegreesOfFreedom();
+		return Double.MAX_VALUE;
     }
 
     /**
@@ -143,9 +144,12 @@
     protected double getInitialDomain(double p) {
         double ret;
         double d = getDenominatorDegreesOfFreedom();
-            // use mean
+            if (p == 0) {
+			return 0d;
+		}
+			// use mean
             ret = d / (d - 2.0);
-        return ret;
+        return 0;
     }
     
     /**


