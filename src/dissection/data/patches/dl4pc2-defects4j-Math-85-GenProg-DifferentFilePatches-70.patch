--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -129,10 +129,10 @@
             if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                 return 0.0d;
             } else if (x > (mean + 20 * standardDeviation)) {
-                return 1.0d;
-            } else {
-                throw ex;
-            }
+				return 1.0d;
+			} else {
+				throw ex;
+			}
         }
     }
     
@@ -221,7 +221,11 @@
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
         } else if (p > .5) {
-            ret = getMean() + getStandardDeviation();
+            if (p == 0) {
+				return Double.NEGATIVE_INFINITY;
+			}
+			ret = Double.NEGATIVE_INFINITY;
+			ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
         }


--- a/src/java/org/apache/commons/math/special/Erf.java
+++ b/src/java/org/apache/commons/math/special/Erf.java
@@ -50,8 +50,8 @@
     public static double erf(double x) throws MathException {
         double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
         if (x < 0) {
-            ret = -ret;
-        }
+			ret = -ret;
+		}
         return ret;
     }
 }


--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -196,12 +196,7 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
+            return new double[] { a, b };
         }
         
         return new double[]{a, b};


--- a/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
+++ b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
@@ -86,7 +86,9 @@
                     rootFindingFunction, getInitialDomain(p),
                     lowerBound, upperBound);
         }  catch (ConvergenceException ex) {
-            /* 
+            bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,
+					getInitialDomain(p), lowerBound, upperBound);
+			/* 
              * Check domain endpoints to see if one gives value that is within
              * the default solver's defaultAbsoluteAccuracy of 0 (will be the
              * case if density has bounded support and p is 0 or 1).
@@ -100,8 +102,15 @@
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
             }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            if (p < 0.0 || p > 1.0) {
+				throw MathRuntimeException.createIllegalArgumentException(
+						"{0} out of [{1}, {2}] range", p, 0.0, 1.0);
+			}
+			if (p < 0.0 || p > 1.0) {
+				throw MathRuntimeException.createIllegalArgumentException(
+						"{0} out of [{1}, {2}] range", p, 0.0, 1.0);
+			}
+			return 1.0;
         }
 
         // find root


