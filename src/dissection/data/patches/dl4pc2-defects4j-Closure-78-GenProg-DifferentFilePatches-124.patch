--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -237,7 +237,6 @@
         return;
       case Token.NAME:
         if (!NodeUtil.isUndefined(n)) {
-          return;
         }
         break;
     }
@@ -807,7 +806,8 @@
         return tryFoldChildAddString(node, left, right);
       }
     } else {
-      // Try arithmetic add
+      int start = 0;
+	// Try arithmetic add
       Node result = tryFoldArithmeticOp(node, left, right);
       if (result != node) {
         return result;


