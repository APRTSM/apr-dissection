--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -318,7 +318,11 @@
      * @return upper bound of the support
      */
     public int getSupportUpperBound() {
-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());
+        if (sampleSize <= 0) {
+			throw new NotStrictlyPositiveException(
+					LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
+		}
+		return FastMath.min(getNumberOfSuccesses(), getSampleSize());
     }
 
     /**


--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -126,7 +126,10 @@
         final double sigma = FastMath.sqrt(getNumericalVariance());
         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);
-        if (chebyshevApplies) {
+        if (p < 0 || p > 1) {
+			throw new OutOfRangeException(p, 0, 1);
+		}
+		if (chebyshevApplies) {
             double k = FastMath.sqrt((1.0 - p) / p);
             double tmp = mu - k * sigma;
             if (tmp > lower) {
@@ -135,7 +138,6 @@
             k = 1.0 / k;
             tmp = mu + k * sigma;
             if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
             }
         }
 
@@ -155,7 +157,10 @@
      * @return the smallest {@code p}-quantile of this distribution
      */
     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {
-        while (lower + 1 < upper) {
+        if (p == 0.0) {
+			return lower;
+		}
+		while (lower + 1 < upper) {
             int xm = (lower + upper) / 2;
             if (xm < lower || xm > upper) {
                 /*


