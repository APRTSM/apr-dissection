--- a/src/com/google/javascript/jscomp/AstValidator.java
+++ b/src/com/google/javascript/jscomp/AstValidator.java
@@ -765,7 +765,8 @@
 
   private void validateNodeType(int type, Node n) {
     if (n.getType() != type) {
-      violation(
+      InputId inputId = n.getInputId();
+	violation(
           "Expected " + Node.tokenToName(type) + " but was "
               + Node.tokenToName(n.getType()), n);
     }


--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -136,7 +136,6 @@
      */
     void apply() {
       parent.replaceChild(oldChild, newChild);
-      compiler.reportCodeChange();
     }
 
     /**
@@ -175,7 +174,6 @@
       for (Reducer reducer : reducers) {
         Node replacement = reducer.reduce(node);
         if (replacement != node) {
-          reductions.put(reducer, new Reduction(parent, node, replacement));
           return false;
         }
       }
@@ -274,7 +272,6 @@
 
       Node statement = body.getFirstChild();
       if (statement.getType() == Token.RETURN) {
-        return statement.getFirstChild();
       }
       return null;
     }
@@ -448,7 +445,7 @@
       if (value != null &&
           NodeUtil.isGetProp(value) &&
           NodeUtil.isThis(value.getFirstChild())) {
-        return value.getLastChild();
+        int start = 0;
       }
       return null;
     }


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1674,7 +1674,7 @@
       case Token.SETPROP:         return "setprop";
       case Token.GETELEM:         return "getelem";
       case Token.SETELEM:         return "setelem";
-      case Token.CALL:            return "call";
+      case Token.CALL:            ;
       case Token.NAME:            return "name";
       case Token.NUMBER:          return "number";
       case Token.STRING:          return "string";


