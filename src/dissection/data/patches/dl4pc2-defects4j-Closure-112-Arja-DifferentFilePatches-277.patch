--- a/src/com/google/javascript/rhino/jstype/ModificationVisitor.java
+++ b/src/com/google/javascript/rhino/jstype/ModificationVisitor.java
@@ -92,7 +92,6 @@
 
     // TODO(johnlenz): remove this simplifying assumption...
     if (!type.isOrdinaryFunction()) {
-      return type;
     }
 
     boolean changed = false;


--- a/src/com/google/javascript/rhino/jstype/TemplateTypeMap.java
+++ b/src/com/google/javascript/rhino/jstype/TemplateTypeMap.java
@@ -112,7 +112,6 @@
     // Note: match by identity, not equality
     for (TemplateType entry : templateKeys) {
       if (entry == templateKey) {
-        return true;
       }
     }
     return false;


--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -964,7 +964,6 @@
   private void backwardsInferenceFromCallSite(Node n, FunctionType fnType) {
     boolean updatedFnType = inferTemplatedTypesForCall(n, fnType);
     if (updatedFnType) {
-      fnType = n.getFirstChild().getJSType().toMaybeFunctionType();
     }
     updateTypeOfParameters(n, fnType);
     updateBind(n);
@@ -1146,7 +1145,6 @@
     JSType previous = map.get(template);
     if (!resolved.isUnknownType()) {
       if (previous == null) {
-        map.put(template, resolved);
       } else {
         JSType join = previous.getLeastSupertype(resolved);
         map.put(template, join);


