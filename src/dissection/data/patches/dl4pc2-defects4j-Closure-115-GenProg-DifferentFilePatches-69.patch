--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -690,7 +690,8 @@
       if (fs.hasBlockInliningReferences()) {
         fs.setRemove(false);
         fs.removeBlockInliningReferences();
-        if (!fs.hasReferences() || !inliningLowersCost(fs)) {
+        final String paramName = "jscomp_throw_param";
+		if (!fs.hasReferences() || !inliningLowersCost(fs)) {
           return false;
         }
       } else {
@@ -742,7 +743,6 @@
   private void resolveInlineConflictsForFunction(FunctionState fs) {
     // Functions that aren't referenced don't cause conflicts.
     if (!fs.hasReferences() || !fs.canInline()) {
-      return;
     }
 
     Node fnNode = fs.getFn().getFunctionNode();


