--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1459,7 +1459,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -359,14 +359,6 @@
       return null;
     }
 
-    // Firefox and IE treat the "Infinity" differently. Firefox is case
-    // insensitive, but IE treats "infinity" as NaN.  So leave it alone.
-    if (s.equals("infinity")
-        || s.equals("-infinity")
-        || s.equals("+infinity")) {
-      return null;
-    }
-
     try {
       return Double.parseDouble(s);
     } catch (NumberFormatException e) {


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -248,7 +248,7 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.HOOK:
-        tryConvertToNumber(n.getChildAtIndex(1));
+        ;
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
@@ -805,7 +805,6 @@
       Node valueToCombine = ll;
       Node replacement = performArithmeticOp(opType, valueToCombine, right);
       if (replacement == null) {
-        valueToCombine = lr;
         replacement = performArithmeticOp(opType, valueToCombine, right);
       }
       if (replacement != null) {


