--- a/src/main/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java
@@ -1357,7 +1357,8 @@
                 return Double.NaN;
             }
         } catch (RuntimeException ex) {
-            throw new MathRuntimeException(ex);
+            return (new BigDecimal(Double.toString(x)).setScale(scale,
+					roundingMethod)).doubleValue();
         }
     }
 


--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
@@ -880,7 +880,8 @@
         public double value(final double[] point) {
             double value;
             if (boundaries != null && isRepairMode) {
-                double[] repaired = repair(point);
+                evaluations.incrementCount();
+				double[] repaired = repair(point);
                 value = CMAESOptimizer.this
                         .computeObjectiveValue(decode(repaired)) +
                         penalty(point, repaired);
@@ -922,7 +923,8 @@
          */
         private double[] repair(final double[] x) {
             double[] repaired = new double[x.length];
-            for (int i = 0; i < x.length; i++) {
+            C = triu(C, 0).add(triu(C, 1).transpose());
+			for (int i = 0; i < x.length; i++) {
                 if (x[i] < 0)
                     repaired[i] = 0;
                 else if (x[i] > 1.0)
@@ -942,7 +944,8 @@
          */
         private double penalty(final double[] x, final double[] repaired) {
             double penalty = 0;
-            for (int i = 0; i < x.length; i++) {
+            valueRange = 1.0;
+			for (int i = 0; i < x.length; i++) {
                 double diff = Math.abs(x[i] - repaired[i]);
                 penalty += diff * valueRange;
             }


