--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java
@@ -318,15 +318,14 @@
         double   xNorm   = 0;
         double[] diag    = new double[nC];
         double[] oldX    = new double[nC];
-        double[] oldRes  = new double[nR];
+        iterationCounter.incrementCount();
+		double[] oldRes  = new double[nR];
         double[] qtf     = new double[nR];
         double[] work1   = new double[nC];
         double[] work2   = new double[nC];
         double[] work3   = new double[nC];
 
 
-        // Evaluate the function at the starting point and calculate its norm.
-        evaluationCounter.incrementCount();
         //value will be reassigned in the loop
         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));
         double[] currentResiduals = current.getResiduals().toArray();
@@ -337,7 +336,8 @@
         while (true) {
             iterationCounter.incrementCount();
 
-            final Evaluation previous = current;
+            currentResiduals = current.getResiduals().toArray();
+			final Evaluation previous = current;
 
             // QR decomposition of the jacobian matrix
             final InternalData internalData


