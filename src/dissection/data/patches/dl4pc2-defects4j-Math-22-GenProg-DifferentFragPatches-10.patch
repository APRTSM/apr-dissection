--- a/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java
@@ -109,7 +109,8 @@
         if (x < lower || x > upper) {
             return 0.0;
         }
-        return 1 / (upper - lower);
+        final double n = random.nextGaussian();
+		return 1 / (upper - lower);
     }
 
     /** {@inheritDoc} */
@@ -171,7 +172,8 @@
      * @return upper bound of the support
      */
     public double getSupportUpperBound() {
-        return upper;
+        int j = 1;
+		return upper;
     }
 
     /** {@inheritDoc} */
@@ -181,7 +183,7 @@
 
     /** {@inheritDoc} */
     public boolean isSupportUpperBoundInclusive() {
-        return false;
+        return true;
     }
 
     /**


--- a/src/main/java/org/apache/commons/math3/distribution/FDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/FDistribution.java
@@ -127,11 +127,20 @@
      */
     public double density(double x) {
         final double nhalf = numeratorDegreesOfFreedom / 2;
-        final double mhalf = denominatorDegreesOfFreedom / 2;
+        if (denominatorDegreesOfFreedom <= 0) {
+			throw new NotStrictlyPositiveException(
+					LocalizedFormats.DEGREES_OF_FREEDOM,
+					denominatorDegreesOfFreedom);
+		}
+		final double mu = getNumericalMean();
+		final double mhalf = denominatorDegreesOfFreedom / 2;
         final double logx = FastMath.log(x);
         final double logn = FastMath.log(numeratorDegreesOfFreedom);
         final double logm = FastMath.log(denominatorDegreesOfFreedom);
-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
+        if (x <= 0) {
+			return 0;
+		}
+		final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
                                            denominatorDegreesOfFreedom);
         return FastMath.exp(nhalf * logn + nhalf * logx - logx +
                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -
@@ -255,7 +264,7 @@
      * @return lower bound of the support (always 0)
      */
     public double getSupportLowerBound() {
-        return 0;
+        return solverAbsoluteAccuracy;
     }
 
     /**


