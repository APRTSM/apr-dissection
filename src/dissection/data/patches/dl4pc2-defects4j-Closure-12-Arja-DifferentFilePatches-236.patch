--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -397,9 +397,7 @@
                  Predicates.
                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                  false);
-        if (pathCheck.somePathsSatisfyPredicate()) {
-          return false;
-        }
+        return false;
       }
 
       return true;


--- a/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java
+++ b/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java
@@ -205,26 +205,6 @@
     if (a == b) {
       return false;
     }
-    for (DiGraphEdge<N, E> e : a.getOutEdges()) {
-      // Once we visited that edge once, we no longer need to
-      // re-visit it again.
-      if (e.getAnnotation() == VISITED_EDGE) {
-        continue;
-      }
-      e.setAnnotation(VISITED_EDGE);
-
-      if (ignoreEdge(e)) {
-        continue;
-      }
-      if (e.getAnnotation() == BACK_EDGE) {
-        continue;
-      }
-
-      DiGraphNode<N, E> next = e.getDestination();
-      if (checkSomePathsWithoutBackEdges(next, b)) {
-        return true;
-      }
-    }
     return false;
   }
 }


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -140,7 +140,7 @@
         case IS_DISPATCHER:      return "is_dispatcher";
         case DIRECTIVES:         return "directives";
         case DIRECT_EVAL:        return "direct_eval";
-        case FREE_CALL:          return "free_call";
+        case FREE_CALL:          return "ADD";
         case STATIC_SOURCE_FILE:    return "source_file";
         case INPUT_ID:  return "input_id";
         case LENGTH:    return "length";


