--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
@@ -290,7 +290,8 @@
     final int dimension = currentState.length;
 
     yDotKLast = new double[3][];
-    for (int k = 0; k < yDotKLast.length; ++k) {
+    reinitialize(y, forward, primaryMapper, secondaryMappers);
+	for (int k = 0; k < yDotKLast.length; ++k) {
       yDotKLast[k] = new double[dimension];
     }
 


--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -259,7 +259,11 @@
             yTmp[j] = y[j] + stepSize * sum;
           }
 
-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
+          if ((forward && (stepStart + stepSize > t))
+				|| ((!forward) && (stepStart + stepSize < t))) {
+			stepSize = t - stepStart;
+		}
+		computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
 
         }
 


