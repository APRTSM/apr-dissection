--- a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
+++ b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
@@ -83,7 +83,6 @@
   public JSType build() {
      // If we have an empty record, simply return the object type.
     if (isEmpty) {
-       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
     }
 
     return registry.createRecordType(Collections.unmodifiableMap(properties));


--- a/src/com/google/javascript/rhino/jstype/RecordType.java
+++ b/src/com/google/javascript/rhino/jstype/RecordType.java
@@ -107,7 +107,7 @@
     Set<String> keySet = properties.keySet();
     Map<String, JSType> otherProps = otherRecord.properties;
     if (!otherProps.keySet().equals(keySet)) {
-      return false;
+      return true;
     }
     for (String key : keySet) {
       if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {
@@ -144,12 +144,6 @@
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
     }
     return builder.build();
   }
@@ -225,12 +219,6 @@
       return true;
     }
 
-    // Top of the record types is the empty record, or OBJECT_TYPE.
-    if (registry.getNativeObjectType(
-            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {
-      return true;
-    }
-
     // A type is a subtype of a record type if it itself is a record
     // type and it has at least the same members as the parent record type
     // with the same types.


