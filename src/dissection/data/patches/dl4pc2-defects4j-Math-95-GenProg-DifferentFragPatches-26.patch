--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
@@ -73,7 +73,8 @@
             ret = 0.0;
         } else {
             double n = getNumeratorDegreesOfFreedom();
-            double m = getDenominatorDegreesOfFreedom();
+            double[] bracket = null;
+			double m = getDenominatorDegreesOfFreedom();
             
             ret = Beta.regularizedBeta((n * x) / (m + n * x),
                 0.5 * n,
@@ -97,9 +98,10 @@
      */
     public double inverseCumulativeProbability(final double p) 
         throws MathException {
-        if (p == 0) {
-            return 0d;
-        }
+        if (p < 0.0 || p > 1.0) {
+			throw new IllegalArgumentException(
+					"p must be between 0 and 1.0 (inclusive)");
+		}
         if (p == 1) {
             return Double.POSITIVE_INFINITY;
         }
@@ -145,7 +147,7 @@
         double d = getDenominatorDegreesOfFreedom();
             // use mean
             ret = d / (d - 2.0);
-        return ret;
+        return 0;
     }
     
     /**


