--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1062,62 +1062,14 @@
       // @param {T}
       resolvedTemplateType(
           resolvedTypes, paramType.toMaybeTemplateType(), argType);
-    } else if (paramType.isUnionType()) {
-      // @param {Array.<T>|NodeList|Arguments|{length:number}}
-      UnionType unionType = paramType.toMaybeUnionType();
-      for (JSType alernative : unionType.getAlternates()) {
-        maybeResolveTemplatedType(alernative, argType, resolvedTypes);
-      }
-    } else if (paramType.isFunctionType()) {
-      FunctionType paramFunctionType = paramType.toMaybeFunctionType();
-      FunctionType argFunctionType = argType
-          .restrictByNotNullOrUndefined()
-          .collapseUnion()
-          .toMaybeFunctionType();
-      if (argFunctionType != null && argFunctionType.isSubtype(paramType)) {
-        // infer from return type of the function type
-        maybeResolveTemplatedType(
-            paramFunctionType.getTypeOfThis(),
-            argFunctionType.getTypeOfThis(), resolvedTypes);
-        // infer from return type of the function type
-        maybeResolveTemplatedType(
-            paramFunctionType.getReturnType(),
-            argFunctionType.getReturnType(), resolvedTypes);
-        // infer from parameter types of the function type
-        maybeResolveTemplateTypeFromNodes(
-            paramFunctionType.getParameters(),
-            argFunctionType.getParameters(), resolvedTypes);
-      }
-    } else if (paramType.isTemplatizedType()) {
-      // @param {Array.<T>}
-      ObjectType referencedParamType = paramType
-          .toMaybeTemplatizedType()
-          .getReferencedType();
-      JSType argObjectType = argType
-          .restrictByNotNullOrUndefined()
-          .collapseUnion();
-
-      if (argObjectType.isSubtype(referencedParamType)) {
-        // If the argument type is a subtype of the parameter type, resolve any
-        // template types amongst their templatized types.
-        TemplateTypeMap paramTypeMap = paramType.getTemplateTypeMap();
-        TemplateTypeMap argTypeMap = argObjectType.getTemplateTypeMap();
-        for (TemplateType key : paramTypeMap.getTemplateKeys()) {
-          maybeResolveTemplatedType(
-              paramTypeMap.getTemplateType(key),
-              argTypeMap.getTemplateType(key),
-              resolvedTypes);
-        }
-      }
-    }
+    } else
+		;
   }
 
   private void maybeResolveTemplateTypeFromNodes(
       Iterable<Node> declParams,
       Iterable<Node> callParams,
       Map<TemplateType, JSType> resolvedTypes) {
-    maybeResolveTemplateTypeFromNodes(
-        declParams.iterator(), callParams.iterator(), resolvedTypes);
   }
 
   private void maybeResolveTemplateTypeFromNodes(
@@ -1353,7 +1305,8 @@
       JSType restrictedObjType = objType.restrictByNotNullOrUndefined();
       if (!restrictedObjType.getTemplateTypeMap().isEmpty()
           && propertyType.hasAnyTemplateTypes()) {
-        TemplateTypeMap typeMap = restrictedObjType.getTemplateTypeMap();
+        int start = 0;
+		TemplateTypeMap typeMap = restrictedObjType.getTemplateTypeMap();
         TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(
             registry, typeMap);
         propertyType = propertyType.visit(replacer);


