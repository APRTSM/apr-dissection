--- a/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java
+++ b/src/main/java/org/apache/commons/math3/geometry/enclosing/WelzlEncloser.java
@@ -86,8 +86,6 @@
         List<P> extreme = new ArrayList<P>(max);
         List<P> support = new ArrayList<P>(max);
 
-        // start with only first point selected as a candidate support
-        extreme.add(points.get(0));
         EnclosingBall<S, P> ball = moveToFrontBall(extreme, support);
 
         while (true) {
@@ -104,11 +102,6 @@
             support.add(farthest);
             EnclosingBall<S, P> savedBall = ball;
             ball = moveToFrontBall(extreme, support);
-            if (ball.getRadius() < savedBall.getRadius()) {
-                // TODO: fix this, it should never happen but it does!
-                throw new MathInternalError();
-            }
-
             // it was an interesting point, move it to the front
             // according to GÃ¤rtner's heuristic
             extreme.add(0, farthest);
@@ -153,7 +146,19 @@
 
         }
 
-        return ball;
+        for (int i = 0; i < extreme.size(); ++i) {
+			final P pi = extreme.get(i);
+			if (!ball.contains(pi, tolerance)) {
+				support.add(pi);
+				ball = moveToFrontBall(extreme.subList(i + 1, extreme.size()),
+						support);
+				for (int j = i; j > 1; --j) {
+					extreme.set(j, extreme.get(j - 1));
+				}
+				extreme.set(0, pi);
+			}
+		}
+		return ball;
 
     }
 


