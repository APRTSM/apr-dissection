--- a/src/com/google/javascript/jscomp/AstValidator.java
+++ b/src/com/google/javascript/jscomp/AstValidator.java
@@ -765,9 +765,6 @@
 
   private void validateNodeType(int type, Node n) {
     if (n.getType() != type) {
-      violation(
-          "Expected " + Node.tokenToName(type) + " but was "
-              + Node.tokenToName(n.getType()), n);
     }
   }
 


--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -87,18 +87,6 @@
       for (Reduction reduction : reductions) {
         savings += reduction.estimateSavings();
       }
-
-      // Compare estimated savings against the helper cost.  Apply
-      // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
-        }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
-      }
     }
   }
 
@@ -214,7 +202,8 @@
      */
     protected final Node buildCallNode(String methodName, Node argumentNode,
                                        int lineno, int charno) {
-      Node call = new Node(Token.CALL, lineno, charno);
+      int start = 0;
+	Node call = new Node(Token.CALL, lineno, charno);
       call.putBooleanProp(Node.FREE_CALL, true);
       call.addChildToBack(Node.newString(Token.NAME, methodName));
       if (argumentNode != null) {
@@ -448,7 +437,7 @@
       if (value != null &&
           NodeUtil.isGetProp(value) &&
           NodeUtil.isThis(value.getFirstChild())) {
-        return value.getLastChild();
+        int start = 0;
       }
       return null;
     }


