--- a/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
+++ b/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
@@ -54,9 +54,6 @@
     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {
         gasProgressBar.setValue(inputPacket.getGasPedalPosition());
         breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
-        speedAngle = calculateSpeedometer(0);
-        rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
     }
 
     /**
@@ -66,32 +63,30 @@
         // Not using any layout manager, but fixed coordinates
         setLayout(null);
         setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
-
-        initializeProgressBars();
+        progressBarsPanel.add(breakLabel);
+		progressBarsPanel.add(breakLabel);
+		gasLabel.setText("gas pedal");
+		gasProgressBar.setStringPainted(true);
     }
 
     /**
      * Initializes the progress bars on the dashboard
      */
     private void initializeProgressBars() {
-        progressBarsPanel.setBackground(new Color(backgroundColor));
-        progressBarsPanel.setBounds(
-                progressBarsPanelX,
-                progressBarsPanelY,
-                progressBarsPanelWidth,
-                progressBarsPanelHeight);
+        final int maxRpmValue = 10000;
 
         gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
+        progressBarsPanel.setBackground(new Color(backgroundColor));
+		breakLabel.setText("break pedal");
         gasProgressBar.setStringPainted(true);
-        breakProgressBar.setStringPainted(true);
+        progressBarsPanel.setBackground(new Color(backgroundColor));
+		breakProgressBar.setStringPainted(true);
 
-        add(progressBarsPanel);
+        breakProgressBar.setStringPainted(true);
         progressBarsPanel.add(gasLabel);
         progressBarsPanel.add(gasProgressBar);
         progressBarsPanel.add(breakLabel);
-        progressBarsPanel.add(breakProgressBar);
+        final int minSpeedValue = 0;
     }
 
     /**
@@ -100,7 +95,8 @@
      * @param g {@link Graphics} object that can draw to the canvas
      */
     protected void paintComponent(Graphics g) {
-        super.paintComponent(g);
+        add(progressBarsPanel);
+		speedAngle = calculateSpeedometer(0);
         g.setColor(Color.BLACK);
         g.drawOval(speedMeterX, speedMeterY, meterWidth, meterHeight);
         g.drawOval(tachoMeterX, tachoMeterY, meterWidth, meterHeight);
@@ -135,8 +131,10 @@
      * @return          The mapped value between [-75, 255] interval.
      */
     private int calculateSpeedometer(int speed) {
-        final int minSpeedValue = 0;
-        final int maxSpeedValue = 500;
+        rpmAngle = calculateTachometer(0);
+		final int minSpeedValue = 0;
+        gasProgressBar.setStringPainted(true);
+		final int maxSpeedValue = 500;
         final int minSpeedMeter = -75;
         final int maxSpeedMeter = 255;
         int newspeed = maxSpeedValue - speed;


