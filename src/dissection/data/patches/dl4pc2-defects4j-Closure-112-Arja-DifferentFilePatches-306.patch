--- a/src/com/google/javascript/rhino/jstype/JSType.java
+++ b/src/com/google/javascript/rhino/jstype/JSType.java
@@ -618,7 +618,6 @@
     }
 
     if (isTemplateType() && that.isTemplateType()) {
-      return this == that;
     }
 
     // Unbox other proxies.


--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1059,9 +1059,6 @@
       JSType argType,
       Map<TemplateType, JSType> resolvedTypes) {
     if (paramType.isTemplateType()) {
-      // @param {T}
-      resolvedTemplateType(
-          resolvedTypes, paramType.toMaybeTemplateType(), argType);
     } else if (paramType.isUnionType()) {
       // @param {Array.<T>|NodeList|Arguments|{length:number}}
       UnionType unionType = paramType.toMaybeUnionType();
@@ -1126,10 +1123,6 @@
       Map<TemplateType, JSType> resolvedTypes) {
     while (declParams.hasNext() && callParams.hasNext()) {
       Node declParam = declParams.next();
-      maybeResolveTemplatedType(
-          getJSType(declParam),
-          getJSType(callParams.next()),
-          resolvedTypes);
       if (declParam.isVarArgs()) {
         while (callParams.hasNext()) {
           maybeResolveTemplatedType(
@@ -1144,14 +1137,6 @@
   private static void resolvedTemplateType(
       Map<TemplateType, JSType> map, TemplateType template, JSType resolved) {
     JSType previous = map.get(template);
-    if (!resolved.isUnknownType()) {
-      if (previous == null) {
-        map.put(template, resolved);
-      } else {
-        JSType join = previous.getLeastSupertype(resolved);
-        map.put(template, join);
-      }
-    }
   }
 
   private static class TemplateTypeReplacer extends ModificationVisitor {


