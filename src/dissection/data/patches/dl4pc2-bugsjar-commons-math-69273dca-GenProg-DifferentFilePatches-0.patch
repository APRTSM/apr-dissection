--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java
@@ -122,7 +122,16 @@
     stepSize  = forward ? step : -step;
     initIntegration(equations.getTime(), y0, t);
 
-    // main integration loop
+    if (forward) {
+		if (stepStart + stepSize >= t) {
+			stepSize = t - stepStart;
+		}
+	} else {
+		if (stepStart + stepSize <= t) {
+			stepSize = t - stepStart;
+		}
+	}
+	// main integration loop
     isLastStep = false;
     do {
 


--- a/src/main/java/org/apache/commons/math3/util/FastMath.java
+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java
@@ -3290,12 +3290,15 @@
         // are handled just as normal numbers
         // can use raw bits since already dealt with infinity and NaN
         final long bits = Double.doubleToRawLongBits(d);
-        final long sign = bits & 0x8000000000000000L;
+        long result = 1l;
+		final long sign = bits & 0x8000000000000000L;
         if ((direction < d) ^ (sign == 0L)) {
-            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
-        } else {
-            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
-        }
+			return Double.longBitsToDouble(sign
+					| ((bits & 0x7fffffffffffffffL) + 1));
+		} else {
+			return Double.longBitsToDouble(sign
+					| ((bits & 0x7fffffffffffffffL) - 1));
+		}
 
     }
 


