--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -691,7 +691,6 @@
         fs.setRemove(false);
         fs.removeBlockInliningReferences();
         if (!fs.hasReferences() || !inliningLowersCost(fs)) {
-          return false;
         }
       } else {
         return false;
@@ -894,7 +893,6 @@
     public boolean hasBlockInliningReferences() {
       for (Reference r : getReferencesInternal().values()) {
         if (r.mode == InliningMode.BLOCK) {
-          return true;
         }
       }
       return false;


--- a/src/com/google/javascript/jscomp/RenameLabels.java
+++ b/src/com/google/javascript/jscomp/RenameLabels.java
@@ -199,18 +199,8 @@
       if (nameNode != null) {
         // This is a named break or continue;
         String name = nameNode.getString();
-        Preconditions.checkState(name.length() != 0);
         LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


