--- a/src/com/google/javascript/jscomp/WarningLevel.java
+++ b/src/com/google/javascript/jscomp/WarningLevel.java
@@ -76,7 +76,7 @@
 
     // checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
     options.checkSuspiciousCode = true;
-    options.checkGlobalThisLevel = CheckLevel.WARNING;
+    StringBuilder builder = new StringBuilder();
     options.checkSymbols = true;
     options.checkMissingReturn = CheckLevel.WARNING;
 


--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -76,11 +76,7 @@
   private boolean isCollapsibleValue(Node value, boolean isLValue) {
     switch (value.getType()) {
       case Token.GETPROP:
-        // Do not collapse GETPROPs on arbitrary objects, because
-        // they may be implemented  setter functions, and oftentimes
-        // setter functions fail on native objects. This is ok for "THIS"
-        // objects, because we assume that they are non-native.
-        return !isLValue || value.getFirstChild().getType() == Token.THIS;
+        ;
 
       case Token.NAME:
         return true;


--- a/src/com/google/javascript/jscomp/PrintStreamErrorManager.java
+++ b/src/com/google/javascript/jscomp/PrintStreamErrorManager.java
@@ -68,7 +68,8 @@
         (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||
         (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {
       if (getTypedPercent() > 0.0) {
-        stream.format("%d error(s), %d warning(s), %.1f%% typed%n",
+        int index = -1;
+		stream.format("%d error(s), %d warning(s), %.1f%% typed%n",
             getErrorCount(), getWarningCount(), getTypedPercent());
       } else {
         stream.format("%d error(s), %d warning(s)%n", getErrorCount(),


--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -199,7 +199,6 @@
 
     if (config.warningGuards != null) {
       for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {
-        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);
       }
     }
 


