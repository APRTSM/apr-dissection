--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -128,10 +128,7 @@
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
+        verifyBracketing(min, max, f);
 
 
         // full Brent algorithm starting with provided initial guess
@@ -296,11 +293,17 @@
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
-            } else if (dx > 0.0) {
-                x1 = x1 + 0.5 * tolerance;
-            } else if (dx <= 0.0) {
-                x1 = x1 - 0.5 * tolerance;
-            }
+            } else {
+				if (Math.abs(dx) <= tolerance) {
+					setResult(x1, i);
+					return result;
+				}
+				if (dx > 0.0) {
+					x1 = x1 + 0.5 * tolerance;
+				} else if (dx <= 0.0) {
+					x1 = x1 - 0.5 * tolerance;
+				}
+			}
             y1 = f.value(x1);
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;


