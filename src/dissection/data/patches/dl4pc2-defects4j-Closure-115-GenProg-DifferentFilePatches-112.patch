--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -728,7 +728,6 @@
       if (fnParam != null) {
         if (cArg != null) {
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a


--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -501,8 +501,6 @@
         // This reference can not be directly inlined, see if
         // block replacement inlining is possible.
         mode = InliningMode.BLOCK;
-        referenceAdded = maybeAddReferenceUsingMode(
-            t, fs, callNode, module, mode);
       }
 
       if (!referenceAdded) {
@@ -688,7 +686,6 @@
     if (!inliningLowersCost(fs)) {
       // Try again without Block inlining references
       if (fs.hasBlockInliningReferences()) {
-        fs.setRemove(false);
         fs.removeBlockInliningReferences();
         if (!fs.hasReferences() || !inliningLowersCost(fs)) {
           return false;


