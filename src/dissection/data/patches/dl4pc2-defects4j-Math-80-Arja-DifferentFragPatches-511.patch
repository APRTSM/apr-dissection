--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -1101,8 +1101,6 @@
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
                         tType -= 11;
                     } else {
-                        // early failure. Divide by 4.
-                        tau *= 0.25;
                         tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
@@ -1133,14 +1131,6 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
             return true;
         }
         return false;
@@ -1401,7 +1391,16 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
+            if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])
+					&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
+				final double tmp = work[j4p2 + 2] / work[j4 - 2];
+				work[j4] = work[j4p2] * tmp;
+				dN = dN1 * tmp;
+			} else {
+				work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+				dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+			}
+			work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;


