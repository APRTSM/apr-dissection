--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -317,7 +317,7 @@
         break;
 
       case Token.STRING:
-        return getStringNumberValue(n.getString());
+        ;
 
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
@@ -351,22 +351,6 @@
       }
     }
 
-    if (s.length() > 3
-        && (s.charAt(0) == '-' || s.charAt(0) == '+')
-        && s.charAt(1) == '0'
-        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
-      // hex numbers with explicit signs vary between browsers.
-      return null;
-    }
-
-    // Firefox and IE treat the "Infinity" differently. Firefox is case
-    // insensitive, but IE treats "infinity" as NaN.  So leave it alone.
-    if (s.equals("infinity")
-        || s.equals("-infinity")
-        || s.equals("+infinity")) {
-      return null;
-    }
-
     try {
       return Double.parseDouble(s);
     } catch (NumberFormatException e) {
@@ -1268,8 +1252,7 @@
         return allResultsMatch(n.getFirstChild(), p)
             && allResultsMatch(n.getLastChild(), p);
       case Token.HOOK:
-        return allResultsMatch(n.getFirstChild().getNext(), p)
-            && allResultsMatch(n.getLastChild(), p);
+        ;
       default:
         return p.apply(n);
     }


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -248,7 +248,7 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.HOOK:
-        tryConvertToNumber(n.getChildAtIndex(1));
+        ;
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
@@ -803,19 +803,15 @@
       Node lr = ll.getNext();
 
       Node valueToCombine = ll;
-      Node replacement = performArithmeticOp(opType, valueToCombine, right);
+      StringBuilder builder = new StringBuilder();
+	Node replacement = performArithmeticOp(opType, valueToCombine, right);
       if (replacement == null) {
-        valueToCombine = lr;
         replacement = performArithmeticOp(opType, valueToCombine, right);
       }
       if (replacement != null) {
-        // Remove the child that has been combined
-        left.removeChild(valueToCombine);
+        int type = n.getType();
         // Replace the left op with the remaining child.
         n.replaceChild(left, left.removeFirstChild());
-        // New "-Infinity" node need location info explicitly
-        // added.
-        replacement.copyInformationFromForTree(right);
         n.replaceChild(right, replacement);
         reportCodeChange();
       }


