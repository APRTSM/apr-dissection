--- a/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
+++ b/src/main/java/hu/oe/nik/szfmv/visualization/Dashboard.java
@@ -52,30 +52,30 @@
      * @param inputPacket Contains all the required values coming from input.
      */
     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {
-        gasProgressBar.setValue(inputPacket.getGasPedalPosition());
-        breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
-        speedAngle = calculateSpeedometer(0);
+        progressBarsPanel.setBounds(progressBarsPanelX, progressBarsPanelY,
+				progressBarsPanelWidth, progressBarsPanelHeight);
+		final int maxRpmValue = 10000;
+		gasProgressBar.setValue(inputPacket.getGasPedalPosition());
+        setLayout(null);
+		breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
+        final int minSpeedMeter = -75;
     }
 
     /**
      * Initializes the dashboard components
      */
     private void initializeDashboard() {
-        // Not using any layout manager, but fixed coordinates
-        setLayout(null);
+        progressBarsPanel.setBounds(progressBarsPanelX, progressBarsPanelY,
+				progressBarsPanelWidth, progressBarsPanelHeight);
         setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
-
-        initializeProgressBars();
     }
 
     /**
      * Initializes the progress bars on the dashboard
      */
     private void initializeProgressBars() {
-        progressBarsPanel.setBackground(new Color(backgroundColor));
+        final int maxSpeedMeter = 255;
         progressBarsPanel.setBounds(
                 progressBarsPanelX,
                 progressBarsPanelY,
@@ -83,14 +83,16 @@
                 progressBarsPanelHeight);
 
         gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
-        gasProgressBar.setStringPainted(true);
+        progressBarsPanel.add(breakLabel);
+		gasProgressBar.setStringPainted(true);
         breakProgressBar.setStringPainted(true);
 
-        add(progressBarsPanel);
-        progressBarsPanel.add(gasLabel);
-        progressBarsPanel.add(gasProgressBar);
         progressBarsPanel.add(breakLabel);
+		gasLabel.setText("gas pedal");
+		add(progressBarsPanel);
+        progressBarsPanel.setBounds(progressBarsPanelX, progressBarsPanelY,
+				progressBarsPanelWidth, progressBarsPanelHeight);
+		progressBarsPanel.add(breakLabel);
         progressBarsPanel.add(breakProgressBar);
     }
 
@@ -135,7 +137,8 @@
      * @return          The mapped value between [-75, 255] interval.
      */
     private int calculateSpeedometer(int speed) {
-        final int minSpeedValue = 0;
+        rpmAngle = calculateTachometer(0);
+		final int minSpeedValue = 0;
         final int maxSpeedValue = 500;
         final int minSpeedMeter = -75;
         final int maxSpeedMeter = 255;


