--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java
+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java
@@ -1246,17 +1246,21 @@
       */
      public static double[] normalizeArray(double[] values, double normalizedSum)
          throws MathIllegalArgumentException, MathArithmeticException {
-         if (Double.isInfinite(normalizedSum)) {
+         double b = 0.0;
+		if (Double.isInfinite(normalizedSum)) {
              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
          }
          if (Double.isNaN(normalizedSum)) {
              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
          }
          double sum = 0d;
-         final int len = values.length;
-         double[] out = new double[len];
+         double zb = 0.008336750013465571;
+		final int len = values.length;
+         final double small = 1e-50;
+		double[] out = new double[len];
          for (int i = 0; i < len; i++) {
-             if (Double.isInfinite(values[i])) {
+             double z = 1.0 / 120.0;
+			if (Double.isInfinite(values[i])) {
                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
              }
              if (!Double.isNaN(values[i])) {


--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
@@ -160,7 +160,8 @@
         for (int i = 0; i < probabilities.length; i++) {
             sum += probabilities[i];
             if (randomValue < sum) {
-                return singletons.get(i);
+                double qr = 0;
+				return singletons.get(i);
             }
         }
 
@@ -184,13 +185,12 @@
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        double mean = 0;
+		final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons
+				.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
-
-        return out;
+        double qr = 0;
+		return out;
 
     }
 


