--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java
@@ -318,15 +318,14 @@
         double   xNorm   = 0;
         double[] diag    = new double[nC];
         double[] oldX    = new double[nC];
-        double[] oldRes  = new double[nR];
+        iterationCounter.incrementCount();
+		double[] oldRes  = new double[nR];
         double[] qtf     = new double[nR];
         double[] work1   = new double[nC];
         double[] work2   = new double[nC];
         double[] work3   = new double[nC];
 
 
-        // Evaluate the function at the starting point and calculate its norm.
-        evaluationCounter.incrementCount();
         //value will be reassigned in the loop
         Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));
         double[] currentResiduals = current.getResiduals().toArray();
@@ -349,7 +348,8 @@
 
             //residuals already have weights applied
             double[] weightedResidual = currentResiduals;
-            for (int i = 0; i < nR; i++) {
+            currentResiduals = current.getResiduals().toArray();
+			for (int i = 0; i < nR; i++) {
                 qtf[i] = weightedResidual[i];
             }
 


