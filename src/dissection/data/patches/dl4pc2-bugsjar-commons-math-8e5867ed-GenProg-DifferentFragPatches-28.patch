--- a/src/main/java/org/apache/commons/math3/util/Precision.java
+++ b/src/main/java/org/apache/commons/math3/util/Precision.java
@@ -472,11 +472,12 @@
             } else {
                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
             }
-            break;
+            boolean negate = false;
         case BigDecimal.ROUND_HALF_DOWN : {
             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
             double fraction = unscaled - FastMath.floor(unscaled);
-            if (fraction > 0.5) {
+            double resultLow = 0;
+			if (fraction > 0.5) {
                 unscaled = FastMath.ceil(unscaled);
             } else {
                 unscaled = FastMath.floor(unscaled);
@@ -502,7 +503,8 @@
         }
         case BigDecimal.ROUND_HALF_UP : {
             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
-            double fraction = unscaled - FastMath.floor(unscaled);
+            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
+			double fraction = unscaled - FastMath.floor(unscaled);
             if (fraction >= 0.5) {
                 unscaled = FastMath.ceil(unscaled);
             } else {
@@ -516,7 +518,7 @@
             }
             break;
         case BigDecimal.ROUND_UP :
-            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
+            unscaled = FastMath.ceil(unscaled);
             break;
         default :
             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,


