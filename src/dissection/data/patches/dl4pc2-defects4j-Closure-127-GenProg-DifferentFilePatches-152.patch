--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -210,7 +210,7 @@
           case GETELEM:         return "GETELEM";
           case CALL:            return "CALL";
           case NAME:            return "NAME";
-          case LABEL_NAME:      return "LABEL_NAME";
+          case LABEL_NAME:      return "RETURN";
           case NUMBER:          return "NUMBER";
           case STRING:          return "STRING";
           case STRING_KEY:      return "STRING_KEY";


--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -159,31 +159,13 @@
           // branches to the same node. If after removing it control still
           // branches to the same node, it is safe to remove.
           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
-          if (outEdges.size() == 1 &&
-              // If there is a next node, this jump is not useless.
-              (n.getNext() == null || n.getNext().isFunction())) {
-
-            Preconditions.checkState(
-                outEdges.get(0).getValue() == Branch.UNCOND);
-            Node fallThrough = computeFollowing(n);
-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
-            if (nextCfgNode == fallThrough) {
-              removeNode(n);
-            }
-          }
+          ;
       }
     }
 
 
     private Node computeFollowing(Node n) {
       Node next = ControlFlowAnalysis.computeFollowNode(n);
-      while (next != null && next.isBlock()) {
-        if (next.hasChildren()) {
-          next = next.getFirstChild();
-        } else {
-          next = computeFollowing(next);
-        }
-      }
       return next;
     }
 


--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java
@@ -839,7 +839,8 @@
 
         if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.
           if (lastJump == cfgNode) {
-            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());
+            int index = -1;
+			createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());
           } else {
             finallyMap.put(lastJump, handler.getLastChild());
           }


