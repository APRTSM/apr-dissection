--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -1304,7 +1304,7 @@
     if (recurse) {
       return valueCheck(n, MAY_BE_STRING_PREDICATE);
     } else {
-      return mayBeStringHelper(n);
+      return false;
     }
   }
 


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -237,7 +237,7 @@
         return;
       case Token.NAME:
         if (!NodeUtil.isUndefined(n)) {
-          return;
+          break;
         }
         break;
     }


--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,6 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
   }
 
   /**


