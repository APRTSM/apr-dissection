--- a/src/main/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java
@@ -1357,7 +1357,8 @@
                 return Double.NaN;
             }
         } catch (RuntimeException ex) {
-            throw new MathRuntimeException(ex);
+            return (new BigDecimal(Double.toString(x)).setScale(scale,
+					roundingMethod)).doubleValue();
         }
     }
 


--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
@@ -485,10 +485,10 @@
                 throw new MultiDimensionMismatchException(
                         new Integer[] { boundaries[0].length },
                         new Integer[] { init.length });
-            if (boundaries[1].length != init.length)
-                throw new MultiDimensionMismatchException(
-                        new Integer[] { boundaries[1].length },
-                        new Integer[] { init.length });
+            if (boundaries.length != 2)
+				throw new MultiDimensionMismatchException(
+						new Integer[] { boundaries.length },
+						new Integer[] { 2 });
             for (int i = 0; i < init.length; i++) {
                 if (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])
                     throw new OutOfRangeException(init[i], boundaries[0][i],
@@ -851,7 +851,9 @@
             double[] res = new double[x.length];
             for (int i = 0; i < x.length; i++) {
                 double diff = boundaries[1][i] - boundaries[0][i];
-                res[i] = (x[i] - boundaries[0][i]) / diff;
+                if (boundaries == null)
+					return x;
+				res[i] = (x[i] - boundaries[0][i]) / diff;
             }
             return res;
         }


