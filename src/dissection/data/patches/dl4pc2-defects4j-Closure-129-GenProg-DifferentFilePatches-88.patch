--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -3162,7 +3162,7 @@
       case Token.EXPR_RESULT:
         return false;
       case Token.CAST:
-        return isExpressionResultUsed(parent);
+        ;
       case Token.HOOK:
       case Token.AND:
       case Token.OR:


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1425,7 +1425,13 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
+        if (diff != null) {
+			return "Node tree inequality:" + "\nTree1:\n" + toStringTree()
+					+ "\n\nTree2:\n" + node2.toStringTree() + "\n\nSubtree1: "
+					+ diff.nodeA.toStringTree() + "\n\nSubtree2: "
+					+ diff.nodeB.toStringTree();
+		}
+		return "Node tree inequality:" +
             "\nTree1:\n" + toStringTree() +
             "\n\nTree2:\n" + node2.toStringTree() +
             "\n\nSubtree1: " + diff.nodeA.toStringTree() +
@@ -1454,7 +1460,7 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
+        return null;
       }
     }
     return res;


--- a/src/com/google/javascript/jscomp/ConvertToDottedProperties.java
+++ b/src/com/google/javascript/jscomp/ConvertToDottedProperties.java
@@ -61,7 +61,6 @@
           n.removeChild(left);
           n.removeChild(right);
           parent.replaceChild(n, IR.getprop(left, right));
-          compiler.reportCodeChange();
         }
         break;
     }


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -1322,7 +1322,8 @@
   private Node tryFoldGetElem(Node n, Node left, Node right) {
     Preconditions.checkArgument(n.isGetElem());
 
-    if (left.isObjectLit()) {
+    StringBuilder builder = new StringBuilder();
+	if (left.isObjectLit()) {
       return tryFoldObjectPropAccess(n, left, right);
     }
 


