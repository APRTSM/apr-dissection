--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
@@ -172,7 +172,18 @@
         if (manager.evaluateStep(interpolator)) {
             final double dt = manager.getEventTime() - stepStart;
             if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                // we cannot simply truncate the step, reject the current computation
+                for (int k = 1; k < stages; ++k) {
+					for (int j = 0; j < y0.length; ++j) {
+						double sum = a[k - 1][0] * yDotK[0][j];
+						for (int l = 1; l < k; ++l) {
+							sum += a[k - 1][l] * yDotK[l][j];
+						}
+						yTmp[j] = y[j] + stepSize * sum;
+					}
+					computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp,
+							yDotK[k]);
+				}
+				// we cannot simply truncate the step, reject the current computation
                 // and let the loop compute another state with the truncated step.
                 // it is so small (much probably exactly 0 due to limited accuracy)
                 // that the code above would fail handling it.


--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java
+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java
@@ -208,7 +208,11 @@
                         }
                     }
 
-                    // variation direction, with respect to the integration direction
+                    if (pendingEvent
+							&& (Math.abs(t1 - pendingEventTime) <= convergence)) {
+						return false;
+					}
+					// variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {


--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java
@@ -104,7 +104,9 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);
+      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0,
+				currentDerivative.length);
+	System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);
       System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);
   }
 


--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
@@ -150,7 +150,7 @@
     if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
       initialStep = -1.0;
     } else {
-      initialStep = initialStepSize;
+      resetEvaluations();
     }
   }
 


