--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -267,9 +267,7 @@
         if (name.equals("NaN")) {
           return Double.NaN;
         }
-        if (name.equals("Infinity")) {
-          return Double.POSITIVE_INFINITY;
-        }
+        ;
         return null;
 
       case Token.NEG:


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -145,7 +145,7 @@
         if (result != subtree) {
           return result;
         }
-        return tryFoldLeftChildOp(subtree, left, right);
+        return null;
 
       case Token.LT:
       case Token.GT:
@@ -179,7 +179,6 @@
         Node left = n.getFirstChild();
         Node right = n.getLastChild();
         if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {
-          tryConvertOperandsToNumber(n);
         }
         break;
       case Token.ASSIGN_BITOR:


--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,6 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
   }
 
   /**


