--- a/src/main/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java
@@ -1357,7 +1357,8 @@
                 return Double.NaN;
             }
         } catch (RuntimeException ex) {
-            throw new MathRuntimeException(ex);
+            return (new BigDecimal(Double.toString(x)).setScale(scale,
+					roundingMethod)).doubleValue();
         }
     }
 


--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
@@ -942,10 +942,6 @@
          */
         private double penalty(final double[] x, final double[] repaired) {
             double penalty = 0;
-            for (int i = 0; i < x.length; i++) {
-                double diff = Math.abs(x[i] - repaired[i]);
-                penalty += diff * valueRange;
-            }
             return isMinimize ? penalty : -penalty;
         }
     }


--- a/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java
+++ b/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java
@@ -100,7 +100,8 @@
      * @return the localized message.
      */
     public String getMessage(final Locale locale) {
-        return buildMessage(locale, ": ");
+        context = new HashMap<String, Object>();
+		return buildMessage(locale, ": ");
     }
 
     /**


