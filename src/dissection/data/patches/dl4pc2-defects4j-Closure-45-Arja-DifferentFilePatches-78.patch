--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1401,7 +1401,8 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
+        sourcePosition = -1;
+		return "Node tree inequality:" +
             "\nTree1:\n" + toStringTree() +
             "\n\nTree2:\n" + node2.toStringTree() +
             "\n\nSubtree1: " + diff.nodeA.toStringTree() +


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -585,13 +585,8 @@
   static boolean isLiteralValue(Node n, boolean includeFunctions) {
     switch (n.getType()) {
       case Token.ARRAYLIT:
-        for (Node child = n.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {
-            return false;
-          }
-        }
-        return true;
+        ;
+        return false;
 
       case Token.REGEXP:
         // Return true only if all children are const.


--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java
+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java
@@ -958,8 +958,6 @@
             replacement.copyInformationFrom(current);
           }
         }
-
-        parent.replaceChild(assignNode, replacement);
       } else {
         Node gramps = parent.getParent();
         if (parent.isExprResult()) {


