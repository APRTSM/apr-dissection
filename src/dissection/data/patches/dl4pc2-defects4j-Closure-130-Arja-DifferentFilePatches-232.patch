--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1430,7 +1430,8 @@
    */
   NodeMismatch checkTreeEqualsImpl(Node node2) {
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      sourcePosition = -1;
+	return new NodeMismatch(this, node2);
     }
 
     NodeMismatch res = null;


--- a/src/com/google/javascript/jscomp/GlobalNamespace.java
+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java
@@ -989,7 +989,7 @@
           case ALIASING_GET:
             aliasingGets--;
             totalGets--;
-            break;
+            this.type = Type.OTHER;
           case CALL_GET:
             callGets--;
             totalGets--;


--- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -210,33 +210,7 @@
           new ReferenceCollectingCallback(compiler,
               ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
               Predicates.<Var>equalTo(aliasVar));
-      (new NodeTraversal(compiler, collector)).traverseAtScope(scope);
-
       ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
-      if (aliasRefs.isWellDefined()
-          && aliasRefs.firstReferenceIsAssigningDeclaration()
-          && aliasRefs.isAssignedOnceInLifetime()) {
-        // The alias is well-formed, so do the inlining now.
-        int size = aliasRefs.references.size();
-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
-        for (int i = 1; i < size; i++) {
-          ReferenceCollectingCallback.Reference aliasRef =
-              aliasRefs.references.get(i);
-
-          Node newNode = alias.node.cloneTree();
-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
-          newNodes.add(newNode);
-        }
-
-        // just set the original alias to null.
-        aliasParent.replaceChild(alias.node, IR.nullNode());
-        compiler.reportCodeChange();
-
-        // Inlining the variable may have introduced new references
-        // to descendants of {@code name}. So those need to be collected now.
-        namespace.scanNewNodes(alias.scope, newNodes);
-        return true;
-      }
     }
 
     return false;


