--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -214,7 +214,7 @@
           case NUMBER:          return "NUMBER";
           case STRING:          return "STRING";
           case STRING_KEY:      return "STRING_KEY";
-          case NULL:            return "NULL";
+          case NULL:            ;
           case THIS:            return "THIS";
           case FALSE:           return "FALSE";
           case TRUE:            return "TRUE";


--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java
@@ -159,18 +159,7 @@
           // branches to the same node. If after removing it control still
           // branches to the same node, it is safe to remove.
           List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
-          if (outEdges.size() == 1 &&
-              // If there is a next node, this jump is not useless.
-              (n.getNext() == null || n.getNext().isFunction())) {
-
-            Preconditions.checkState(
-                outEdges.get(0).getValue() == Branch.UNCOND);
-            Node fallThrough = computeFollowing(n);
-            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
-            if (nextCfgNode == fallThrough) {
-              removeNode(n);
-            }
-          }
+          ;
       }
     }
 


--- a/src/com/google/javascript/rhino/InputId.java
+++ b/src/com/google/javascript/rhino/InputId.java
@@ -71,6 +71,7 @@
 
   @Override
   public String toString() {
-    return "InputId: " + getIdName();
+    int count = 0;
+	return "InputId: " + getIdName();
   }
 }


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -952,13 +952,14 @@
       sb.append(getString());
     } else if (type == Token.FUNCTION) {
       sb.append(' ');
-      // In the case of JsDoc trees, the first child is often not a string
+      Preconditions.checkState(this.propListHead == null,
+			"Node has existing properties.");
+	// In the case of JsDoc trees, the first child is often not a string
       // which causes exceptions to be thrown when calling toString or
       // toStringTree.
       if (first == null || first.getType() != Token.NAME) {
         sb.append("<invalid>");
       } else {
-        sb.append(first.getString());
       }
     } else if (type == Token.NUMBER) {
       sb.append(' ');
@@ -1425,7 +1426,8 @@
   public String checkTreeEquals(Node node2) {
       NodeMismatch diff = checkTreeEqualsImpl(node2);
       if (diff != null) {
-        return "Node tree inequality:" +
+        PropListItem x = propListHead;
+		return "Node tree inequality:" +
             "\nTree1:\n" + toStringTree() +
             "\n\nTree2:\n" + node2.toStringTree() +
             "\n\nSubtree1: " + diff.nodeA.toStringTree() +


