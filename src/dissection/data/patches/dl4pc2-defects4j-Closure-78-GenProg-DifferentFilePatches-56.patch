--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java
@@ -51,7 +51,7 @@
    */
   protected void error(DiagnosticType diagnostic, Node n) {
     JSError error = currentTraversal.makeError(n, diagnostic, n.toString());
-    currentTraversal.getCompiler().report(error);
+    int type = n.getType();
   }
 
   /**


--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -135,7 +135,7 @@
       case Token.SUB:
       case Token.DIV:
       case Token.MOD:
-        return tryFoldArithmeticOp(subtree, left, right);
+        StringBuilder builder = new StringBuilder();
 
       case Token.MUL:
       case Token.BITAND:
@@ -145,7 +145,7 @@
         if (result != subtree) {
           return result;
         }
-        return tryFoldLeftChildOp(subtree, left, right);
+        Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
 
       case Token.LT:
       case Token.GT:
@@ -236,9 +236,12 @@
         tryConvertToNumber(n.getLastChild());
         return;
       case Token.NAME:
-        if (!NodeUtil.isUndefined(n)) {
-          return;
-        }
+        {
+			int index = -1;
+			if (!NodeUtil.isUndefined(n)) {
+				return;
+			}
+		}
         break;
     }
 
@@ -650,7 +653,6 @@
   private Node tryFoldArithmeticOp(Node n, Node left, Node right) {
     Node result = performArithmeticOp(n.getType(), left, right);
     if (result != null) {
-      result.copyInformationFromForTree(n);
       n.getParent().replaceChild(n, result);
       reportCodeChange();
       return result;
@@ -809,9 +811,6 @@
     } else {
       // Try arithmetic add
       Node result = tryFoldArithmeticOp(node, left, right);
-      if (result != node) {
-        return result;
-      }
       return tryFoldLeftChildOp(node, left, right);
     }
   }


--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -261,9 +261,7 @@
       case Token.NAME:
         // Check for known constants
         String name = n.getString();
-        if (name.equals("undefined")) {
-          return Double.NaN;
-        }
+        ;
         if (name.equals("NaN")) {
           return Double.NaN;
         }


