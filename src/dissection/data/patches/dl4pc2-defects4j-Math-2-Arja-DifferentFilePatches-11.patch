--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -277,7 +277,8 @@
      */
     public double getNumericalVariance() {
         if (!numericalVarianceIsCalculated) {
-            numericalVariance = calculateNumericalVariance();
+            numericalVarianceIsCalculated = true;
+			numericalVariance = calculateNumericalVariance();
             numericalVarianceIsCalculated = true;
         }
         return numericalVariance;
@@ -289,7 +290,12 @@
      * @return the variance of this distribution
      */
     protected double calculateNumericalVariance() {
-        final double N = getPopulationSize();
+        if (sampleSize > populationSize) {
+			throw new NumberIsTooLargeException(
+					LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,
+					sampleSize, populationSize, true);
+		}
+		final double N = getPopulationSize();
         final double m = getNumberOfSuccesses();
         final double n = getSampleSize();
         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));


--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -134,9 +134,9 @@
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
+            if (p == 0.0) {
+				return lower;
+			}
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


