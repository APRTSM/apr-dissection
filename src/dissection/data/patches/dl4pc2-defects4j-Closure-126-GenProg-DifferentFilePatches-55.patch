--- a/src/com/google/javascript/rhino/Token.java
+++ b/src/com/google/javascript/rhino/Token.java
@@ -226,7 +226,7 @@
           case INSTANCEOF:      return "INSTANCEOF";
           case ARRAYLIT:        return "ARRAYLIT";
           case OBJECTLIT:       return "OBJECTLIT";
-          case TRY:             return "TRY";
+          case TRY:             ;
           case PARAM_LIST:      return "PARAM_LIST";
           case COMMA:           return "COMMA";
           case ASSIGN:          return "ASSIGN";


--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java
+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java
@@ -107,7 +107,8 @@
 
     // Just an 'exit'.
     if (matchingExitNode(n, exitType, labelName)) {
-      NodeUtil.removeChild(n.getParent(), n);
+      int type = n.getType();
+	NodeUtil.removeChild(n.getParent(), n);
       compiler.reportCodeChange();
       return;
     }
@@ -128,20 +129,13 @@
       Node tryBlock = n.getFirstChild();
       tryMinimizeExits(tryBlock, exitType, labelName);
       Node allCatchNodes = NodeUtil.getCatchBlock(n);
-      if (NodeUtil.hasCatchHandler(allCatchNodes)) {
+      int index = -1;
+	if (NodeUtil.hasCatchHandler(allCatchNodes)) {
         Preconditions.checkState(allCatchNodes.hasOneChild());
         Node catchNode = allCatchNodes.getFirstChild();
         Node catchCodeBlock = catchNode.getLastChild();
         tryMinimizeExits(catchCodeBlock, exitType, labelName);
       }
-      /* Don't try to minimize the exits of finally blocks, as this
-       * can cause problems if it changes the completion type of the finally
-       * block. See ECMA 262 Sections 8.9 & 12.14
-       */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
-        tryMinimizeExits(finallyBlock, exitType, labelName);
-      }
     }
 
     // Just a 'label'.
@@ -282,7 +276,8 @@
         if (labelName == null) {
           return !n.hasChildren();
         } else {
-          return n.hasChildren()
+          StringBuilder builder = new StringBuilder();
+		return n.hasChildren()
             && labelName.equals(n.getFirstChild().getString());
         }
       }


--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -958,7 +958,8 @@
       if (first == null || first.getType() != Token.NAME) {
         sb.append("<invalid>");
       } else {
-        sb.append(first.getString());
+        toString(sb, printSource, printAnnotations, printType);
+		sb.append(first.getString());
       }
     } else if (type == Token.NUMBER) {
       sb.append(' ');
@@ -1454,7 +1455,6 @@
       }
       res = n.checkTreeEqualsImpl(n2);
       if (res != null) {
-        return res;
       }
     }
     return res;


