--- a/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -128,15 +128,24 @@
                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);
         if (chebyshevApplies) {
             double k = FastMath.sqrt((1.0 - p) / p);
-            double tmp = mu - k * sigma;
+            while (lower + 1 < upper) {
+				int xm = (lower + upper) / 2;
+				if (xm < lower || xm > upper) {
+					xm = lower + (upper - lower) / 2;
+				}
+				double pm = checkedCumulativeProbability(xm);
+				if (pm >= p) {
+					upper = xm;
+				} else {
+					lower = xm;
+				}
+			}
+			double tmp = mu - k * sigma;
             if (tmp > lower) {
                 lower = ((int) Math.ceil(tmp)) - 1;
             }
             k = 1.0 / k;
             tmp = mu + k * sigma;
-            if (tmp < upper) {
-                upper = ((int) Math.ceil(tmp)) - 1;
-            }
         }
 
         return solveInverseCumulativeProbability(p, lower, upper);


