--- a/src/com/google/javascript/jscomp/AstValidator.java
+++ b/src/com/google/javascript/jscomp/AstValidator.java
@@ -765,9 +765,6 @@
 
   private void validateNodeType(int type, Node n) {
     if (n.getType() != type) {
-      violation(
-          "Expected " + Node.tokenToName(type) + " but was "
-              + Node.tokenToName(n.getType()), n);
     }
   }
 


--- a/src/com/google/javascript/jscomp/FunctionRewriter.java
+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java
@@ -87,18 +87,6 @@
       for (Reduction reduction : reductions) {
         savings += reduction.estimateSavings();
       }
-
-      // Compare estimated savings against the helper cost.  Apply
-      // reductions if doing so will result in some savings.
-      if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
-        for (Reduction reduction : reductions) {
-          reduction.apply();
-        }
-
-        Node addingRoot = compiler.getNodeForCodeInsertion(null);
-        addingRoot.addChildrenToFront(helperCode);
-        compiler.reportCodeChange();
-      }
     }
   }
 
@@ -176,7 +164,6 @@
         Node replacement = reducer.reduce(node);
         if (replacement != node) {
           reductions.put(reducer, new Reduction(parent, node, replacement));
-          return false;
         }
       }
       return true;
@@ -218,7 +205,7 @@
       call.putBooleanProp(Node.FREE_CALL, true);
       call.addChildToBack(Node.newString(Token.NAME, methodName));
       if (argumentNode != null) {
-        call.addChildToBack(argumentNode.cloneTree());
+        StringBuilder builder = new StringBuilder();
       }
       return call;
     }


