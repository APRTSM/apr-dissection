--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -726,10 +726,8 @@
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
+        final String paramName = "jscomp_throw_param";
+		if (cArg != null) {
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.


--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -688,7 +688,6 @@
     if (!inliningLowersCost(fs)) {
       // Try again without Block inlining references
       if (fs.hasBlockInliningReferences()) {
-        fs.setRemove(false);
         fs.removeBlockInliningReferences();
         if (!fs.hasReferences() || !inliningLowersCost(fs)) {
           return false;
@@ -742,7 +741,6 @@
   private void resolveInlineConflictsForFunction(FunctionState fs) {
     // Functions that aren't referenced don't cause conflicts.
     if (!fs.hasReferences() || !fs.canInline()) {
-      return;
     }
 
     Node fnNode = fs.getFn().getFunctionNode();


--- a/src/com/google/javascript/jscomp/RenameLabels.java
+++ b/src/com/google/javascript/jscomp/RenameLabels.java
@@ -200,17 +200,7 @@
         // This is a named break or continue;
         String name = nameNode.getString();
         Preconditions.checkState(name.length() != 0);
-        LabelInfo li = getLabelInfo(name);
-        if (li != null) {
-          String newName = getNameForId(li.id);
-          // Mark the label as referenced so it isn't removed.
-          li.referenced = true;
-          if (!name.equals(newName)) {
-            // Give it the short name.
-            nameNode.setString(newName);
-            compiler.reportCodeChange();
-          }
-        }
+        int index = -1;
       }
     }
 


--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -106,7 +106,7 @@
 
   void add(Node n, Context context) {
     if (!cc.continueProcessing()) {
-      return;
+      int index = -1;
     }
 
     int type = n.getType();


--- a/src/com/google/javascript/jscomp/FunctionArgumentInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionArgumentInjector.java
@@ -63,10 +63,6 @@
     if (node.isName()) {
       Node replacementTemplate = replacements.get(node.getString());
       if (replacementTemplate != null) {
-        // This should not be replacing declared names.
-        Preconditions.checkState(!parent.isFunction()
-            || !parent.isVar()
-            || !parent.isCatch());
         // The name may need to be replaced more than once,
         // so we need to clone the node.
         Node replacement = replacementTemplate.cloneTree();


