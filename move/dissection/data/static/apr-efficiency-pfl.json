{
  "Math_85": [
    {
      "name": "Patch_1_1",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsjava\n+++ /tmp/Cardumen_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsjava\n@@ -195,7 +195,7 @@\n \t\t} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && \n \t\t((a > lowerBound) || (b < upperBound)) );\n \n-\t\tif ((fa * fb) >= 0.0) {\n+\t\tif (((b * b) > 0.0) && (maximumIterations < maximumIterations)) {\n \t\t\tthrow new org.apache.commons.math.ConvergenceException(\n \t\t\t(\"number of iterations={0}, maximum iterations={1}, \" + \n \t\t\t(\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + ",
      "correctness": "P",
      "id": "c0f9dcf28b4545f7a8dc1f3c519a8090"
    },
    {
      "name": "Patch_5_5",
      "contributor": "SimFix",
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..417355472 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,6 +195,12 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n+// start of generated patch\n+if(fa*upperBound>=0.0){\n+throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1}, \"+\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \",numIterations,maximumIterations,initial,lowerBound,upperBound,a,b,fa,fb);\n+}\n+// end of generated patch\n+/* start of original code\n         if (fa * fb >= 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n@@ -203,6 +209,7 @@ public class UnivariateRealSolverUtils {\n                       numIterations, maximumIterations, initial,\n                       lowerBound, upperBound, a, b, fa, fb);\n         }\n+ end of original code*/\n         \n         return new double[]{a, b};\n     }",
      "correctness": "P",
      "id": "f5a5749b3d124688b40c666479497288"
    },
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -197,9 +197,11 @@\n    \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+        if (false) {\n+            if (fa * fb >= 0.0 ) {\n+                throw new ConvergenceException(\n+                \"number of iterations={0}, maximum iterations={1}, \" +\n+                \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                numIterations, maximumIterations, initial,\n+                lowerBound, upperBound, a, b, fa, fb);\n+            }\n         }\n",
      "correctness": "P",
      "id": "fc0a6cbefa1645669e55cd3db7d0836c"
    },
    {
      "name": "Patch_21_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf..dc9479b 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,8 +195,7 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n+if (fa * fb >= 0.0 &&!(fa * fb==0.0)) {            throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                       \"final b value={6}, f(a)={7}, f(b)={8}\",",
      "correctness": "C",
      "id": "bb94612190b941bb96a0af08c93e574f"
    },
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2019-06-27 11:46:00.424383562 -0400\n+++ /tmp/Arja_Defects4J_Math_85/patches_cw89/Patch_1/patched/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2019-06-27 11:51:16.920489188 -0400\n@@ -195,15 +195,6 @@\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n-        }\n-        \n         return new double[]{a, b};\n     }\n \n\n\n",
      "correctness": "P",
      "id": "2b4b84effac549e4ba7f92daab42a50b"
    },
    {
      "name": "Patch_1_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf..e6398f6 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,7 +195,7 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (fa * fb > 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n",
      "correctness": "C",
      "id": "3185e7a8b63743c0a8de88fccf63d260"
    },
    {
      "name": "Patch_3_3",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsjava\n+++ /tmp/jMutRepair_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsjava\n@@ -195,7 +195,7 @@\n \t\t} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && \n \t\t((a > lowerBound) || (b < upperBound)) );\n \n-\t\tif ((fa * fb) >= 0.0) {\n+\t\tif ((fa * fb) > 0.0) {\n \t\t\tthrow new org.apache.commons.math.ConvergenceException(\n \t\t\t(\"number of iterations={0}, maximum iterations={1}, \" + \n \t\t\t(\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + ",
      "correctness": "C",
      "id": "f5212378b57d4133856a51f09bafe084"
    },
    {
      "name": "Patch_2_2",
      "contributor": "jKali",
      "diff": "--- /tmp/jKali_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsjava\n+++ /tmp/jKali_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsjava\n@@ -195,7 +195,7 @@\n \t\t} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && \n \t\t((a > lowerBound) || (b < upperBound)) );\n \n-\t\tif ((fa * fb) >= 0.0) {\n+\t\tif (false) {\n \t\t\tthrow new org.apache.commons.math.ConvergenceException(\n \t\t\t(\"number of iterations={0}, maximum iterations={1}, \" + \n \t\t\t(\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + ",
      "correctness": "P",
      "id": "705443f8bfdd48c5b169936d1cc11f58"
    },
    {
      "name": "Patch_1_1",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsjava\n+++ /tmp/jGenProg_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsjava\n@@ -195,14 +195,14 @@\n \t\t} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && \n \t\t((a > lowerBound) || (b < upperBound)) );\n \n-\t\tif ((fa * fb) >= 0.0) {\n-\t\t\tthrow new org.apache.commons.math.ConvergenceException(\n-\t\t\t(\"number of iterations={0}, maximum iterations={1}, \" + \n-\t\t\t(\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \n-\t\t\t\"final b value={6}, f(a)={7}, f(b)={8}\")), \n-\t\t\tnumIterations, maximumIterations, initial, \n-\t\t\tlowerBound, upperBound, a, b, fa, fb);\n-\t\t}\n+\n+\n+\n+\n+\n+\n+\n+\n \n \t\treturn new double[]{ a, b };\n \t}",
      "correctness": "P",
      "id": "879b4d7027c247928d5e57b22ac7cdbd"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf..e6398f6 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,7 +195,7 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (fa * fb > 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +",
      "correctness": "C",
      "id": "e3d44410ecd64af2b0cf3130c7ed8ad0"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -197,9 +197,9 @@\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (-1 == fb) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            \"number of iterations={0}, maximum iterations={1}, \" +\n+            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+            \"final b value={6}, f(a)={7}, f(b)={8}\",\n+            numIterations, maximumIterations, initial,\n+            lowerBound, upperBound, a, b, fa, fb);\n         }\n",
      "correctness": "P",
      "id": "a534544236b34e3b91e382de0d75aaab"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf..e6398f6 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,7 +195,7 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (fa * fb > 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +",
      "correctness": "C",
      "id": "175cf5c96e084f3e92c31debf2987970"
    },
    {
      "name": "Patch_5_5",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf..eca9540 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,7 +195,7 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+        if (fa * fb>0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +",
      "correctness": "C",
      "id": "f590f81aa9e14aa390f37220df9e8c99"
    },
    {
      "name": "Patch_3_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2019-07-11 19:59:30.505999704 -0400\n+++ /tmp/RSRepair_Defects4J_Math_85/patches_lewz/Patch_1/patched/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2019-07-11 20:02:53.398926022 -0400\n@@ -195,15 +195,6 @@\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n-        }\n-        \n         return new double[]{a, b};\n     }\n \n\n\n",
      "correctness": "P",
      "id": "e14a5f1e8c4c4295918aeb6209367bb9"
    },
    {
      "name": "Patch_2_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Math_85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2019-07-09 00:56:28.347533953 -0400\n+++ /tmp/GenProg_Defects4J_Math_85/patches_perx/Patch_1/patched/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\t2019-07-09 01:01:52.964215293 -0400\n@@ -195,14 +195,11 @@\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n-        }\n+        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+\t\t\tthrow MathRuntimeException.createIllegalArgumentException(\n+\t\t\t\t\t\"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\", lowerBound,\n+\t\t\t\t\tinitial, upperBound);\n+\t\t}\n         \n         return new double[]{a, b};\n     }\n\n\n",
      "correctness": "P",
      "id": "7680f7c86c54414f99bd5d5ecf9a91dd"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "25a4555d11ab47988513cb439fc55c78"
    }
  ],
  "Chart_11": [
    {
      "name": "Patch_1_1",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Chart_11/source/org/jfree/chart/util/ShapeUtilitiesjava\n+++ /tmp/Cardumen_Defects4J_Chart_11/source/org/jfree/chart/util/ShapeUtilitiesjava\n@@ -272,7 +272,7 @@\n \t\t\treturn false;\n \t\t}\n \t\tjava.awt.geom.PathIterator iterator1 = p1.getPathIterator(null);\n-\t\tjava.awt.geom.PathIterator iterator2 = p1.getPathIterator(null);\n+\t\tjava.awt.geom.PathIterator iterator2 = p2.getPathIterator(null);\n \t\tdouble[] d1 = new double[6];\n \t\tdouble[] d2 = new double[6];\n \t\tboolean done = (iterator1.isDone()) && (iterator2.isDone());",
      "correctness": "C",
      "id": "360f44890c3348218305e23fb5f18988"
    },
    {
      "name": "Patch_3_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex 31aa6c6..f49ecb5 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,7 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p1.getPathIterator(null);\n+        PathIterator iterator2 = p2.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();\n",
      "correctness": "C",
      "id": "21bbd7047d6e4d97a4b81d3309287f68"
    },
    {
      "name": "Patch_11_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex 31aa6c6..f49ecb5 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,7 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p1.getPathIterator(null);\n+        PathIterator iterator2 = p2.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();",
      "correctness": "C",
      "id": "1ffa84c6716e4528a47a45577c05defa"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex 31aa6c6..f49ecb5 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,7 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p1.getPathIterator(null);\n+        PathIterator iterator2 = p2.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();",
      "correctness": "C",
      "id": "23c61f41cf0642939aecd826d2581e02"
    }
  ],
  "Math_95": [
    {
      "name": "Patch_1_1",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpljava\n+++ /tmp/Cardumen_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpljava\n@@ -144,7 +144,7 @@\n \t\tdouble ret;\n \t\tdouble d = getDenominatorDegreesOfFreedom();\n \n-\t\tret = d / (d - 2.0);\n+\t\tret = p + (p * p);\n \t\treturn ret;\n \t}",
      "correctness": "P",
      "id": "be3fee36f213403abc4fc6647af2acfd"
    },
    {
      "name": "Patch_25_18",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2019-06-27 15:00:17.375598914 -0400\n+++ /tmp/Arja_Defects4J_Math_95/patches_x287/Patch_18/patched/org/apache/commons/math/distribution/FDistributionImpl.java\t2019-06-27 15:03:46.410310536 -0400\n@@ -143,8 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n+            ret = 0.5;\n         return ret;\n     }\n     \n\n\n",
      "correctness": "P",
      "id": "9b34dc7c0f6349d1a5aa28b822ca3300"
    },
    {
      "name": "Patch_21_8",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpljava\n+++ /tmp/jGenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpljava\n@@ -142,9 +142,9 @@\n \n \tprotected double getInitialDomain(double p) {\n \t\tdouble ret;\n-\t\tdouble d = getDenominatorDegreesOfFreedom();\n+\t\tdouble d = getDenominatorDegreesOfFreedom(); \t\tret = 0.0;\n+\n \n-\t\tret = d / (d - 2.0);\n \t\treturn ret;\n \t}",
      "correctness": "P",
      "id": "bb023135e9684b9faef2f451b7e79a09"
    },
    {
      "name": "Patch_59_19",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97a..1d583f7 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -144,7 +144,7 @@ public class FDistributionImpl\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n-            ret = d / (d - 2.0);\n+            ret = d / (Double.MAX_VALUE - 2.0);\n         return ret;\n     }",
      "correctness": "P",
      "id": "be2ebdcbe6a64c5b9d8de563a0524d09"
    },
    {
      "name": "Patch_43_16",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97a..94ca2f0 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -144,7 +144,7 @@ public class FDistributionImpl\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n             // use mean\n-            ret = d / (d - 2.0);\n+            ret = d / (d + 2.0);\n         return ret;\n     }",
      "correctness": "P",
      "id": "9b02576cabd3462ab10f6575ead24177"
    },
    {
      "name": "Patch_20_5",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2019-07-11 23:27:16.456205830 -0400\n+++ /tmp/RSRepair_Defects4J_Math_95/patches_rklu/Patch_5/patched/org/apache/commons/math/distribution/FDistributionImpl.java\t2019-07-11 23:31:05.482797123 -0400\n@@ -143,8 +143,7 @@\n     protected double getInitialDomain(double p) {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n+            ret = 1.0;\n         return ret;\n     }\n     \n\n\n",
      "correctness": "P",
      "id": "97f8fb8763f14079a414aa77347726f6"
    },
    {
      "name": "Patch_1122_956",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Math_95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\t2019-07-09 08:00:26.104174318 -0400\n+++ /tmp/GenProg_Defects4J_Math_95/patches_3he6/Patch_956/patched/org/apache/commons/math/distribution/FDistributionImpl.java\t2019-07-09 08:10:23.942262604 -0400\n@@ -141,10 +141,15 @@\n      * @return initial domain value\n      */\n     protected double getInitialDomain(double p) {\n-        double ret;\n+        if (p == 0) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\tif (p == 0) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\tdouble ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n+            ret = 0.0;\n         return ret;\n     }\n     \n\n\n",
      "correctness": "P",
      "id": "d7877283d65a45f6be1b16e431ed5bb6"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "4af5463460db4e37bb4c229c031d0d7e"
    }
  ],
  "Chart_4": [
    {
      "name": "Patch_1_1",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Chart_4/source/org/jfree/chart/plot/XYPlotjava\n+++ /tmp/Cardumen_Defects4J_Chart_4/source/org/jfree/chart/plot/XYPlotjava\n@@ -4490,7 +4490,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\tjava.util.Collection c = r.getAnnotations();\n+\t\t\t\tjava.util.Collection c = java.util.Collections.unmodifiableCollection(annotations);\n \t\t\t\tjava.util.Iterator i = c.iterator();\n \t\t\t\twhile (i.hasNext()) {\n \t\t\t\t\torg.jfree.chart.annotations.XYAnnotation a = ((org.jfree.chart.annotations.XYAnnotation) (i.next()));",
      "correctness": "P",
      "id": "0efea34c046241479a420c0d42873dac"
    },
    {
      "name": "Patch_68_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex ec26162..20c0a47 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -4490,14 +4490,17 @@ public class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n                     }\n                 }\n                 \n-                    Collection c = r.getAnnotations();\n+                    if (r != null) {\n+\tCollection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n                         XYAnnotation a = (XYAnnotation) i.next();\n                         if (a instanceof XYAnnotationBoundsInfo) {\n                             includedAnnotations.add(a);\n                         }\n-                    }\n+                    }\n+}\n+\n             }\n         }\n",
      "correctness": "C",
      "id": "d53ab455eb7845f29dd49f5075d345e6"
    },
    {
      "name": "Patch_155_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex ec26162..68fe266 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -4490,14 +4490,17 @@ public class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n                     }\n                 }\n                 \n-                    Collection c = r.getAnnotations();\n+                    if (r != null) {\n+Collection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n                         XYAnnotation a = (XYAnnotation) i.next();\n                         if (a instanceof XYAnnotationBoundsInfo) {\n                             includedAnnotations.add(a);\n                         }\n-                    }\n+                    }\n+}\n+\n             }\n         }",
      "correctness": "C",
      "id": "8274a05c120241dfb87dbd0182ff4cdf"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex ec26162..20c0a47 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -4490,14 +4490,17 @@ public class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n                     }\n                 }\n                 \n-                    Collection c = r.getAnnotations();\n+                    if (r != null) {\n+\tCollection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n                         XYAnnotation a = (XYAnnotation) i.next();\n                         if (a instanceof XYAnnotationBoundsInfo) {\n                             includedAnnotations.add(a);\n                         }\n-                    }\n+                    }\n+}\n+\n             }\n         }",
      "correctness": "C",
      "id": "8aa836a25a1f43138f1c28a565e9d4d4"
    },
    {
      "name": "Patch_70_2",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex ec26162..1dd3ed6 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -4490,14 +4490,17 @@ public class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n                     }\n                 }\n                 \n-                    Collection c = r.getAnnotations();\n+                    if (r != null) {\n+\tCollection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n                         XYAnnotation a = (XYAnnotation) i.next();\n                         if (a instanceof XYAnnotationBoundsInfo) {\n                             includedAnnotations.add(a);\n                         }\n-                    }\n+                    }\n+\t}\n+\n             }\n         }",
      "correctness": "C",
      "id": "630c295f44304b85bd9e25f6131efa50"
    }
  ],
  "Math_73": [
    {
      "name": "Patch_42_42",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolverjava\n+++ /tmp/Cardumen_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolverjava\n@@ -135,7 +135,7 @@\n \n \n \n-\t\treturn solve(f, min, yMin, max, yMax, initial, yInitial);\n+\t\treturn solve(f, max, max);\n \n \t}",
      "correctness": "P",
      "id": "27a4d554c0e54d37a2af8318e5cfe555"
    },
    {
      "name": "Patch_4_4",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..1013b983c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -129,6 +129,13 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         }\n \n         // reduce interval if initial and max bracket the root\n+// start of generated patch\n+if(yInitial*yMax<0){\n+return solve(f,initial,yInitial,max,yMax,initial,yInitial);\n+}\n+return solve(f,min,initial);\n+// end of generated patch\n+/* start of original code\n         if (yInitial * yMax < 0) {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n@@ -136,6 +143,7 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n+ end of original code*/\n \n     }\n ",
      "correctness": "P",
      "id": "6fde22d313b1489fa0ae2c817d15b923"
    },
    {
      "name": "Patch_1_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5e..13af1aa 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -134,7 +134,7 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         }\n \n \n-        // full Brent algorithm starting with provided initial guess\n+if (initial>(double)0.0){throw new IllegalArgumentException();}        // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n     }",
      "correctness": "P",
      "id": "531d6f86061f4dd69180a74c9b6ab40c"
    },
    {
      "name": "Patch_2_2",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolverjava\n+++ /tmp/jGenProg_Defects4J_Math_73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolverjava\n@@ -131,11 +131,11 @@\n \n \t\tif ((yInitial * yMax) < 0) {\n \t\t\treturn solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-\t\t}\n+\t\t} \t\treturn solve(f, min, max);\n+\n \n \n \n-\t\treturn solve(f, min, yMin, max, yMax, initial, yInitial);\n \n \t}",
      "correctness": "P",
      "id": "94a4fd7b65844c1ebf301443f5e2e717"
    }
  ],
  "Math_63": [
    {
      "name": "Patch_3_3",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtilsjava\n+++ /tmp/Cardumen_Defects4J_Math_63/src/main/java/org/apache/commons/math/util/MathUtilsjava\n@@ -414,8 +414,7 @@\n \n \n \tpublic static boolean equals(double x, double y) {\n-\t\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);\n-\t}\n+\t\treturn (\n \n \n \n@@ -425,9 +424,6 @@\n \n \n \n-\tpublic static boolean equalsIncludingNaN(double x, double y) {\n-\t\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));\n-\t}\n \n \n \n@@ -438,9 +434,6 @@\n \n \n \n-\tpublic static boolean equals(double x, double y, double eps) {\n-\t\treturn (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);\n-\t}\n \n \n \n@@ -452,9 +445,6 @@\n \n \n \n-\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) {\n-\t\treturn (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);\n-\t}\n \n \n \n@@ -473,26 +463,13 @@\n \n \n \n-\tpublic static boolean equals(double x, double y, int maxUlps) {\n \n \n-\t\tassert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));\n \n-\t\tlong xInt = java.lang.Double.doubleToLongBits(x);\n-\t\tlong yInt = java.lang.Double.doubleToLongBits(y);\n \n \n-\t\tif (xInt < 0) {\n-\t\t\txInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;\n-\t\t}\n-\t\tif (yInt < 0) {\n-\t\t\tyInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;\n-\t\t}\n \n-\t\tfinal boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;\n \n-\t\treturn (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));\n-\t}\n \n \n \n@@ -505,9 +482,6 @@\n \n \n \n-\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) {\n-\t\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));\n-\t}\n \n \n \n@@ -519,20 +493,6 @@\n \n \n \n-\tpublic static boolean equals(double[] x, double[] y) {\n-\t\tif ((x == null) || (y == null)) {\n-\t\t\treturn !((x == null) ^ (y == null));\n-\t\t}\n-\t\tif ((x.length) != (y.length)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tfor (int i = 0; i < (x.length); ++i) {\n-\t\t\tif (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\treturn true;\n-\t}\n \n \n \n@@ -544,20 +504,6 @@\n \n \n \n-\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) {\n-\t\tif ((x == null) || (y == null)) {\n-\t\t\treturn !((x == null) ^ (y == null));\n-\t\t}\n-\t\tif ((x.length) != (y.length)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tfor (int i = 0; i < (x.length); ++i) {\n-\t\t\tif (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\treturn true;\n-\t}\n \n \n \n@@ -581,18 +527,6 @@\n \n \n \n-\tpublic static long factorial(final int n) {\n-\t\tif (n < 0) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \n-\t\t\tn);\n-\t\t}\n-\t\tif (n > 20) {\n-\t\t\tthrow new java.lang.ArithmeticException(\n-\t\t\t\"factorial value is too large to fit in a long\");\n-\t\t}\n-\t\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];\n-\t}\n \n \n \n@@ -614,17 +548,6 @@\n \n \n \n-\tpublic static double factorialDouble(final int n) {\n-\t\tif (n < 0) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \n-\t\t\tn);\n-\t\t}\n-\t\tif (n < 21) {\n-\t\t\treturn org.apache.commons.math.util.MathUtils.factorial(n);\n-\t\t}\n-\t\treturn org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));\n-\t}\n \n \n \n@@ -639,21 +562,6 @@\n \n \n \n-\tpublic static double factorialLog(final int n) {\n-\t\tif (n < 0) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \n-\t\t\tn);\n-\t\t}\n-\t\tif (n < 21) {\n-\t\t\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));\n-\t\t}\n-\t\tdouble logSum = 0;\n-\t\tfor (int i = 2; i <= n; i++) {\n-\t\t\tlogSum += org.apache.commons.math.util.FastMath.log(i);\n-\t\t}\n-\t\treturn logSum;\n-\t}\n \n \n \n@@ -684,65 +592,23 @@\n \n \n \n-\tpublic static int gcd(final int p, final int q) {\n-\t\tint u = p;\n-\t\tint v = q;\n-\t\tif ((u == 0) || (v == 0)) {\n-\t\t\tif ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {\n-\t\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\n-\t\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \n-\t\t\t\tp, q);\n-\t\t\t}\n-\t\t\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));\n-\t\t}\n \n \n \n \n \n-\t\tif (u > 0) {\n-\t\t\tu = -u;\n-\t\t}\n-\t\tif (v > 0) {\n-\t\t\tv = -v;\n-\t\t}\n \n-\t\tint k = 0;\n-\t\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\n \n-\t\t\tu /= 2;\n-\t\t\tv /= 2;\n-\t\t\tk++;\n-\t\t} \n-\t\tif (k == 31) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \n-\t\t\tp, q);\n-\t\t}\n \n \n-\t\tint t = ((u & 1) == 1) ? v : -(u / 2);\n \n \n-\t\tdo {\n \n \n-\t\t\twhile ((t & 1) == 0) {\n-\t\t\t\tt /= 2;\n-\t\t\t} \n \n-\t\t\tif (t > 0) {\n-\t\t\t\tu = -t;\n-\t\t\t}else {\n-\t\t\t\tv = t;\n-\t\t\t}\n \n-\t\t\tt = (v - u) / 2;\n \n \n-\t\t} while (t != 0 );\n-\t\treturn (-u) * (1 << k);\n-\t}\n \n \n \n@@ -773,65 +639,23 @@\n \n \n \n-\tpublic static long gcd(final long p, final long q) {\n-\t\tlong u = p;\n-\t\tlong v = q;\n-\t\tif ((u == 0) || (v == 0)) {\n-\t\t\tif ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {\n-\t\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\n-\t\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \n-\t\t\t\tp, q);\n-\t\t\t}\n-\t\t\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));\n-\t\t}\n \n \n \n \n \n-\t\tif (u > 0) {\n-\t\t\tu = -u;\n-\t\t}\n-\t\tif (v > 0) {\n-\t\t\tv = -v;\n-\t\t}\n \n-\t\tint k = 0;\n-\t\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {\n \n-\t\t\tu /= 2;\n-\t\t\tv /= 2;\n-\t\t\tk++;\n-\t\t} \n-\t\tif (k == 63) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \n-\t\t\tp, q);\n-\t\t}\n \n \n-\t\tlong t = ((u & 1) == 1) ? v : -(u / 2);\n \n \n-\t\tdo {\n \n \n-\t\t\twhile ((t & 1) == 0) {\n-\t\t\t\tt /= 2;\n-\t\t\t} \n \n-\t\t\tif (t > 0) {\n-\t\t\t\tu = -t;\n-\t\t\t}else {\n-\t\t\t\tv = t;\n-\t\t\t}\n \n-\t\t\tt = (v - u) / 2;\n \n \n-\t\t} while (t != 0 );\n-\t\treturn (-u) * (1L << k);\n-\t}\n \n \n \n@@ -839,9 +663,6 @@\n \n \n \n-\tpublic static int hash(double value) {\n-\t\treturn new java.lang.Double(value).hashCode();\n-\t}\n \n \n \n@@ -850,9 +671,6 @@\n \n \n \n-\tpublic static int hash(double[] value) {\n-\t\treturn java.util.Arrays.hashCode(value);\n-\t}\n \n \n \n@@ -861,9 +679,6 @@\n \n \n \n-\tpublic static byte indicator(final byte x) {\n-\t\treturn x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\n-\t}\n \n \n \n@@ -873,12 +688,6 @@\n \n \n \n-\tpublic static double indicator(final double x) {\n-\t\tif (java.lang.Double.isNaN(x)) {\n-\t\t\treturn java.lang.Double.NaN;\n-\t\t}\n-\t\treturn x >= 0.0 ? 1.0 : -1.0;\n-\t}\n \n \n \n@@ -887,12 +696,6 @@\n \n \n \n-\tpublic static float indicator(final float x) {\n-\t\tif (java.lang.Float.isNaN(x)) {\n-\t\t\treturn java.lang.Float.NaN;\n-\t\t}\n-\t\treturn x >= 0.0F ? 1.0F : -1.0F;\n-\t}\n \n \n \n@@ -900,9 +703,6 @@\n \n \n \n-\tpublic static int indicator(final int x) {\n-\t\treturn x >= 0 ? 1 : -1;\n-\t}\n \n \n \n@@ -910,9 +710,6 @@\n \n \n \n-\tpublic static long indicator(final long x) {\n-\t\treturn x >= 0L ? 1L : -1L;\n-\t}\n \n \n \n@@ -921,9 +718,6 @@\n \n \n \n-\tpublic static short indicator(final short x) {\n-\t\treturn x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\n-\t}\n \n \n \n@@ -948,18 +742,6 @@\n \n \n \n-\tpublic static int lcm(int a, int b) {\n-\t\tif ((a == 0) || (b == 0)) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));\n-\t\tif (lcm == (java.lang.Integer.MIN_VALUE)) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, \n-\t\t\ta, b);\n-\t\t}\n-\t\treturn lcm;\n-\t}\n \n \n \n@@ -983,18 +765,6 @@\n \n \n \n-\tpublic static long lcm(long a, long b) {\n-\t\tif ((a == 0) || (b == 0)) {\n-\t\t\treturn 0;\n-\t\t}\n-\t\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));\n-\t\tif (lcm == (java.lang.Long.MIN_VALUE)) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, \n-\t\t\ta, b);\n-\t\t}\n-\t\treturn lcm;\n-\t}\n \n \n \n@@ -1012,9 +782,6 @@\n \n \n \n-\tpublic static double log(double base, double x) {\n-\t\treturn (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));\n-\t}\n \n \n \n@@ -1026,13 +793,6 @@\n \n \n \n-\tpublic static int mulAndCheck(int x, int y) {\n-\t\tlong m = ((long) (x)) * ((long) (y));\n-\t\tif ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {\n-\t\t\tthrow new java.lang.ArithmeticException(\"overflow: mul\");\n-\t\t}\n-\t\treturn ((int) (m));\n-\t}\n \n \n \n@@ -1044,50 +804,16 @@\n \n \n \n-\tpublic static long mulAndCheck(long a, long b) {\n-\t\tlong ret;\n-\t\tjava.lang.String msg = \"overflow: multiply\";\n-\t\tif (a > b) {\n \n-\t\t\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);\n-\t\t}else {\n-\t\t\tif (a < 0) {\n-\t\t\t\tif (b < 0) {\n \n-\t\t\t\t\tif (a >= ((java.lang.Long.MAX_VALUE) / b)) {\n-\t\t\t\t\t\tret = a * b;\n-\t\t\t\t\t}else {\n-\t\t\t\t\t\tthrow new java.lang.ArithmeticException(msg);\n-\t\t\t\t\t}\n-\t\t\t\t}else \t\t\t\t\tif (b > 0) {\n \n-\t\t\t\t\t\tif (((java.lang.Long.MIN_VALUE) / b) <= a) {\n-\t\t\t\t\t\t\tret = a * b;\n-\t\t\t\t\t\t}else {\n-\t\t\t\t\t\t\tthrow new java.lang.ArithmeticException(msg);\n \n-\t\t\t\t\t\t}\n-\t\t\t\t\t}else {\n \n-\t\t\t\t\t\tret = 0;\n-\t\t\t\t\t}\n-\t\t\t}else \t\t\t\tif (a > 0) {\n \n \n \n \n-\t\t\t\t\tif (a <= ((java.lang.Long.MAX_VALUE) / b)) {\n-\t\t\t\t\t\tret = a * b;\n-\t\t\t\t\t}else {\n-\t\t\t\t\t\tthrow new java.lang.ArithmeticException(msg);\n-\t\t\t\t\t}\n-\t\t\t\t}else {\n \n-\t\t\t\t\tret = 0;\n-\t\t\t\t}\n-\t\t}\n-\t\treturn ret;\n-\t}\n \n \n \n@@ -1098,23 +824,13 @@\n \n \n \n-\tpublic static double scalb(final double d, final int scaleFactor) {\n \n \n-\t\tif (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {\n-\t\t\treturn d;\n-\t\t}\n \n \n-\t\tfinal long bits = java.lang.Double.doubleToLongBits(d);\n-\t\tfinal long exponent = bits & 9218868437227405312L;\n-\t\tfinal long rest = bits & -9218868437227405313L;\n \n \n-\t\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));\n-\t\treturn java.lang.Double.longBitsToDouble(newBits);\n \n-\t}\n \n \n \n@@ -1135,9 +851,6 @@\n \n \n \n-\tpublic static double normalizeAngle(double a, double center) {\n-\t\treturn a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));\n-\t}\n \n \n \n@@ -1160,40 +873,6 @@\n \n \n \n-\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws \n-\tjava.lang.ArithmeticException, java.lang.IllegalArgumentException {\n-\t\tif (java.lang.Double.isInfinite(normalizedSum)) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);\n-\t\t}\n-\t\tif (java.lang.Double.isNaN(normalizedSum)) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\n-\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);\n-\t\t}\n-\t\tdouble sum = 0.0;\n-\t\tfinal int len = values.length;\n-\t\tdouble[] out = new double[len];\n-\t\tfor (int i = 0; i < len; i++) {\n-\t\t\tif (java.lang.Double.isInfinite(values[i])) {\n-\t\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\n-\t\t\t\torg.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n-\t\t\t}\n-\t\t\tif (!(java.lang.Double.isNaN(values[i]))) {\n-\t\t\t\tsum += values[i];\n-\t\t\t}\n-\t\t}\n-\t\tif (sum == 0) {\n-\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n-\t\t}\n-\t\tfor (int i = 0; i < len; i++) {\n-\t\t\tif (java.lang.Double.isNaN(values[i])) {\n-\t\t\t\tout[i] = java.lang.Double.NaN;\n-\t\t\t}else {\n-\t\t\t\tout[i] = ((values[i]) * normalizedSum) / sum;\n-\t\t\t}\n-\t\t}\n-\t\treturn out;\n-\t}\n \n \n \n@@ -1204,9 +883,6 @@\n \n \n \n-\tpublic static double round(double x, int scale) {\n-\t\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\n-\t}\n \n \n \n@@ -1220,20 +896,7 @@\n \n \n \n-\tpublic static double round(double x, int scale, int roundingMethod) {\n-\t\ttry {\n-\t\t\treturn new java.math.BigDecimal(\n-\t\t\tjava.lang.Double.toString(x)).setScale(\n-\t\t\tscale, roundingMethod).doubleValue();\n \n-\t\t} catch (java.lang.NumberFormatException ex) {\n-\t\t\tif (java.lang.Double.isInfinite(x)) {\n-\t\t\t\treturn x;\n-\t\t\t}else {\n-\t\t\t\treturn java.lang.Double.NaN;\n-\t\t\t}\n-\t\t}\n-\t}\n \n \n \n@@ -1244,9 +907,6 @@\n \n \n \n-\tpublic static float round(float x, int scale) {\n-\t\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\n-\t}\n \n \n \n@@ -1260,11 +920,6 @@\n \n \n \n-\tpublic static float round(float x, int scale, int roundingMethod) {\n-\t\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x);\n-\t\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;\n-\t\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;\n-\t}\n \n \n \n@@ -1278,41 +933,386 @@\n \n \n \n-\tprivate static double roundUnscaled(double unscaled, double sign, \n-\tint roundingMethod) {\n-\t\tswitch (roundingMethod) {\n-\t\t\tcase java.math.BigDecimal.ROUND_CEILING :\n-\t\t\t\tif (sign == (-1)) {\n-\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n-\t\t\t\t}else {\n-\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase java.math.BigDecimal.ROUND_DOWN :\n-\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n-\t\t\t\tbreak;\n-\t\t\tcase java.math.BigDecimal.ROUND_FLOOR :\n-\t\t\t\tif (sign == (-1)) {\n-\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\n-\t\t\t\t}else {\n-\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \t\t\t\t{\n-\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);\n-\t\t\t\t\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\n-\t\t\t\t\tif (fraction > 0.5) {\n-\t\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n-\t\t\t\t\t}else {\n-\t\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \t\t\t\t{\n-\t\t\t\t\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\n-\t\t\t\t\tif (fraction > 0.5) {\n-\t\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\n-\t\t\t\t\t}else \t\t\t\t\t\tif (fraction < 0.5) {\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\t\t(x < 0.5) && (java.lang.Double.isNaN(y))) || (x == y);} \tpublic static boolean equalsIncludingNaN(double x, double y) { \t\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));} \tpublic static boolean equals(double x, double y, double eps) { \t\treturn (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} \tpublic static boolean equalsIncludingNaN(double x, double y, double eps) { \t\treturn (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} \tpublic static boolean equals(double x, double y, int maxUlps) { \t\tassert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP)); \t\tlong xInt = java.lang.Double.doubleToLongBits(x); \t\tlong yInt = java.lang.Double.doubleToLongBits(y); \t\tif (xInt < 0) { \t\t\txInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;} \t\tif (yInt < 0) { \t\t\tyInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;} \t\tfinal boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps; \t\treturn (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));} \tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) { \t\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));} \tpublic static boolean equals(double[] x, double[] y) { \t\tif ((x == null) || (y == null)) { \t\t\treturn !((x == null) ^ (y == null));} \t\tif ((x.length) != (y.length)) { \t\t\treturn false;} \t\tfor (int i = 0; i < (x.length); ++i) { \t\t\tif (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) { \t\t\t\treturn false;}} \t\treturn true;} \tpublic static boolean equalsIncludingNaN(double[] x, double[] y) { \t\tif ((x == null) || (y == null)) { \t\t\treturn !((x == null) ^ (y == null));} \t\tif ((x.length) != (y.length)) { \t\t\treturn false;} \t\tfor (int i = 0; i < (x.length); ++i) { \t\t\tif (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) { \t\t\t\treturn false;}} \t\treturn true;} \tpublic static long factorial(final int n) { \t\tif (n < 0) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \t\tif (n > 20) { \t\t\tthrow new java.lang.ArithmeticException(\"factorial value is too large to fit in a long\");} \t\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];} \tpublic static double factorialDouble(final int n) { \t\tif (n < 0) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \t\tif (n < 21) { \t\t\treturn org.apache.commons.math.util.MathUtils.factorial(n);} \t\treturn org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));} \tpublic static double factorialLog(final int n) { \t\tif (n < 0) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \t\tif (n < 21) { \t\t\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} \t\tdouble logSum = 0; \t\tfor (int i = 2; i <= n; i++) { \t\t\tlogSum += org.apache.commons.math.util.FastMath.log(i);} \t\treturn logSum;} \tpublic static int gcd(final int p, final int q) { \t\tint u = p; \t\tint v = q; \t\tif ((u == 0) || (v == 0)) { \t\t\tif ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { \t\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \t\t\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} \t\tif (u > 0) { \t\t\tu = -u;} \t\tif (v > 0) { \t\t\tv = -v;} \t\tint k = 0; \t\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { \t\t\tu /= 2; \t\t\tv /= 2; \t\t\tk++;} \t\tif (k == 31) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \t\tint t = ((u & 1) == 1) ? v : -(u / 2); \t\tdo { \t\t\twhile ((t & 1) == 0) { \t\t\t\tt /= 2;} \t\t\tif (t > 0) { \t\t\t\tu = -t;}else { \t\t\t\tv = t;} \t\t\tt = (v - u) / 2;} while (t != 0 ); \t\treturn (-u) * (1 << k);} \tpublic static long gcd(final long p, final long q) { \t\tlong u = p; \t\tlong v = q; \t\tif ((u == 0) || (v == 0)) { \t\t\tif ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) { \t\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \t\t\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} \t\tif (u > 0) { \t\t\tu = -u;} \t\tif (v > 0) { \t\t\tv = -v;} \t\tint k = 0; \t\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { \t\t\tu /= 2; \t\t\tv /= 2; \t\t\tk++;} \t\tif (k == 63) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \t\tlong t = ((u & 1) == 1) ? v : -(u / 2); \t\tdo { \t\t\twhile ((t & 1) == 0) { \t\t\t\tt /= 2;} \t\t\tif (t > 0) { \t\t\t\tu = -t;}else { \t\t\t\tv = t;} \t\t\tt = (v - u) / 2;} while (t != 0 ); \t\treturn (-u) * (1L << k);} \tpublic static int hash(double value) { \t\treturn new java.lang.Double(value).hashCode();} \tpublic static int hash(double[] value) { \t\treturn java.util.Arrays.hashCode(value);} \tpublic static byte indicator(final byte x) { \t\treturn x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} \tpublic static double indicator(final double x) { \t\tif (java.lang.Double.isNaN(x)) { \t\t\treturn java.lang.Double.NaN;} \t\treturn x >= 0.0 ? 1.0 : -1.0;} \tpublic static float indicator(final float x) { \t\tif (java.lang.Float.isNaN(x)) { \t\t\treturn java.lang.Float.NaN;} \t\treturn x >= 0.0F ? 1.0F : -1.0F;} \tpublic static int indicator(final int x) { \t\treturn x >= 0 ? 1 : -1;} \tpublic static long indicator(final long x) { \t\treturn x >= 0L ? 1L : -1L;} \tpublic static short indicator(final short x) { \t\treturn x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} \tpublic static int lcm(int a, int b) { \t\tif ((a == 0) || (b == 0)) { \t\t\treturn 0;} \t\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); \t\tif (lcm == (java.lang.Integer.MIN_VALUE)) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} \t\treturn lcm;} \tpublic static long lcm(long a, long b) { \t\tif ((a == 0) || (b == 0)) { \t\t\treturn 0;} \t\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); \t\tif (lcm == (java.lang.Long.MIN_VALUE)) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} \t\treturn lcm;} \tpublic static double log(double base, double x) { \t\treturn (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));} \tpublic static int mulAndCheck(int x, int y) { \t\tlong m = ((long) (x)) * ((long) (y)); \t\tif ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) { \t\t\tthrow new java.lang.ArithmeticException(\"overflow: mul\");} \t\treturn ((int) (m));} \tpublic static long mulAndCheck(long a, long b) { \t\tlong ret; \t\tjava.lang.String msg = \"overflow: multiply\"; \t\tif (a > b) { \t\t\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);}else { \t\t\tif (a < 0) { \t\t\t\tif (b < 0) { \t\t\t\t\tif (a >= ((java.lang.Long.MAX_VALUE) / b)) { \t\t\t\t\t\tret = a * b;}else { \t\t\t\t\t\tthrow new java.lang.ArithmeticException(msg);}}else \t\t\t\t\tif (b > 0) { \t\t\t\t\t\tif (((java.lang.Long.MIN_VALUE) / b) <= a) { \t\t\t\t\t\t\tret = a * b;}else { \t\t\t\t\t\t\tthrow new java.lang.ArithmeticException(msg);}}else { \t\t\t\t\t\tret = 0;}}else \t\t\t\tif (a > 0) { \t\t\t\t\tif (a <= ((java.lang.Long.MAX_VALUE) / b)) { \t\t\t\t\t\tret = a * b;}else { \t\t\t\t\t\tthrow new java.lang.ArithmeticException(msg);}}else { \t\t\t\t\tret = 0;}} \t\treturn ret;} \tpublic static double scalb(final double d, final int scaleFactor) { \t\tif (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) { \t\t\treturn d;} \t\tfinal long bits = java.lang.Double.doubleToLongBits(d); \t\tfinal long exponent = bits & 9218868437227405312L; \t\tfinal long rest = bits & -9218868437227405313L; \t\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); \t\treturn java.lang.Double.longBitsToDouble(newBits);} \tpublic static double normalizeAngle(double a, double center) { \t\treturn a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));} \tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { \t\tif (java.lang.Double.isInfinite(normalizedSum)) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} \t\tif (java.lang.Double.isNaN(normalizedSum)) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} \t\tdouble sum = 0.0; \t\tfinal int len = values.length; \t\tdouble[] out = new double[len]; \t\tfor (int i = 0; i < len; i++) { \t\t\tif (java.lang.Double.isInfinite(values[i])) { \t\t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} \t\t\tif (!(java.lang.Double.isNaN(values[i]))) { \t\t\t\tsum += values[i];}} \t\tif (sum == 0) { \t\t\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} \t\tfor (int i = 0; i < len; i++) { \t\t\tif (java.lang.Double.isNaN(values[i])) { \t\t\t\tout[i] = java.lang.Double.NaN;}else { \t\t\t\tout[i] = ((values[i]) * normalizedSum) / sum;}} \t\treturn out;} \tpublic static double round(double x, int scale) { \t\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \tpublic static double round(double x, int scale, int roundingMethod) { \t\ttry { \t\t\treturn new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { \t\t\tif (java.lang.Double.isInfinite(x)) { \t\t\t\treturn x;}else { \t\t\t\treturn java.lang.Double.NaN;}}} \tpublic static float round(float x, int scale) { \t\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \tpublic static float round(float x, int scale, int roundingMethod) { \t\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x); \t\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; \t\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;} \tprivate static double roundUnscaled(double unscaled, double sign, int roundingMethod) { \t\tswitch (roundingMethod) { \t\t\tcase java.math.BigDecimal.ROUND_CEILING : \t\t\t\tif (sign == (-1)) { \t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));}else { \t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} \t\t\t\tbreak; \t\t\tcase java.math.BigDecimal.ROUND_DOWN : \t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); \t\t\t\tbreak; \t\t\tcase java.math.BigDecimal.ROUND_FLOOR : \t\t\t\tif (sign == (-1)) { \t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));}else { \t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} \t\t\t\tbreak; \t\t\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \t\t\t\t{ \t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); \t\t\t\t\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \t\t\t\t\tif (fraction > 0.5) { \t\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { \t\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \t\t\t\t\tbreak;} \t\t\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \t\t\t\t{ \t\t\t\t\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \t\t\t\t\tif (fraction > 0.5) { \t\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else \t\t\t\t\t\tif (fraction < 0.5) {\n \t\t\t\t\t\t\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\n \t\t\t\t\t\t}else {",
      "correctness": "P",
      "id": "8ff29be2eeac4b09b9c40ba87469251d"
    },
    {
      "name": "Patch_28_28",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..fc1233615 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -414,7 +414,12 @@ public final class MathUtils {\n      * @return {@code true} if the values are equal.\n      */\n     public static boolean equals(double x, double y) {\n+// start of generated patch\n+return equals(x,y,1)||FastMath.abs(y-x)<=SAFE_MIN;\n+// end of generated patch\n+/* start of original code\n         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+ end of original code*/\n     }\n \n     /**",
      "correctness": "P",
      "id": "13b397d125594f8184d9f4858e5d91a3"
    },
    {
      "name": "Patch_3_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 1361849..e9b9ae5 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -414,7 +414,7 @@ public final class MathUtils {\n      * @return {@code true} if the values are equal.\n      */\n     public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+        return (Double.isNaN(EPSILON) && Double.isNaN(y)) || x == y;\n     }\n \n     /**",
      "correctness": "P",
      "id": "1a150489ec5f469aba68a92fc19a2318"
    },
    {
      "name": "Patch_3_3",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 1361849..84fbcca 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -414,7 +414,7 @@ public final class MathUtils {\n      * @return {@code true} if the values are equal.\n      */\n     public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+        return x == y;\n     }\n \n     /**",
      "correctness": "P",
      "id": "d068836eca574aeab493a31a2d642d35"
    }
  ],
  "Chart_1": [
    {
      "name": "Patch_2_2",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRendererjava\n+++ /tmp/Cardumen_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRendererjava\n@@ -1794,7 +1794,7 @@\n \t\t}\n \t\tint index = this.plot.getIndexOf(this);\n \t\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\n-\t\tif (dataset != null) {\n+\t\tif ((baseToolTipGenerator) instanceof org.jfree.chart.util.PublicCloneable) {\n \t\t\treturn result;\n \t\t}\n \t\tint seriesCount = dataset.getRowCount();",
      "correctness": "P",
      "id": "9df357fb7db841608e23cc9bc9cf82f2"
    },
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\nindex 226b25a..271ff12 100644\n--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1794,9 +1794,16 @@ public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n+// start of generated patch\n+if(dataset==null){\n+return result;\n+}\n+// end of generated patch\n+/* start of original code\n         if (dataset != null) {\n             return result;\n         }\n+end of original code*/\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {",
      "correctness": "C",
      "id": "e5dcbe2ecd204c4b8a6ac8aa7f270edb"
    },
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1796,4 +1796,6 @@\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n-            return result;\n+        if (false) {\n+            if (dataset != null) {\n+                return result;\n+            }\n         }",
      "correctness": "P",
      "id": "b589e1d60fff4fa5aec25121a19c2142"
    },
    {
      "name": "Patch_2_2",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2019-06-25 06:12:47.660276446 -0400\n+++ /tmp/Arja_Defects4J_Chart_1/patches_oczu/Patch_2/patched/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2019-06-25 06:17:07.762225825 -0400\n@@ -1794,9 +1794,6 @@\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n-            return result;\n-        }\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {\n\n\n",
      "correctness": "P",
      "id": "5282408a238f453e832a95ce01992c43"
    },
    {
      "name": "Patch_1_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\nindex 226b25a..4a54655 100644\n--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1794,7 +1794,7 @@ public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n+        if (dataset == null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();\n",
      "correctness": "C",
      "id": "8af9308f08984cb9b298c7c14557ac9a"
    },
    {
      "name": "Patch_1_1",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRendererjava\n+++ /tmp/jMutRepair_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRendererjava\n@@ -1794,7 +1794,7 @@\n \t\t}\n \t\tint index = this.plot.getIndexOf(this);\n \t\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\n-\t\tif (dataset != null) {\n+\t\tif (dataset == null) {\n \t\t\treturn result;\n \t\t}\n \t\tint seriesCount = dataset.getRowCount();",
      "correctness": "C",
      "id": "3d6a903b9b9c4fc8a21bd1affe7006e1"
    },
    {
      "name": "Patch_2_2",
      "contributor": "jKali",
      "diff": "--- /tmp/jKali_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRendererjava\n+++ /tmp/jKali_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRendererjava\n@@ -1794,7 +1794,7 @@\n \t\t}\n \t\tint index = this.plot.getIndexOf(this);\n \t\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\n-\t\tif (dataset != null) {\n+\t\tif (false) {\n \t\t\treturn result;\n \t\t}\n \t\tint seriesCount = dataset.getRowCount();",
      "correctness": "P",
      "id": "65c6eb03a526420ca67228a851de7655"
    },
    {
      "name": "Patch_1_1",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRendererjava\n+++ /tmp/jGenProg_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRendererjava\n@@ -1794,9 +1794,9 @@\n \t\t}\n \t\tint index = this.plot.getIndexOf(this);\n \t\torg.jfree.data.category.CategoryDataset dataset = this.plot.getDataset(index);\n-\t\tif (dataset != null) {\n-\t\t\treturn result;\n-\t\t}\n+\n+\n+\n \t\tint seriesCount = dataset.getRowCount();\n \t\tif (plot.getRowRenderingOrder().equals(org.jfree.chart.util.SortOrder.ASCENDING)) {\n \t\t\tfor (int i = 0; i < seriesCount; i++) {",
      "correctness": "P",
      "id": "8734655ce94b4fe2a0312f0635ad6626"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\nindex 226b25a..4a54655 100644\n--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1794,7 +1794,7 @@ public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n+        if (dataset == null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();",
      "correctness": "C",
      "id": "8a9a6cdfd4dd4646a64b77f182f4c5c5"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\nindex 226b25a..4a54655 100644\n--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1794,7 +1794,7 @@ public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n+        if (dataset == null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();",
      "correctness": "C",
      "id": "0da1ae51eb0246de93d5528f87616872"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\nindex 226b25a..4a54655 100644\n--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1794,7 +1794,7 @@ public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n+        if (dataset == null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();",
      "correctness": "C",
      "id": "aff54157d60744709a87811cfa7ec553"
    },
    {
      "name": "Patch_2_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2019-06-28 07:37:34.207809383 -0400\n+++ /tmp/RSRepair_Defects4J_Chart_1/patches_ljii/Patch_1/patched/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2019-06-28 07:45:59.258360959 -0400\n@@ -1794,9 +1794,6 @@\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n-            return result;\n-        }\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {\n\n\n",
      "correctness": "P",
      "id": "574a1432ff5540daa9c7f680fce61234"
    },
    {
      "name": "Patch_1_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Chart_1/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2019-06-25 06:25:04.274070235 -0400\n+++ /tmp/GenProg_Defects4J_Chart_1/patches_95wt/Patch_1/patched/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\t2019-06-25 06:33:56.778556107 -0400\n@@ -1794,9 +1794,6 @@\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset != null) {\n-            return result;\n-        }\n         int seriesCount = dataset.getRowCount();\n         if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n             for (int i = 0; i < seriesCount; i++) {\n\n\n",
      "correctness": "P",
      "id": "49d6ea1749a640a4ba879035ba5a901d"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "36379aeeec4e418b84b0ef149ac74f50"
    }
  ],
  "Math_50": [
    {
      "name": "Patch_3_3",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverjava\n+++ /tmp/Cardumen_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverjava\n@@ -185,7 +185,7 @@\n \t\t\t\t\tcase REGULA_FALSI :\n \n \t\t\t\t\t\tif (x == x1) {\n-\t\t\t\t\t\t\tx0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)));\n+\t\t\t\t\t\t\tx0 = getMax();\n \t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak;",
      "correctness": "P",
      "id": "3f1a3a76163c42c8b10fdcf96336cd1e"
    },
    {
      "name": "Patch_18_18",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..fa4d85e34 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,18 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n+// start of generated patch\n+if(x==x0){\n+x0=0.5*(x0+x1-FastMath.max(rtol*FastMath.abs(x1),atol));\n+f0=computeObjectiveValue(x0);\n+}\n+// end of generated patch\n+/* start of original code\n                     if (x == x1) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n+ end of original code*/\n                     break;\n                 default:\n                     // Should never happen.",
      "correctness": "P",
      "id": "e5ebd9415f32448ca3c2ffdb0f4a2a8b"
    },
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -187,3 +187,5 @@\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        if (false) {\n+                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        }\n                         f0 = computeObjectiveValue(x0);\n",
      "correctness": "C",
      "id": "ddc6681a9024486982bf5e7d99e2414c"
    },
    {
      "name": "Patch_3_3",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2019-08-03 23:22:21.314706365 -0400\n+++ /tmp/Arja_Defects4J_Math_50/patches_qmki/Patch_3/patched/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2019-08-04 00:19:03.060444399 -0400\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n",
      "correctness": "C",
      "id": "de9342774e894e6dbdf024754b79931f"
    },
    {
      "name": "Patch_2_2",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d982..82898f0 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,7 +184,7 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n+                    if (fx == x1) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n",
      "correctness": "P",
      "id": "2713f7e57fb24c62919a696030e915b3"
    },
    {
      "name": "Patch_3_3",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverjava\n+++ /tmp/jMutRepair_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverjava\n@@ -184,7 +184,7 @@\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase REGULA_FALSI :\n \n-\t\t\t\t\t\tif (x == x1) {\n+\t\t\t\t\t\tif (x > x1) {\n \t\t\t\t\t\t\tx0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)));\n \t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n \t\t\t\t\t\t}",
      "correctness": "P",
      "id": "6eed5132822143168f19579906a3ae3e"
    },
    {
      "name": "Patch_10_7",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverjava\n+++ /tmp/jGenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverjava\n@@ -184,10 +184,10 @@\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase REGULA_FALSI :\n \n-\t\t\t\t\t\tif (x == x1) {\n-\t\t\t\t\t\t\tx0 = 0.5 * ((x0 + x1) - (org.apache.commons.math.util.FastMath.max((rtol * (org.apache.commons.math.util.FastMath.abs(x1))), atol)));\n+\t\t\t\t\t\tif (x == x1)\n+\n \t\t\t\t\t\t\tf0 = computeObjectiveValue(x0);\n-\t\t\t\t\t\t}\n+\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tdefault :",
      "correctness": "C",
      "id": "a603a8fa74e047f3ae8e3b81915c4737"
    },
    {
      "name": "Patch_2_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..82898f00c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,7 +184,7 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n+                    if (fx == x1) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }",
      "correctness": "P",
      "id": "e9586093e50e485f9397cb52f931c243"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,5 +186,7 @@\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                    if (-1 == 0) {\n+                        if (x == x1) {\n+                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                            f0 = computeObjectiveValue(x0);\n+                        }\n                     }\n",
      "correctness": "C",
      "id": "84ec68fc2e0e4090bf33ad4222bceb56"
    },
    {
      "name": "Patch_2_2",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d982..b6dba35 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,7 +184,7 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n+                    if ((f1 == 0.0)) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }",
      "correctness": "P",
      "id": "8f38e88b209a420a966d93774603f57a"
    },
    {
      "name": "Patch_4_4",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d982..79484a7 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,7 +184,7 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n+                    if (x>x1) {\n                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }",
      "correctness": "P",
      "id": "93a353ceebd24d62abccec657cd50b36"
    },
    {
      "name": "Patch_2_2",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2019-08-04 13:12:55.404167814 -0400\n+++ /tmp/RSRepair_Defects4J_Math_50/patches_y0o8/Patch_2/patched/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2019-08-04 13:42:44.825082073 -0400\n@@ -183,11 +183,7 @@\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+                    ;\n                     break;\n                 default:\n                     // Should never happen.\n\n\n",
      "correctness": "C",
      "id": "c1fd0240bd644c0ab9e862b585ebb2d8"
    },
    {
      "name": "Patch_2_2",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Math_50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2019-08-04 02:07:05.419756394 -0400\n+++ /tmp/GenProg_Defects4J_Math_50/patches_tths/Patch_2/patched/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\t2019-08-04 02:50:28.045086138 -0400\n@@ -185,7 +185,6 @@\n                 case REGULA_FALSI:\n                     // Nothing.\n                     if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                         f0 = computeObjectiveValue(x0);\n                     }\n                     break;\n\n\n",
      "correctness": "C",
      "id": "f9bc8ca70e36480893d9a0139d0c9c60"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "C",
      "id": "d20c59334b864df09af456d8b57d5e67"
    }
  ],
  "Math_80": [
    {
      "name": "Patch_1_1",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava\n+++ /tmp/Cardumen_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava\n@@ -1132,19 +1132,7 @@\n \tprivate boolean flipIfWarranted(final int n, final int step) {\n \t\tif ((1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])) {\n \n-\t\t\tint j = (4 * n) - 1;\n-\t\t\tfor (int i = 0; i < j; i += 4) {\n-\t\t\t\tfor (int k = 0; k < 4; k += step) {\n-\t\t\t\t\tfinal double tmp = work[(i + k)];\n-\t\t\t\t\twork[(i + k)] = work[(j - k)];\n-\t\t\t\t\twork[(j - k)] = tmp;\n-\t\t\t\t}\n-\t\t\t\tj -= 4;\n-\t\t\t}\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn false;\n-\t}\n+\t\t\tint j = \n \n \n \n@@ -1152,11 +1140,23 @@\n \n \n \n-\tprivate double[] eigenvaluesRange(final int index, final int n) {\n \n \n-\t\tfinal int lowerStart = 4 * (main.length);\n-\t\tfinal int upperStart = 5 * (main.length);\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\t\t\t5 * (pingPong); \t\t\tfor (int i = 0; i < j; i += 4) { \t\t\t\tfor (int k = 0; k < 4; k += step) { \t\t\t\t\tfinal double tmp = work[(i + k)]; \t\t\t\t\twork[(i + k)] = work[(j - k)]; \t\t\t\t\twork[(j - k)] = tmp;} \t\t\t\tj -= 4;} \t\t\treturn true;} \t\treturn false;} \tprivate double[] eigenvaluesRange(final int index, final int n) { \t\tfinal int lowerStart = 4 * (main.length); \t\tfinal int upperStart = 5 * (main.length);\n \t\tdouble lower = java.lang.Double.POSITIVE_INFINITY;\n \t\tdouble upper = java.lang.Double.NEGATIVE_INFINITY;\n \t\tfor (int i = 0; i < n; ++i) {",
      "correctness": "P",
      "id": "ddd9fb397607471a8bfba771a4a7f0ee"
    },
    {
      "name": "Patch_6_6",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d8b..81fc381e4 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1134,11 +1134,20 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n+// start of generated patch\n+for(int k=0;k<0;k+=step){\n+ final double tmp=work[i+k];\n+work[i+k]=work[j-k];\n+work[j-k]=tmp;\n+}\n+// end of generated patch\n+/* start of original code\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n                     work[i + k] = work[j - k];\n                     work[j - k] = tmp;\n                 }\n+ end of original code*/\n                 j -= 4;\n             }\n             return true;",
      "correctness": "P",
      "id": "13202aebfa0e456ba64f1d0ba2bde96d"
    },
    {
      "name": "Patch_15_2",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d..e316bf1 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1132,7 +1132,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n-            int j = 4 * n - 1;\n+            int j = 4 * this.pingPong - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n",
      "correctness": "P",
      "id": "09b66759741b4ac68b68d3edc00a9188"
    },
    {
      "name": "Patch_51_24",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d..edeeead 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1132,7 +1132,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n-            int j = 4 * n - 1;\n+            int j = 0 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];",
      "correctness": "P",
      "id": "defe219b3f1a449180bd044c52bd6bfb"
    },
    {
      "name": "Patch_7_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d..e316bf1 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1132,7 +1132,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n-            int j = 4 * n - 1;\n+            int j = 4 * this.pingPong - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];",
      "correctness": "P",
      "id": "9f0d6a9d15d5454290e5b037a4196efe"
    },
    {
      "name": "Patch_353_69",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 16:04:02.177413358 -0400\n+++ /tmp/RSRepair_Defects4J_Math_80/patches_g9t2/Patch_69/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 16:10:51.121622298 -0400\n@@ -1131,7 +1131,12 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n+            for (int i = 0; i < realEigenvalues.length; ++i) {\n+\t\t\t\tif ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n\n\n",
      "correctness": "P",
      "id": "bb74d1417ebb402aaf5b2c385c919468"
    },
    {
      "name": "Patch_1644_339",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 05:00:46.033080540 -0400\n+++ /tmp/GenProg_Defects4J_Math_80/patches_7gj8/Patch_339/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 05:16:08.553551878 -0400\n@@ -1131,7 +1131,12 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n+            for (int i = 0; i < realEigenvalues.length; ++i) {\n+\t\t\t\tif ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n\n\n",
      "correctness": "P",
      "id": "3dbab0386556489795ea41cdecb0a13b"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "49a2ac8cecfd45e8b5ba517dfb320948"
    }
  ],
  "Math_70": [
    {
      "name": "Patch_7_7",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolverjava\n+++ /tmp/Cardumen_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolverjava\n@@ -69,7 +69,7 @@\n \n \tpublic double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double min, double max, double initial) throws \n \torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {\n-\t\treturn solve(min, max);\n+\t\treturn solve(f, min, max);\n \t}",
      "correctness": "C",
      "id": "91e54ec71a7847aca2e9b8936c61c0d0"
    },
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..aec077fdb 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,12 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n+// start of generated patch\n+return solve(f,min,max);\n+// end of generated patch\n+/* start of original code\n         return solve(min, max);\n+ end of original code*/\n     }\n \n     /** {@inheritDoc} */",
      "correctness": "C",
      "id": "37701ab040af44839eeb8d3370f586c8"
    },
    {
      "name": "Patch_16_14",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2019-08-04 01:35:53.466799969 -0400\n+++ /tmp/Arja_Defects4J_Math_70/patches_hse3/Patch_14/patched/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2019-08-04 01:46:34.627127553 -0400\n@@ -69,7 +69,7 @@\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n\n\n",
      "correctness": "C",
      "id": "03dcd5505f364f2baeffc94bd2a03fb8"
    },
    {
      "name": "Patch_1_1",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolverjava\n+++ /tmp/jGenProg_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolverjava\n@@ -68,8 +68,8 @@\n \n \n \tpublic double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double min, double max, double initial) throws \n-\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {\n-\t\treturn solve(min, max);\n+\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException { \t\treturn solve(f, min, max);\n+\n \t}",
      "correctness": "C",
      "id": "7d275df0ba554300be3b30dc623a6a63"
    },
    {
      "name": "Patch_4_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f66927..180caef 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,7 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */",
      "correctness": "C",
      "id": "4a7fac4266bb438ea185286c932dcae3"
    },
    {
      "name": "Patch_16_16",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f66927..180caef 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,7 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */",
      "correctness": "C",
      "id": "35240ec9487a409fbf7f9c40e2f9437f"
    },
    {
      "name": "Patch_28_28",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f66927..180caef 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,7 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */",
      "correctness": "C",
      "id": "669ff17330994606949438cc27e36ee1"
    },
    {
      "name": "Patch_25_7",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2019-08-08 03:08:40.908059546 -0400\n+++ /tmp/RSRepair_Defects4J_Math_70/patches_oaw2/Patch_7/patched/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2019-08-08 03:17:16.508322978 -0400\n@@ -69,7 +69,7 @@\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n\n\n",
      "correctness": "C",
      "id": "61578f792aad4306b633f5cd486df6b0"
    },
    {
      "name": "Patch_39_7",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Math_70/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2019-08-04 02:50:34.597089486 -0400\n+++ /tmp/GenProg_Defects4J_Math_70/patches_si7p/Patch_7/patched/org/apache/commons/math/analysis/solvers/BisectionSolver.java\t2019-08-04 02:59:20.453358159 -0400\n@@ -69,7 +69,7 @@\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        return solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */\n\n\n",
      "correctness": "C",
      "id": "00be489bb7444f458c2393347627556b"
    }
  ],
  "Chart_9": [
    {
      "name": "Patch_79_65",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Chart_9/source/org/jfree/data/time/TimeSeriesjava\n+++ /tmp/Cardumen_Defects4J_Chart_9/source/org/jfree/data/time/TimeSeriesjava\n@@ -941,7 +941,7 @@\n \t\t\tendIndex = -(endIndex + 1);\n \t\t\tendIndex = endIndex - 1;\n \t\t}\n-\t\tif (endIndex < 0) {\n+\t\tif (endIndex < startIndex) {\n \t\t\temptyRange = true;\n \t\t}\n \t\tif (emptyRange) {",
      "correctness": "P",
      "id": "b3100cfed82d45d180c15decf0c1e0ce"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -943,3 +943,3 @@\n         }\n-        if (endIndex < 0) {\n+        if ((!((2) != (org.jfree.data.time.TimeSeries.this.data.size()))) || (endIndex < 0)) {\n             emptyRange = true;\n",
      "correctness": "P",
      "id": "a54cc1fcc41e420e85ea817e513766bf"
    },
    {
      "name": "Patch_11_11",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 4067e3e..a62e5fe 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -941,7 +941,7 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             endIndex = -(endIndex + 1); // this is first item AFTER end period\n             endIndex = endIndex - 1;    // so this is last item BEFORE end\n         }\n-        if (endIndex < 0) {\n+        if (endIndex < startIndex || (endIndex < 0)) {\n             emptyRange = true;\n         }\n         if (emptyRange) {",
      "correctness": "C",
      "id": "af5a10294c624a8d8dc47ea27a93b907"
    }
  ],
  "Math_28": [
    {
      "name": "Patch_7_5",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolverjava\n+++ /tmp/Cardumen_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolverjava\n@@ -117,7 +117,7 @@\n \n \n \t\t\t\tfor (java.lang.Integer row : minRatioPositions) {\n-\t\t\t\t\tfor (int i = 0; i < (tableau.getNumArtificialVariables()); i++) {\n+\t\t\t\t\tfor (int i = 0; i < (org.apache.commons.math3.util.Precision.compareTo(epsilon, 0.0, maxUlps)); i++) {\n \t\t\t\t\t\tint column = i + (tableau.getArtificialVariableOffset());\n \t\t\t\t\t\tfinal double entry = tableau.getEntry(row, column);\n \t\t\t\t\t\tif ((org.apache.commons.math3.util.Precision.equals(entry, 1.0, maxUlps)) && (row.equals(tableau.getBasicRow(column)))) {",
      "correctness": "P",
      "id": "7e4717acb92344d081de242e29ba7e6d"
    },
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -150,3 +150,5 @@\n                 }\n-                return minRow;\n+                if (false) {\n+                    return minRow;\n+                }\n         }\n",
      "correctness": "P",
      "id": "d4fac84f3fdc4377a9ac39063207560d"
    },
    {
      "name": "Patch_2_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2019-08-03 21:11:42.146700824 -0400\n+++ /tmp/Arja_Defects4J_Math_28/patches_4x0w/Patch_1/patched/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2019-08-03 22:36:22.989297069 -0400\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n\n\n",
      "correctness": "P",
      "id": "9a8a28d4125c4d68bb4648d852cdcbcc"
    },
    {
      "name": "Patch_29",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d..c6980ef 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -135,20 +135,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n             // Additional heuristic: if we did not get a solution after half of maxIterations\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n-                Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n-                return minRow;\n+                \n         }\n         return minRatioPositions.get(0);\n     }",
      "correctness": "P",
      "id": "48145659cab649c0a3087ee39b03af61"
    },
    {
      "name": "Patch_1_1",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolverjava\n+++ /tmp/jMutRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolverjava\n@@ -120,7 +120,7 @@\n \t\t\t\t\tfor (int i = 0; i < (tableau.getNumArtificialVariables()); i++) {\n \t\t\t\t\t\tint column = i + (tableau.getArtificialVariableOffset());\n \t\t\t\t\t\tfinal double entry = tableau.getEntry(row, column);\n-\t\t\t\t\t\tif ((org.apache.commons.math3.util.Precision.equals(entry, 1.0, maxUlps)) && (row.equals(tableau.getBasicRow(column)))) {\n+\t\t\t\t\t\tif ((!(org.apache.commons.math3.util.Precision.equals(entry, 1.0, this.maxUlps))) && (row.equals(tableau.getBasicRow(column)))) {\n \t\t\t\t\t\t\treturn row;\n \t\t\t\t\t\t}\n \t\t\t\t\t}",
      "correctness": "P",
      "id": "bf7a936328014a2f9faee93a98a6274c"
    },
    {
      "name": "Patch_1_1",
      "contributor": "jKali",
      "diff": "--- /tmp/jKali_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolverjava\n+++ /tmp/jKali_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolverjava\n@@ -116,15 +116,15 @@\n \n \n \n-\t\t\t\tfor (java.lang.Integer row : minRatioPositions) {\n-\t\t\t\t\tfor (int i = 0; i < (tableau.getNumArtificialVariables()); i++) {\n-\t\t\t\t\t\tint column = i + (tableau.getArtificialVariableOffset());\n-\t\t\t\t\t\tfinal double entry = tableau.getEntry(row, column);\n-\t\t\t\t\t\tif ((org.apache.commons.math3.util.Precision.equals(entry, 1.0, maxUlps)) && (row.equals(tableau.getBasicRow(column)))) {\n-\t\t\t\t\t\t\treturn row;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\n+\n+\n+\n+\n+\n+\n+\n+",
      "correctness": "P",
      "id": "d7bac69ac8e8404594dbccbb660cea70"
    },
    {
      "name": "Patch_3_2",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolverjava\n+++ /tmp/jGenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolverjava\n@@ -116,15 +116,15 @@\n \n \n \n-\t\t\t\tfor (java.lang.Integer row : minRatioPositions) {\n-\t\t\t\t\tfor (int i = 0; i < (tableau.getNumArtificialVariables()); i++) {\n-\t\t\t\t\t\tint column = i + (tableau.getArtificialVariableOffset());\n-\t\t\t\t\t\tfinal double entry = tableau.getEntry(row, column);\n-\t\t\t\t\t\tif ((org.apache.commons.math3.util.Precision.equals(entry, 1.0, maxUlps)) && (row.equals(tableau.getBasicRow(column)))) {\n-\t\t\t\t\t\t\treturn row;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n ",
      "correctness": "P",
      "id": "b0d70f4f987c4109be0218c00da28420"
    },
    {
      "name": "Patch_8_6",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d..6153db1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -116,15 +116,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n+                \n \n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index",
      "correctness": "P",
      "id": "c3a674190bfc4980acc60592b246294d"
    },
    {
      "name": "Patch_4_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2019-08-04 06:41:02.940154724 -0400\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_uebs/Patch_1/patched/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2019-08-04 08:09:44.130873449 -0400\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n",
      "correctness": "P",
      "id": "367a5a2166cf4a8d90eb78f5f82e7318"
    },
    {
      "name": "Patch_5_2",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2019-08-03 20:40:40.765737975 -0400\n+++ /tmp/GenProg_Defects4J_Math_28/patches_0ef5/Patch_2/patched/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2019-08-03 22:03:55.724302163 -0400\n@@ -137,18 +137,7 @@\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n-                return minRow;\n+                Integer minPos = null;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n",
      "correctness": "P",
      "id": "1d39e7b02f5a4005be4300cd45928562"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "e7fa9e7dd31442e295fbd46d9276db0d"
    }
  ],
  "Chart_13": [
    {
      "name": "Patch_4_4",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangementjava\n+++ /tmp/Cardumen_Defects4J_Chart_13/source/org/jfree/chart/block/BorderArrangementjava\n@@ -451,8 +451,8 @@\n \t\t}\n \t\th[3] = h[2];\n \t\tif ((this.rightBlock) != null) {\n-\t\t\torg.jfree.chart.block.RectangleConstraint c4 = new org.jfree.chart.block.RectangleConstraint(0.0, \n-\t\t\tnew org.jfree.data.Range(0.0, ((constraint.getWidth()) - (w[2]))), \n+\t\t\torg.jfree.chart.block.RectangleConstraint c4 = new org.jfree.chart.block.RectangleConstraint(0.0, constraint.getWidthRange(), \n+\n \t\t\torg.jfree.chart.block.LengthConstraintType.RANGE, h[2], null, \n \t\t\torg.jfree.chart.block.LengthConstraintType.FIXED);\n \t\t\torg.jfree.chart.util.Size2D size = this.rightBlock.arrange(g2, c4);",
      "correctness": "P",
      "id": "1490e757e78a4849b0af9590fb9c6a42"
    },
    {
      "name": "Patch_1364_1268",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java\nindex 730aeb3..2b418e7 100644\n--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,7 +452,7 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth() - w[2]),\n+                    new Range(0.0, constraint.getWidth() - w[1]),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);",
      "correctness": "P",
      "id": "66708213b9e442c08aca24afa2547849"
    },
    {
      "name": "Patch_52_8",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java\nindex 730aeb3..acb2d43 100644\n--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,7 +452,7 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth() - w[2]),\n+                    new Range(0.0, serialVersionUID - w[2]),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);",
      "correctness": "P",
      "id": "d13fa741e2024bf69df126c9492a62b4"
    },
    {
      "name": "Patch_43_19",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java\nindex 730aeb3..2b1451c 100644\n--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,7 +452,7 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, constraint.getWidth() - w[2]),\n+                    new Range(0.0, constraint.getHeight() - w[2]),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);",
      "correctness": "P",
      "id": "e9dd557b0634494aa4d1080fb4d65191"
    }
  ],
  "Chart_24": [
    {
      "name": "Patch_623_514",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Chart_24/source/org/jfree/chart/renderer/GrayPaintScalejava\n+++ /tmp/Cardumen_Defects4J_Chart_24/source/org/jfree/chart/renderer/GrayPaintScalejava\n@@ -123,8 +123,8 @@\n \tpublic java.awt.Paint getPaint(double value) {\n \t\tdouble v = java.lang.Math.max(value, this.lowerBound);\n \t\tv = java.lang.Math.min(v, this.upperBound);\n-\t\tint g = ((int) (((value - (this.lowerBound)) / ((this.upperBound) - \n-\t\t(this.lowerBound))) * 255.0));\n+\t\tint g = ((int) ((((lowerBound) - v) / ((lowerBound) - v)) * \n+\t\t255.0));\n \t\treturn new java.awt.Color(g, g, g);\n \t}",
      "correctness": "P",
      "id": "f9c922131af846fbbdb4d66692a0acd3"
    },
    {
      "name": "Patch_2_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/renderer/GrayPaintScale.java b/source/org/jfree/chart/renderer/GrayPaintScale.java\nindex 1e1e075..e62c43f 100644\n--- a/source/org/jfree/chart/renderer/GrayPaintScale.java\n+++ b/source/org/jfree/chart/renderer/GrayPaintScale.java\n@@ -123,7 +123,7 @@ public class GrayPaintScale\n     public Paint getPaint(double value) {\n         double v = Math.max(value, this.lowerBound);\n         v = Math.min(v, this.upperBound);\n-        int g = (int) ((value - this.lowerBound) / (this.upperBound \n+        int g = (int) ((v - this.lowerBound) / (this.upperBound \n                 - this.lowerBound) * 255.0);\n         return new Color(g, g, g);\n     }\n",
      "correctness": "C",
      "id": "71d4a6a5a083438b8cca5ea3be5fbb27"
    },
    {
      "name": "Patch_16_5",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/renderer/GrayPaintScale.java b/source/org/jfree/chart/renderer/GrayPaintScale.java\nindex 1e1e075..e62c43f 100644\n--- a/source/org/jfree/chart/renderer/GrayPaintScale.java\n+++ b/source/org/jfree/chart/renderer/GrayPaintScale.java\n@@ -123,7 +123,7 @@ public class GrayPaintScale\n     public Paint getPaint(double value) {\n         double v = Math.max(value, this.lowerBound);\n         v = Math.min(v, this.upperBound);\n-        int g = (int) ((value - this.lowerBound) / (this.upperBound \n+        int g = (int) ((v - this.lowerBound) / (this.upperBound \n                 - this.lowerBound) * 255.0);\n         return new Color(g, g, g);\n     }",
      "correctness": "C",
      "id": "0971641913f44e5493e40531fff3b8f6"
    },
    {
      "name": "Patch_7_3",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/renderer/GrayPaintScale.java b/source/org/jfree/chart/renderer/GrayPaintScale.java\nindex 1e1e075..e62c43f 100644\n--- a/source/org/jfree/chart/renderer/GrayPaintScale.java\n+++ b/source/org/jfree/chart/renderer/GrayPaintScale.java\n@@ -123,7 +123,7 @@ public class GrayPaintScale\n     public Paint getPaint(double value) {\n         double v = Math.max(value, this.lowerBound);\n         v = Math.min(v, this.upperBound);\n-        int g = (int) ((value - this.lowerBound) / (this.upperBound \n+        int g = (int) ((v - this.lowerBound) / (this.upperBound \n                 - this.lowerBound) * 255.0);\n         return new Color(g, g, g);\n     }",
      "correctness": "C",
      "id": "2d03161dd1304c268cd60071e2c362a7"
    }
  ],
  "Lang_39": [
    {
      "name": "Patch_3_3",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtilsjava\n+++ /tmp/Cardumen_Defects4J_Lang_39/src/java/org/apache/commons/lang3/StringUtilsjava\n@@ -3673,7 +3673,7 @@\n \n \n \t\tfor (int i = 0; i < (searchList.length); i++) {\n-\t\t\tint greater = (replacementList[i].length()) - (searchList[i].length());\n+\t\t\tint greater = (org.apache.commons.lang3.StringUtils.strip(EMPTY, null).length()) - (searchList[i].length());\n \t\t\tif (greater > 0) {\n \t\t\t\tincrease += 3 * greater;\n \t\t\t}",
      "correctness": "P",
      "id": "7c14d9005c9e492daa0b29ba0be9a2d9"
    },
    {
      "name": "Patch_17_17",
      "contributor": "SimFix",
      "diff": "diff --git a/src/java/org/apache/commons/lang3/StringUtils.java b/src/java/org/apache/commons/lang3/StringUtils.java\nindex 14563aa6..3ffd996b 100644\n--- a/src/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/java/org/apache/commons/lang3/StringUtils.java\n@@ -3672,12 +3672,25 @@ public class StringUtils {\n         int increase = 0;\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n+// start of generated patch\n+for(int i=0;i<searchList.length;i++){\n+if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){\n+continue;\n+}\n+int greater=replacementList[i].length()-searchList[i].length();\n+if(greater>0){\n+increase+=3*greater;\n+}\n+}\n+// end of generated patch\n+/* start of original code\n         for (int i = 0; i < searchList.length; i++) {\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches\n             }\n         }\n+ end of original code*/\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n ",
      "correctness": "C",
      "id": "1751cffa9ce94fb28d2cc249900a12df"
    },
    {
      "name": "Patch_13_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang3/StringUtils.java b/src/java/org/apache/commons/lang3/StringUtils.java\nindex 14563aa..54b2a0c 100644\n--- a/src/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/java/org/apache/commons/lang3/StringUtils.java\n@@ -3673,7 +3673,7 @@ public class StringUtils {\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n         for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n+            int greater = searchList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches\n             }\n",
      "correctness": "P",
      "id": "0bcf6ce1d55048cb96d4742e3a3a3f54"
    },
    {
      "name": "Patch_7_4",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang3/StringUtils.java b/src/java/org/apache/commons/lang3/StringUtils.java\nindex 14563aa..e139fda 100644\n--- a/src/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/java/org/apache/commons/lang3/StringUtils.java\n@@ -3673,7 +3673,9 @@ public class StringUtils {\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n         for (int i = 0; i < searchList.length; i++) {\n-            int greater = replacementList[i].length() - searchList[i].length();\n+            if (replacementList[i] == null) continue;\n+\tif (searchList[i] == null) continue;\n+\tint greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches\n             }",
      "correctness": "C",
      "id": "0f6ce4f336484bc89d6b361aca02ce61"
    }
  ],
  "Math_8": [
    {
      "name": "Patch_1_1",
      "contributor": "Cardumem",
      "diff": "--- /tmp/Cardumen_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistributionjava\n+++ /tmp/Cardumen_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistributionjava\n@@ -184,7 +184,7 @@\n \t\t\tsampleSize);\n \t\t}\n \n-\t\tfinal T[] out = ((T[]) (java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize)));\n+\t\tfinal T[] out = ((T[]) (java.lang.reflect.Array.newInstance(singletons.get(((singletons.size()) - 1)).getClass(), sampleSize)));\n \n \t\tfor (int i = 0; i < sampleSize; i++) {\n \t\t\tout[i] = sample();",
      "correctness": "P",
      "id": "7203fb7b204f478e954b9b048c7496c5"
    },
    {
      "name": "Patch_78_78",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\nindex 5cb0e4382..d81653512 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n@@ -186,9 +186,16 @@ public class DiscreteDistribution<T> {\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n+// start of generated patch\n+for(int i=sampleSize;i<sampleSize;i++){\n+out[i]=sample();\n+}\n+// end of generated patch\n+/* start of original code\n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();\n         }\n+ end of original code*/\n \n         return out;\n ",
      "correctness": "P",
      "id": "432c9c7c576d4234af05c6773eabc5dd"
    },
    {
      "name": "Patch_14_3",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\nindex 5cb0e43..55d4ced 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n@@ -184,7 +184,7 @@ public class DiscreteDistribution<T> {\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(1).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();",
      "correctness": "P",
      "id": "06a29273c354413d87112358b6e653fb"
    }
  ],
  "Closure_11": [
    {
      "name": "Patch_370_370",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..12be29c4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1311,12 +1311,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n+} else // start of generated patch\n+if(t.getScope().getVar(property.getString())!=null&&parent.isAssign()){\n+return ;\n+}else if(validator.expectNotNullOrUndefined(t,n,childType,\"No properties on this expression\",getNativeType(OBJECT_TYPE))){\n+checkPropertyAccess(childType,property.getString(),t,n);\n+}\n+// end of generated patch\n+/* start of original code\n     } else if (n.getJSType() != null && parent.isAssign()) {\n       return;\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n       checkPropertyAccess(childType, property.getString(), t, n);\n     }\n+ end of original code*/\n     ensureTyped(t, n);\n   }\n ",
      "correctness": "P",
      "id": "3fe85382d5d44565ae1e65cccb114fb2"
    },
    {
      "name": "Patch_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a320..b65af82 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1311,7 +1311,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n-    } else if (n.getJSType() != null && parent.isAssign()) {\n+    } else if (n.getJSType() == null && parent.isAssign()) {\n       return;\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {",
      "correctness": "C",
      "id": "80f4be2b23024729971822229b09f507"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a320..b65af82 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1311,7 +1311,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n-    } else if (n.getJSType() != null && parent.isAssign()) {\n+    } else if (n.getJSType() == null && parent.isAssign()) {\n       return;\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {",
      "correctness": "C",
      "id": "181984f6537d4d12903189969b8c46e7"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a320..b65af82 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1311,7 +1311,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n-    } else if (n.getJSType() != null && parent.isAssign()) {\n+    } else if (n.getJSType() == null && parent.isAssign()) {\n       return;\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {",
      "correctness": "P",
      "id": "321a7913bf214534a2de87dff2a4076a"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "C",
      "id": "cb59dffaf0ec44c1a8ccd85666a8d5d5"
    }
  ],
  "Math_82": [
    {
      "name": "Patch_5_5",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b40..d3de2b12b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -81,10 +81,18 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n             final double entry = tableau.getEntry(i, col);\n             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                 final double ratio = rhs / entry;\n+// start of generated patch\n+if(ratio<=minRatio){\n+minRatio=ratio;\n+minRatioPos=i;\n+}\n+// end of generated patch\n+/* start of original code\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n                     minRatioPos = i; \n                 }\n+ end of original code*/\n             }\n         }\n         return minRatioPos;",
      "correctness": "P",
      "id": "de03b74151434738bfc15e66ad880c4e"
    },
    {
      "name": "Patch_10_3",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b..c1b02f9 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,8 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n-                final double ratio = rhs / entry;\n+if (MathUtils.compareTo(entry, 0, epsilon) >= 0&&!(MathUtils.compareTo(entry, 0, epsilon)==0.0)) {                final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n                     minRatioPos = i; ",
      "correctness": "C",
      "id": "0bd7782653444745857297ea7ea7f785"
    },
    {
      "name": "Patch_1_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b..60a1b3a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,7 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n",
      "correctness": "C",
      "id": "c7d5bd3787264709b71a8d26a446083e"
    },
    {
      "name": "Patch_3_3",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Math_82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolverjava\n+++ /tmp/jMutRepair_Defects4J_Math_82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolverjava\n@@ -79,7 +79,7 @@\n \t\tfor (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getHeight()); i++) {\n \t\t\tfinal double rhs = tableau.getEntry(i, ((tableau.getWidth()) - 1));\n \t\t\tfinal double entry = tableau.getEntry(i, col);\n-\t\t\tif ((org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon)) >= 0) {\n+\t\t\tif ((org.apache.commons.math.util.MathUtils.compareTo(entry, 0, this.epsilon)) > 0) {\n \t\t\t\tfinal double ratio = rhs / entry;\n \t\t\t\tif (ratio < minRatio) {\n \t\t\t\t\tminRatio = ratio;",
      "correctness": "C",
      "id": "6b8548cfe81e453096abcaf25cddb7e7"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b..60a1b3a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,7 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;",
      "correctness": "C",
      "id": "869bfef023e34bdeaa967d2f18ae612c"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b..60a1b3a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,7 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n+            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;",
      "correctness": "C",
      "id": "d035e95c92544a699432e6b4257970dc"
    },
    {
      "name": "Patch_5_5",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b..a4c9824 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,7 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n+            if (MathUtils.compareTo(entry, 0, epsilon)>0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;",
      "correctness": "C",
      "id": "edfbf8b8d90e4bd397333f6d94e9874f"
    }
  ],
  "Math_41": [
    {
      "name": "Patch_15_15",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\nindex e5518e31a..fe49cd7f4 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -517,9 +517,16 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n                 }\n \n                 double sumWts = 0;\n+// start of generated patch\n+for(int i=begin;i<begin+length;i++){\n+sumWts+=weights[i];\n+}\n+// end of generated patch\n+/* start of original code\n                 for (int i = 0; i < weights.length; i++) {\n                     sumWts += weights[i];\n                 }\n+ end of original code*/\n \n                 if (isBiasCorrected) {\n                     var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);",
      "correctness": "C",
      "id": "33a4b105b76c4e54931755ee660bb6f6"
    }
  ],
  "Math_71": [
    {
      "name": "Patch_91_91",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\nindex 255b1f42b..b6b592ee7 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n@@ -171,6 +171,16 @@ public abstract class RungeKuttaIntegrator extends AbstractIntegrator {\n         interpolator.storeTime(stepStart + stepSize);\n         if (manager.evaluateStep(interpolator)) {\n             final double dt = manager.getEventTime() - stepStart;\n+// start of generated patch\n+if(Math.abs(dt)<=Math.ulp(stepStart)){\n+System.arraycopy(y,0,yTmp,0,y0.length);\n+stepSize=0;\n+loop=false;\n+}else {\n+stepSize=dt;\n+}\n+// end of generated patch\n+/* start of original code\n             if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                 // we cannot simply truncate the step, reject the current computation\n                 // and let the loop compute another state with the truncated step.\n@@ -182,6 +192,7 @@ public abstract class RungeKuttaIntegrator extends AbstractIntegrator {\n                 // reject the step to match exactly the next switch time\n                 stepSize = dt;\n             }\n+ end of original code*/\n         } else {\n           loop = false;\n         }",
      "correctness": "C",
      "id": "d15e40fd68da4e4a85b053061855844d"
    }
  ],
  "Chart_20": [
    {
      "name": "Patch_3_3",
      "contributor": "SimFix",
      "diff": "diff --git a/source/org/jfree/chart/plot/ValueMarker.java b/source/org/jfree/chart/plot/ValueMarker.java\nindex 075683d..1d21811 100644\n--- a/source/org/jfree/chart/plot/ValueMarker.java\n+++ b/source/org/jfree/chart/plot/ValueMarker.java\n@@ -91,9 +91,15 @@ public class ValueMarker extends Marker {\n      * @param alpha  the alpha transparency (in the range 0.0f to 1.0f).\n      */\n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n+// start of generated patch\n+super(paint,stroke,outlinePaint,outlineStroke,alpha);\n+this.value=value;\n+// end of generated patch\n+/* start of original code\n        super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n+end of original code*/\n     }\n     \n     /**",
      "correctness": "C",
      "id": "07f0c30de1f94efd932302946054d296"
    },
    {
      "name": "Patch_83_6",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/ValueMarker.java b/source/org/jfree/chart/plot/ValueMarker.java\nindex 075683d..58d5289 100644\n--- a/source/org/jfree/chart/plot/ValueMarker.java\n+++ b/source/org/jfree/chart/plot/ValueMarker.java\n@@ -92,7 +92,7 @@ public class ValueMarker extends Marker {\n      */\n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n-        super(paint, stroke, paint, stroke, alpha);\n+        super(paint, stroke, outlinePaint, outlineStroke, alpha);\n         this.value = value;\n     }",
      "correctness": "C",
      "id": "9fa7d58f3d6240af92adca88d097f328"
    }
  ],
  "Time_19": [
    {
      "name": "Patch_26_26",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..51d629bf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,6 +897,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+} else // start of generated patch\n+if(instantLocal>0){\n+long prev=previousTransition(instantAdjusted);\n+if(prev<instantAdjusted){\n+int offsetPrev=getOffset(prev);\n+int diff=offsetPrev-offsetLocal;\n+if(instantAdjusted-prev<=diff){\n+return offsetPrev;\n+}\n+}\n+}\n+// end of generated patch\n+/* start of original code\n         } else if (offsetLocal > 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n@@ -907,6 +920,7 @@ public abstract class DateTimeZone implements Serializable {\n                 }\n             }\n         }\n+ end of original code*/\n         return offsetAdjusted;\n     }\n ",
      "correctness": "P",
      "id": "d71a6c4e5f684089913244c075f3f974"
    },
    {
      "name": "Patch_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad0..ec05941 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,7 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
      "correctness": "C",
      "id": "f427f9f8ffdf452e865456f090be64c2"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad0..ec05941 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,7 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
      "correctness": "C",
      "id": "e37e83df81324920bfa08c43f439593d"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad0..ec05941 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,7 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
      "correctness": "C",
      "id": "29ff7fd119a4467199db9276c4f2a95c"
    },
    {
      "name": "Patch_5_5",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad0..bab51eb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,7 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal>=0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
      "correctness": "C",
      "id": "94df9374226544ae9b95521aae4fc9d4"
    }
  ],
  "Chart_26": [
    {
      "name": "Patch_22_22",
      "contributor": "SimFix",
      "diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..4d3d4f7 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1189,12 +1189,23 @@ public abstract class Axis implements Cloneable, Serializable {\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n+// start of generated patch\n+if(plotState!=null&&plotState.getOwner()!=null){\n+ChartRenderingInfo owner=plotState.getOwner();\n+EntityCollection entities=owner.getEntityCollection();\n+if(entities!=null){\n+entities.add(new AxisLabelEntity(this,hotspot,this.labelToolTip,this.labelURL));\n+}\n+}\n+// end of generated patch\n+/* start of original code\n                 EntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n                 }\n         }\n+end of original code*/\n         return state;\n \n     }",
      "correctness": "P",
      "id": "b168a384e4324502ab7eea91bb61ada1"
    },
    {
      "name": "Patch_38_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..6f2d34b 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1189,11 +1189,14 @@ public abstract class Axis implements Cloneable, Serializable {\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n+                if (owner != null) {\n+\tEntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n-                }\n+                }\n+}\n+\n         }\n         return state;\n",
      "correctness": "C",
      "id": "eab9839d6edf4eb4b4aab1b523471a66"
    },
    {
      "name": "Patch_107_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..5de9803 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1189,11 +1189,14 @@ public abstract class Axis implements Cloneable, Serializable {\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n+                if (owner != null) {\n+EntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n-                }\n+                }\n+}\n+\n         }\n         return state;",
      "correctness": "C",
      "id": "c788e6a32abd4611ab24e7e5da3407dd"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..6f2d34b 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1189,11 +1189,14 @@ public abstract class Axis implements Cloneable, Serializable {\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n+                if (owner != null) {\n+\tEntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n-                }\n+                }\n+}\n+\n         }\n         return state;",
      "correctness": "C",
      "id": "8ef37f28400747a885f65fe9a457ce01"
    },
    {
      "name": "Patch_24_1",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..630cddc 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1189,11 +1189,14 @@ public abstract class Axis implements Cloneable, Serializable {\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n+                if (owner != null) {\n+\tEntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n-                }\n+                }\n+\t}\n+\n         }\n         return state;",
      "correctness": "C",
      "id": "939cb780d67a4da9b27ceb5c6de77ff1"
    }
  ],
  "Closure_38": [
    {
      "name": "Patch_19_19",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..e6ec35d1 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -242,9 +242,16 @@ abstract class CodeConsumer {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n+// start of generated patch\n+if(prev=='-'){\n+add(\" \");\n+}\n+// end of generated patch\n+/* start of original code\n     if (x < 0 && prev == '-') {\n       add(\" \");\n     }\n+ end of original code*/\n \n     if ((long) x == x && !negativeZero) {\n       long value = (long) x;",
      "correctness": "P",
      "id": "00aab93b8b514ecc9c8cee75214e91fa"
    },
    {
      "name": "Patch_2",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487..6d637e8 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -242,7 +242,7 @@ abstract class CodeConsumer {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+    if (x <= 0 && prev == '-') {\n       add(\" \");\n     }",
      "correctness": "C",
      "id": "dd8b6ab54cb74ff1b55bd902ee526a58"
    },
    {
      "name": "Patch_2_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..6d637e80 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -242,7 +242,7 @@ abstract class CodeConsumer {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+    if (x <= 0 && prev == '-') {\n       add(\" \");\n     }",
      "correctness": "C",
      "id": "0ab37257643d4bd896b6adb7c6e277d7"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487..6d637e8 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -242,7 +242,7 @@ abstract class CodeConsumer {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+    if (x <= 0 && prev == '-') {\n       add(\" \");\n     }",
      "correctness": "C",
      "id": "3737d2e461bb40db87219689733adaf5"
    },
    {
      "name": "Patch_3_3",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487..cfdbdd8 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -242,7 +242,7 @@ abstract class CodeConsumer {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+    if (x<=0 && prev == '-') {\n       add(\" \");\n     }",
      "correctness": "C",
      "id": "a0ee408629b240349577f8b66237fa22"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "af982795f3e1408982514b0d8ce99494"
    }
  ],
  "Chart_7": [
    {
      "name": "Patch_5_5",
      "contributor": "SimFix",
      "diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..2e0bab3 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -295,7 +295,20 @@ public class TimePeriodValues extends Series implements Serializable {\n         else {\n             this.minMiddleIndex = index;\n         }\n        \n+// start of generated patch\n+if(this.maxMiddleIndex>=0){\n+long s=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime();\n+long e=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime();\n+long maxMiddle=s+(e-s)/2;\n+if(middle>maxMiddle){\n+this.maxMiddleIndex=index;\n+}\n+}else {\n+this.maxMiddleIndex=index;\n+}\n+// end of generated patch\n+/* start of original code^M\n         if (this.maxMiddleIndex >= 0) {\n             long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                 .getTime();\n@@ -308,7 +321,8 @@ public class TimePeriodValues extends Series implements Serializable {\n         }\n         else {\n             this.maxMiddleIndex = index;\n         }\n+end of original code*/\n         \n         if (this.minEndIndex >= 0) {\n             long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()",
      "correctness": "C",
      "id": "15d4cc637b0d40b0a4ac5aaa3f4fe639"
    },
    {
      "name": "Patch_12_3",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..ce08139 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -297,7 +297,7 @@ public class TimePeriodValues extends Series implements Serializable {\n         }\n         \n         if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n+            long s = getDataItem(this.maxStartIndex).getPeriod().getStart()\n                 .getTime();\n             long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                 .getTime();\n",
      "correctness": "P",
      "id": "e6914996f0894f2fb78ad0934f08086e"
    },
    {
      "name": "Patch_4_3",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..ce08139 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -297,7 +297,7 @@ public class TimePeriodValues extends Series implements Serializable {\n         }\n         \n         if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n+            long s = getDataItem(this.maxStartIndex).getPeriod().getStart()\n                 .getTime();\n             long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                 .getTime();",
      "correctness": "P",
      "id": "8b691e4139a84acf8223ab10bc9e4e80"
    },
    {
      "name": "Patch_13_3",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..4e4f6e4 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -297,7 +297,7 @@ public class TimePeriodValues extends Series implements Serializable {\n         }\n         \n         if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n+            long s = getDataItem(this.maxStartIndex).getPeriod().getStart()\n                 .getTime();\n             long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                 .getTime();",
      "correctness": "P",
      "id": "99ac8359f11940d3a8430f2f632f92b1"
    }
  ],
  "Closure_63": [
    {
      "name": "Patch_979_979",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..c1488582 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -94,6 +94,20 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // padding equal to the excerpt and arrow at the end\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n+// start of generated patch\n+if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){\n+for(int i=0;i<charno;i++){\n+char c=sourceExcerpt.charAt(i);\n+if(Character.isWhitespace(c)){\n+b.append(c);\n+}else {\n+b.append(' ');\n+}\n+}\n+b.append(\"^\\n\");\n+}\n+// end of generated patch\n+/* start of original code\n       if (excerpt.equals(LINE)\n           && 0 <= charno && charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n@@ -106,6 +120,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n         }\n         b.append(\"^\\n\");\n       }\n+ end of original code*/\n     }\n     return b.toString();\n   }",
      "correctness": "C",
      "id": "d42ddab5b84a45efa782da870663a246"
    },
    {
      "name": "Patch_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884..420dbc0 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
      "correctness": "C",
      "id": "455f49bb70d0459a9cd4fb95ff9c3b4c"
    },
    {
      "name": "Patch_14_14",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Closure_63/src/com/google/javascript/jscomp/LightweightMessageFormatterjava\n+++ /tmp/jMutRepair_Defects4J_Closure_63/src/com/google/javascript/jscomp/LightweightMessageFormatterjava\n@@ -94,8 +94,8 @@\n \n \n \n-\t\t\tif (((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \n-\t\t\t(0 <= charno)) && (charno < (sourceExcerpt.length()))) {\n+\t\t\tif (((this.excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \n+\t\t\t(0 <= charno)) && (charno <= (sourceExcerpt.length()))) {\n \t\t\t\tfor (int i = 0; i < charno; i++) {\n \t\t\t\t\tchar c = sourceExcerpt.charAt(i);\n \t\t\t\t\tif (java.lang.Character.isWhitespace(c)) {",
      "correctness": "C",
      "id": "735bcde34add4865877a14205405b6d5"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/build/lib/rhino.jar b/build/lib/rhino.jar\nindex f9154683..513dc1e3 100644\nBinary files a/build/lib/rhino.jar and b/build/lib/rhino.jar differ\ndiff --git a/build/lib/rhino1_7R3pre/js.jar b/build/lib/rhino1_7R3pre/js.jar\nindex f551981d..c7ccc39b 100644\nBinary files a/build/lib/rhino1_7R3pre/js.jar and b/build/lib/rhino1_7R3pre/js.jar differ\ndiff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..7c3857fc 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno || charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
      "correctness": "P",
      "id": "6ca85426e117451d8b0e32c0f455cf1b"
    },
    {
      "name": "Patch_6_5",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884..420dbc0 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
      "correctness": "C",
      "id": "d545eef0969f4e6ca37723c77e520e9a"
    },
    {
      "name": "Patch_8_8",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884..ff1e396 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno && charno<=sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
      "correctness": "C",
      "id": "e1052c2ff8eb4b039042db4c789370f4"
    }
  ],
  "Lang_60": [
    {
      "name": "Patch_318_318",
      "contributor": "SimFix",
      "diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex c7cbfb3e..35d82fac 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1670,11 +1670,20 @@ public class StrBuilder implements Cloneable {\n      */\n     public boolean contains(char ch) {\n         char[] thisBuf = buffer;\n+// start of generated patch\n+for(int i=0;i<size;i++){\n+if(thisBuf[i]==ch){\n+return true;\n+}\n+}\n+// end of generated patch\n+/* start of original code\n         for (int i = 0; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n             }\n         }\n+ end of original code*/\n         return false;\n     }\n \n@@ -1727,11 +1736,20 @@ public class StrBuilder implements Cloneable {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n+// start of generated patch\n+for(int i=startIndex;i<size;i++){\n+if(thisBuf[i]==ch){\n+return i;\n+}\n+}\n+// end of generated patch\n+/* start of original code\n         for (int i = startIndex; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return i;\n             }\n         }\n+ end of original code*/\n         return -1;\n     }\n ",
      "correctness": "C",
      "id": "38670246c59e411eba9f495879c022bb"
    }
  ],
  "Closure_115": [
    {
      "name": "Patch_154_154",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..92fc3a1b 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -698,9 +698,16 @@ class FunctionInjector {\n     if (block.hasChildren()) {\n       Preconditions.checkState(block.hasOneChild());\n       Node stmt = block.getFirstChild();\n+// start of generated patch\n+if(stmt.getFirstChild().isReturn()){\n+hasSideEffects=NodeUtil.mayHaveSideEffects(stmt.getFirstChild(),compiler);\n+}\n+// end of generated patch\n+/* start of original code\n       if (stmt.isReturn()) {\n         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n       }\n+ end of original code*/\n     }\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();",
      "correctness": "P",
      "id": "704927ffd9c042a5916b5f0f839e24e9"
    },
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2019-08-11 04:46:32.023061844 -0400\n+++ /tmp/Arja_Defects4J_Closure_115/patches_z8wr/Patch_1/patched/com/google/javascript/jscomp/FunctionInjector.java\t2019-08-11 05:11:02.710789945 -0400\n@@ -727,9 +727,6 @@\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n           // parameter reference will be in a loop.\n\n\n",
      "correctness": "C",
      "id": "4afb8beaed8443ef84cc3867e0cc1a44"
    },
    {
      "name": "Patch_21_7",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b..7df8a60 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -695,13 +695,7 @@ class FunctionInjector {\n     Node block = fnNode.getLastChild();\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n+    \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n",
      "correctness": "C",
      "id": "d04081098f2b4afa97ea4f4f33c12dc4"
    },
    {
      "name": "Patch_8_8",
      "contributor": "jKali",
      "diff": "--- /tmp/jKali_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjectorjava\n+++ /tmp/jKali_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjectorjava\n@@ -728,7 +728,7 @@\n \t\t\tif (fnParam != null) {\n \t\t\t\tif (cArg != null) {\n \t\t\t\t\tif (hasSideEffects && (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(cArg))) {\n-\t\t\t\t\t\treturn com.google.javascript.jscomp.FunctionInjector.CanInlineResult.NO;\n+\n \t\t\t\t\t}",
      "correctness": "C",
      "id": "aac86e6b45d44150b78fae563f130cef"
    },
    {
      "name": "Patch_40_14",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..e6216d62 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -695,7 +695,7 @@ class FunctionInjector {\n     Node block = fnNode.getLastChild();\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n+    if (block.isFromExterns()) {\n       Preconditions.checkState(block.hasOneChild());\n       Node stmt = block.getFirstChild();\n       if (stmt.isReturn()) {",
      "correctness": "P",
      "id": "b7204ff62c4f4ac898724fff5c469927"
    },
    {
      "name": "Patch_118_12",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b..d92daae 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -695,7 +695,7 @@ class FunctionInjector {\n     Node block = fnNode.getLastChild();\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n+    if ((!isDirectCallNodeReplacementPossible(fnNode))) {\n       Preconditions.checkState(block.hasOneChild());\n       Node stmt = block.getFirstChild();\n       if (stmt.isReturn()) {",
      "correctness": "P",
      "id": "c2543fbdfb44469dbd9fd46efb861d2c"
    },
    {
      "name": "Patch_5_3",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b..c2a648c 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -695,7 +695,7 @@ class FunctionInjector {\n     Node block = fnNode.getLastChild();\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n+    if ((block.hasChildren()) && (!block.hasChildren())) {\n       Preconditions.checkState(block.hasOneChild());\n       Node stmt = block.getFirstChild();\n       if (stmt.isReturn()) {",
      "correctness": "C",
      "id": "239ef98b51834afc983259807b3f5be5"
    },
    {
      "name": "Patch_4_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2019-08-14 01:01:54.701269530 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_115/patches_lpy8/Patch_1/patched/com/google/javascript/jscomp/FunctionInjector.java\t2019-08-14 01:22:55.692961375 -0400\n@@ -728,7 +728,6 @@\n       if (fnParam != null) {\n         if (cArg != null) {\n           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n           }\n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n\n\n",
      "correctness": "C",
      "id": "24e5cbdd484a479b81b6e7640d0b18a7"
    },
    {
      "name": "Patch_8_2",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java\t2019-08-13 22:49:35.765894855 -0400\n+++ /tmp/GenProg_Defects4J_Closure_115/patches_lqr1/Patch_1/patched/com/google/javascript/jscomp/FunctionInjector.java\t2019-08-13 23:13:20.834910972 -0400\n@@ -695,13 +695,6 @@\n     Node block = fnNode.getLastChild();\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n\n\n",
      "correctness": "C",
      "id": "21c150f9130b49f787f3893fc22e292f"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "C",
      "id": "01eb12f91e2343bb8896e7cfb2484d57"
    }
  ],
  "Lang_43": [
    {
      "name": "Patch_29_29",
      "contributor": "SimFix",
      "diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..e8feb500 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -418,9 +418,17 @@ public class ExtendedMessageFormat extends MessageFormat {\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n+// start of generated patch\n+if(escapingOn&&c[start]==QUOTE){\n+next(pos);\n+return appendTo==null?null:appendTo.append(QUOTE);\n+}\n+// end of generated patch\n+/* start of original code\n         if (escapingOn && c[start] == QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n+ end of original code*/\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {",
      "correctness": "C",
      "id": "e28222533abe4386981aca5ff013fd1b"
    },
    {
      "name": "Patch_5_5",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2019-06-25 23:23:30.323958384 -0400\n+++ /tmp/Arja_Defects4J_Lang_43/patches_dejh/Patch_5/patched/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2019-06-25 23:28:46.443957668 -0400\n@@ -419,7 +419,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n",
      "correctness": "P",
      "id": "b7e67a12c07a46bfbe54df8f33e6f479"
    },
    {
      "name": "Patch_17_11",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2019-07-04 10:05:01.303252082 -0400\n+++ /tmp/RSRepair_Defects4J_Lang_43/patches_j1ki/Patch_11/patched/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2019-07-04 10:10:30.568024478 -0400\n@@ -419,7 +419,7 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n",
      "correctness": "P",
      "id": "2b59aa907a514d89b9cea5b5f0c462af"
    },
    {
      "name": "Patch_17_13",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Lang_43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2019-07-01 13:36:26.689720435 -0400\n+++ /tmp/GenProg_Defects4J_Lang_43/patches_0g6u/Patch_13/patched/org/apache/commons/lang/text/ExtendedMessageFormat.java\t2019-07-01 13:41:59.540190899 -0400\n@@ -419,7 +419,8 @@\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+            next(pos);\n+\t\t\treturn appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n\n\n",
      "correctness": "C",
      "id": "fd86066ed266431ca9d3078fde904d64"
    }
  ],
  "Math_98": [
    {
      "name": "Patch_95_95",
      "contributor": "SimFix",
      "diff": "diff --git a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\nindex 7cd61cb2c..81214ae2e 100644\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n@@ -986,9 +986,16 @@ public class BigMatrixImpl implements BigMatrix, Serializable {\n         if (v.length != this.getColumnDimension()) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n+// start of generated patch\n+ final int nRows=this.getRowDimension();\n+ final int nCols=this.getColumnDimension();\n+ final BigDecimal[] out=new BigDecimal[nRows];\n+// end of generated patch\n+/* start of original code\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n         final BigDecimal[] out = new BigDecimal[v.length];\n+ end of original code*/\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {\ndiff --git a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\nindex 791064425..3b587ecf4 100644\n--- a/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\n@@ -773,6 +773,21 @@ public class RealMatrixImpl implements RealMatrix, Serializable {\n     public double[] operate(double[] v) throws IllegalArgumentException {\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n+// start of generated patch\n+if(v.length!=nCols){\n+throw new IllegalArgumentException(\"vector has wrong length\");\n+}\n+ final double[] out=new double[nRows];\n+for(int row=0;row<nRows;row++){\n+ final double[] dataRow=data[row];\n+double sum=0;\n+for(int i=0;i<nCols;i++){\n+sum+=dataRow[i]*v[i];\n+}\n+out[row]=sum;\n+}\n+// end of generated patch\n+/* start of original code\n         if (v.length != nCols) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n@@ -785,6 +800,7 @@ public class RealMatrixImpl implements RealMatrix, Serializable {\n             }\n             out[row] = sum;\n         }\n+ end of original code*/\n         return out;\n     }\n ",
      "correctness": "C",
      "id": "d60c50d055c641e5a508164acded3d0e"
    },
    {
      "name": "Patch_26_26",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\t2019-06-27 16:54:09.084220647 -0400\n+++ /tmp/Arja_Defects4J_Math_98/patches_c3cy/Patch_26/patched/org/apache/commons/math/linear/BigMatrixImpl.java\t2019-06-27 16:57:37.346922255 -0400\n@@ -988,7 +988,7 @@\n         }\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n-        final BigDecimal[] out = new BigDecimal[v.length];\n+        final BigDecimal[] out = new BigDecimal[nRows];\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java\t2019-06-27 16:54:09.084220647 -0400\n+++ /tmp/Arja_Defects4J_Math_98/patches_c3cy/Patch_26/patched/org/apache/commons/math/linear/RealMatrixImpl.java\t2019-06-27 16:57:37.354922359 -0400\n@@ -776,7 +776,7 @@\n         if (v.length != nCols) {\n             throw new IllegalArgumentException(\"vector has wrong length\");\n         }\n-        final double[] out = new double[v.length];\n+        final double[] out = new double[nRows];\n         for (int row = 0; row < nRows; row++) {\n             final double[] dataRow = data[row];\n             double sum = 0;\n\n\n",
      "correctness": "C",
      "id": "831c43431334449e8dc057f07751148e"
    },
    {
      "name": "Patch_34_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\nindex 7cd61cb..4d318a9 100644\n--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java\n@@ -988,7 +988,7 @@ public class BigMatrixImpl implements BigMatrix, Serializable {\n         }\n         final int nRows = this.getRowDimension();\n         final int nCols = this.getColumnDimension();\n-        final BigDecimal[] out = new BigDecimal[v.length];\n+        final BigDecimal[] out = new BigDecimal[copyOut().length];\n         for (int row = 0; row < nRows; row++) {\n             BigDecimal sum = ZERO;\n             for (int i = 0; i < nCols; i++) {",
      "correctness": "P",
      "id": "a065b4c4251f413984070b6a90b579bd"
    }
  ],
  "Math_57": [
    {
      "name": "Patch_16_16",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d3e..0522f6f44 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -172,6 +172,17 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n         while (resultSet.size() < k) {\n             // For each data point x, compute D(x), the distance between x and\n             // the nearest center that has already been chosen.\n+// start of generated patch\n+double sum=0;\n+for(int i=0;i<pointSet.size();i++){\n+ final T p=pointSet.get(i);\n+ final Cluster<T> nearest=getNearestCluster(resultSet,p);\n+ final double d=p.distanceFrom(nearest.getCenter());\n+sum+=d*d;\n+dx2[i]=sum;\n+}\n+// end of generated patch\n+/* start of original code\n             int sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n@@ -180,6 +191,7 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n                 sum += d * d;\n                 dx2[i] = sum;\n             }\n+ end of original code*/\n \n             // Add one new data point as a center. Each point x is chosen with\n             // probability proportional to D(x)2",
      "correctness": "C",
      "id": "98e5bc9a6d634421a7e4eb2700b15eb2"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d..e09bbc3 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -172,7 +172,7 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n         while (resultSet.size() < k) {\n             // For each data point x, compute D(x), the distance between x and\n             // the nearest center that has already been chosen.\n-            int sum = 0;\n+            double sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n                 final Cluster<T> nearest = getNearestCluster(resultSet, p);",
      "correctness": "C",
      "id": "b9c3d8e08a9340d3aea9cf98d0ce2ea4"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d..e09bbc3 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -172,7 +172,7 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n         while (resultSet.size() < k) {\n             // For each data point x, compute D(x), the distance between x and\n             // the nearest center that has already been chosen.\n-            int sum = 0;\n+            double sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n                 final Cluster<T> nearest = getNearestCluster(resultSet, p);",
      "correctness": "C",
      "id": "c94c578b4f2a47e89cdad0e2da73ee75"
    }
  ],
  "Math_59": [
    {
      "name": "Patch_3_3",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java\nindex 8cba4d484..ead4e946a 100644\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n@@ -904,7 +904,7 @@ public class FastMath {\n      *  For x between 0 and 1, returns exp(x), uses extended precision\n      *  @param x argument of exponential\n      *  @param result placeholder where to place exp(x) split in two terms\n-     *  for extra precision (i.e. exp(x) = result[0] \u00b0 result[1]\n+     *  for extra precision (i.e. exp(x) = result[0] ?? result[1]\n      *  @return exp(x)\n      */\n     private static double slowexp(final double x, final double result[]) {\n@@ -3479,7 +3479,12 @@ public class FastMath {\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n     public static float max(final float a, final float b) {\n+// start of generated patch\n+return (a<=b)?b:(Float.isNaN(a+b)?Float.NaN:a);\n+// end of generated patch\n+/* start of original code\n         return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n+ end of original code*/\n     }\n \n     /** Compute the maximum of two values",
      "correctness": "C",
      "id": "ef12edd9f5db4c558a8d05b6bab61875"
    },
    {
      "name": "Patch_15_13",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java\nindex 8cba4d4..eca1fff 100644\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n@@ -904,7 +904,7 @@ public class FastMath {\n      *  For x between 0 and 1, returns exp(x), uses extended precision\n      *  @param x argument of exponential\n      *  @param result placeholder where to place exp(x) split in two terms\n-     *  for extra precision (i.e. exp(x) = result[0] ?? result[1]\n+     *  for extra precision (i.e. exp(x) = result[0] ?? result[1]\n      *  @return exp(x)\n      */\n     private static double slowexp(final double x, final double result[]) {\n@@ -3479,7 +3479,7 @@ public class FastMath {\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n     public static float max(final float a, final float b) {\n-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n+        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);\n     }\n \n     /** Compute the maximum of two values\n",
      "correctness": "C",
      "id": "0d58c50d32294ba592321d1ed0060cac"
    }
  ],
  "Closure_22": [
    {
      "name": "Patch_504_504",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..80a021ee 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -109,6 +109,14 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n       if (n == parent.getLastChild()) {\n+// start of generated patch\n+for(Node an : parent.getAncestors()){\n+int ancestorType=parent.getParent().getType();\n+if(ancestorType==Token.COMMA)continue;\n+if(ancestorType!=Token.EXPR_RESULT&&ancestorType!=Token.BLOCK)return ;else break;\n+}\n+// end of generated patch\n+/* start of original code\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA)\n@@ -118,6 +126,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n           else\n             break;\n         }\n+ end of original code*/\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||",
      "correctness": "P",
      "id": "3c7f76d0c2734aef8f73ab2946935ac1"
    },
    {
      "name": "Patch_4_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 22:32:45.599511172 -0400\n+++ /tmp/Arja_Defects4J_Closure_22/patches_a94h/Patch_1/patched/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 22:52:50.236175851 -0400\n@@ -95,38 +95,6 @@\n       return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n-        }\n-    }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n-    }\n-\n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n     if (!isResultUsed &&\n\n\n",
      "correctness": "P",
      "id": "f0696c0017df43ceb0729be5784cf299"
    },
    {
      "name": "Patch_182",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412..376e39f 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -108,7 +108,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n+      if (gramps == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA)",
      "correctness": "P",
      "id": "c25e0dc183b74598b19f0a182d42180a"
    },
    {
      "name": "Patch_55_43",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffectsjava\n+++ /tmp/jMutRepair_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffectsjava\n@@ -113,7 +113,7 @@\n \t\t\t\t\tint ancestorType = an.getType();\n \t\t\t\t\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA))\n \t\t\t\t\t\tcontinue;\n-\t\t\t\t\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\n+\t\t\t\t\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType >= (com.google.javascript.rhino.Token.BLOCK)))\n \t\t\t\t\t\treturn;else\n \n \t\t\t\t\t\tbreak;",
      "correctness": "P",
      "id": "b7bcc9ad351348d9ab9ab1ec024290fe"
    },
    {
      "name": "Patch_15_12",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffectsjava\n+++ /tmp/jGenProg_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffectsjava\n@@ -114,7 +114,7 @@\n \t\t\t\t\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA)) \n \t\t\t\t\t{ \t\t\t\t\t\tcontinue;}\n \t\t\t\t\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK)))\n-\t\t\t\t\t\treturn;else\n+\t\t\t\t\t{}else\n \n \t\t\t\t\t\tbreak;\n \t\t\t\t}",
      "correctness": "P",
      "id": "50dec1fc6b1c4bceac3d5f9d1b1215dc"
    },
    {
      "name": "Patch_1682_739",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412..ab5b32a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -108,7 +108,8 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n+      if ((n.isEmpty() ||\n+        n.isComma())) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA)",
      "correctness": "P",
      "id": "0b1a35967fed4940977b819df7f915e0"
    },
    {
      "name": "Patch_1279_454",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412..d0fc9aa 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -108,7 +108,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n+      if ((n == parent.getLastChild()) && !(parent.getType() == Token.COMMA)) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA)",
      "correctness": "P",
      "id": "9d55e73295b44c50a9d1009791c20057"
    },
    {
      "name": "Patch_1_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 20:24:08.342608268 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_22/patches_lrw4/Patch_1/patched/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 20:45:15.254601073 -0400\n@@ -105,20 +105,6 @@\n       return;\n         }\n     }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n            n == parent.getFirstChild().getNext().getNext())) {\n\n\n",
      "correctness": "P",
      "id": "583cf972e7d649a697adc518330b739f"
    },
    {
      "name": "Patch_1_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_22/src/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 20:44:19.520023512 -0400\n+++ /tmp/GenProg_Defects4J_Closure_22/patches_ouoc/Patch_1/patched/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 21:05:39.065135177 -0400\n@@ -114,9 +114,11 @@\n           if (ancestorType == Token.COMMA)\n             continue;\n           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+\t\t\tbreak;\n+\t\telse {\n+\t\t\tfinal String PARAM_NAME = \"jscomp_throw_param\";\n+\t\t\tbreak;\n+\t\t}\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n\n\n",
      "correctness": "P",
      "id": "bd939635e6b44d1db6c79741cc33ce65"
    },
    {
      "name": "Patch_8_8",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "d09875efdb3b431b9ec22eea3e36ea27"
    }
  ],
  "Closure_57": [
    {
      "name": "Patch_45_45",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex c507c924..558d01b8 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -194,9 +194,16 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n+// start of generated patch\n+if(target!=null&&target.getType()==Token.STRING){\n+className=target.getString();\n+}\n+// end of generated patch\n+/* start of original code\n           if (target != null) {\n             className = target.getString();\n           }\n+ end of original code*/\n         }\n       }\n     }",
      "correctness": "C",
      "id": "d87964fcc0754127afbb11c27b6da18c"
    }
  ],
  "Lang_33": [
    {
      "name": "Patch_16_16",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/ClassUtils.java b/src/main/java/org/apache/commons/lang3/ClassUtils.java\nindex 615e4a9a..6c297d6e 100644\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n@@ -906,9 +906,16 @@ public class ClassUtils {\n             return ArrayUtils.EMPTY_CLASS_ARRAY;\n         }\n         Class<?>[] classes = new Class[array.length];\n+// start of generated patch\n+for(int i=0;i<array.length;i++){\n+classes[i]=array[i]==null?null:array[i].getClass();\n+}\n+// end of generated patch\n+/* start of original code\n         for (int i = 0; i < array.length; i++) {\n             classes[i] = array[i].getClass();\n         }\n+ end of original code*/\n         return classes;\n     }\n ",
      "correctness": "C",
      "id": "ca0ff06de874451596f441c7ce5c68a7"
    },
    {
      "name": "Patch_7_4",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/ClassUtils.java b/src/main/java/org/apache/commons/lang3/ClassUtils.java\nindex 615e4a9..baadf72 100644\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n@@ -907,7 +907,9 @@ public class ClassUtils {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            classes[i] = array[i].getClass();\n+            if (classes == null) continue;\n+\tif (array[i] == null) continue;\n+\tclasses[i] = array[i].getClass();\n         }\n         return classes;\n     }",
      "correctness": "C",
      "id": "eaacff9c56e04cd180bfb7142adedeef"
    }
  ],
  "Closure_125": [
    {
      "name": "Patch_48_48",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..e04f78dd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,12 +1658,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n+// start of generated patch\n+if(fnType!=null&&fnType.isConstructor()){\n+visitParameterList(t,n,fnType);\n+ensureTyped(t,n,fnType.getInstanceType());\n+}else {\n+ensureTyped(t,n);\n+}\n+// end of generated patch\n+/* start of original code\n       if (fnType != null) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {\n         ensureTyped(t, n);\n       }\n+ end of original code*/\n     } else {\n       report(t, n, NOT_A_CONSTRUCTOR);\n       ensureTyped(t, n);",
      "correctness": "P",
      "id": "81b41263a259477cb2de4167d5ecbc41"
    },
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_125/src/com/google/javascript/jscomp/TypeCheck.java\t2019-08-11 08:17:47.587830849 -0400\n+++ /tmp/Arja_Defects4J_Closure_125/patches_9ox1/Patch_1/patched/com/google/javascript/jscomp/TypeCheck.java\t2019-08-11 08:41:59.410095210 -0400\n@@ -1658,12 +1658,6 @@\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n-        visitParameterList(t, n, fnType);\n-        ensureTyped(t, n, fnType.getInstanceType());\n-      } else {\n-        ensureTyped(t, n);\n-      }\n     } else {\n       report(t, n, NOT_A_CONSTRUCTOR);\n       ensureTyped(t, n);\n\n\n",
      "correctness": "P",
      "id": "c11f3c92841b4df4a536e027ad74b1d3"
    },
    {
      "name": "Patch_4_4",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e05325..69291a6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n+      if ((type.isConstructor())) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {",
      "correctness": "P",
      "id": "303ddcdd5500405dad345f987149f19f"
    },
    {
      "name": "Patch_1_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_125/src/com/google/javascript/jscomp/TypeCheck.java\t2019-08-13 22:32:03.466866445 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_125/patches_xmdf/Patch_1/patched/com/google/javascript/jscomp/TypeCheck.java\t2019-08-13 22:55:26.181657677 -0400\n@@ -1658,12 +1658,7 @@\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n-        visitParameterList(t, n, fnType);\n-        ensureTyped(t, n, fnType.getInstanceType());\n-      } else {\n-        ensureTyped(t, n);\n-      }\n+      final String paramName = \"jscomp_throw_param\";\n     } else {\n       report(t, n, NOT_A_CONSTRUCTOR);\n       ensureTyped(t, n);\n\n\n",
      "correctness": "P",
      "id": "dcbbe51ac9c742f08fcc71f78a577625"
    },
    {
      "name": "Patch_1_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_125/src/com/google/javascript/jscomp/TypeCheck.java\t2019-08-13 22:28:47.237616112 -0400\n+++ /tmp/GenProg_Defects4J_Closure_125/patches_6m11/Patch_1/patched/com/google/javascript/jscomp/TypeCheck.java\t2019-08-13 22:51:22.875616630 -0400\n@@ -1658,12 +1658,6 @@\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n-        visitParameterList(t, n, fnType);\n-        ensureTyped(t, n, fnType.getInstanceType());\n-      } else {\n-        ensureTyped(t, n);\n-      }\n     } else {\n       report(t, n, NOT_A_CONSTRUCTOR);\n       ensureTyped(t, n);\n\n\n",
      "correctness": "P",
      "id": "2493b66c02ec439cb7da760497c679a5"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "bf27a40360634efa935d5f1c5a8206db"
    }
  ],
  "Closure_19": [
    {
      "name": "Patch_6_6",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0345c855..1631dd08 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -167,6 +167,15 @@ public abstract class ChainableReverseAbstractInterpreter\n         JSType origType = node.getJSType();\n         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n+// start of generated patch\n+case Token.THIS :\n+\n+break;\n+default :\n+throw new IllegalArgumentException(\"Node cannot be refined. \\n\"+node.toStringTree());\n+\n+// end of generated patch\n+/* start of original code\n         break;\n \n         // \"this\" references aren't currently modeled in the CFG.\n@@ -174,6 +183,7 @@ public abstract class ChainableReverseAbstractInterpreter\n       default:\n         throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n             node.toStringTree());\n+ end of original code*/\n     }\n   }\n ",
      "correctness": "C",
      "id": "565bdce5e54e4a98853215ccd2c2d093"
    },
    {
      "name": "Patch_124_16",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0345c85..94a2a46 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -172,8 +172,7 @@ public abstract class ChainableReverseAbstractInterpreter\n         // \"this\" references aren't currently modeled in the CFG.\n \n       default:\n-        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n-            node.toStringTree());\n+        \n     }\n   }",
      "correctness": "P",
      "id": "c2d4fecb26a24a529624862386a84b5d"
    }
  ],
  "Lang_58": [
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..1e37c4ac 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -449,6 +449,17 @@ public class NumberUtils {\n             switch (lastChar) {\n                 case 'l' :\n                 case 'L' :\n+// start of generated patch\n+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){\n+try{\n+return createLong(numeric);\n+}catch (NumberFormatException nfe) {\n+}\n+\n+return createBigInteger(numeric);\n+}\n+// end of generated patch\n+/* start of original code\n                     if (dec == null\n                         && exp == null\n                         && isDigits(numeric.substring(1))\n@@ -461,6 +472,7 @@ public class NumberUtils {\n                         return createBigInteger(numeric);\n \n                     }\n+ end of original code*/\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 case 'f' :\n                 case 'F' :",
      "correctness": "C",
      "id": "28e82ee3317d41468a97df4c72e49a08"
    },
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,6 +451,3 @@\n                 case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                    if (exp == dec) {\n                         try {\n@@ -461,3 +458,3 @@\n                         return createBigInteger(numeric);\n-\n+                        \n                     }\n",
      "correctness": "P",
      "id": "5ece21bef14049b2a10ac151ff3ccee0"
    },
    {
      "name": "Patch_5_5",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a4..cd862e8 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,7 +451,6 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n                         && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                         try {\n                             return createLong(numeric);\n",
      "correctness": "P",
      "id": "5d7ca827dc5440b6a51438de2e96cbf6"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a4..8d8bb25 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,7 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                        && isDigits(numeric.substring(1)) || (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
      "correctness": "P",
      "id": "5014a251c28c461bb63299db452b20d9"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,6 +451,3 @@\n                 case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                    if (((dec == null) && (exp == null))) {\n                         try {\n@@ -461,3 +458,3 @@\n                         return createBigInteger(numeric);\n-\n+                        \n                     }\n",
      "correctness": "P",
      "id": "044a89fa624641e4a65339dcfb708780"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a4..b988e49 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -450,8 +450,7 @@ public class NumberUtils {\n                 case 'l' :\n                 case 'L' :\n                     if (dec == null\n-                        && exp == null\n-                        && isDigits(numeric.substring(1))\n+                        && exp == null || isDigits(numeric.substring(1))\n                         && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                         try {\n                             return createLong(numeric);",
      "correctness": "P",
      "id": "9bd97b6cef964f13864ad8b0c2bd74ab"
    },
    {
      "name": "Patch_9_9",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a4..ef99ac1 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -449,10 +449,10 @@ public class NumberUtils {\n             switch (lastChar) {\n                 case 'l' :\n                 case 'L' :\n-                    if (dec == null\n+                    if (dec != numeric || (dec == null\n                         && exp == null\n                         && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0))))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
      "correctness": "P",
      "id": "216d17f58b4d4278ab7cedaadf7b09c2"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "b5c6c1e47cc9438992e15c5da27069b3"
    }
  ],
  "Closure_21": [
    {
      "name": "Patch_183_183",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..122ae73b 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -115,12 +115,21 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         return;\n       }\n       if (n == parent.getLastChild()) {\n+// start of generated patch\n+for(Node an : parent.getAncestors()){\n+int ancestorType=parent.getParent().getType();\n+if(ancestorType==Token.COMMA)continue;\n+if(ancestorType!=Token.EXPR_RESULT&&ancestorType!=Token.BLOCK)return ;else break;\n+}\n+// end of generated patch\n+/* start of original code\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA) continue;\n           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n           else break;\n         }\n+ end of original code*/\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {",
      "correctness": "P",
      "id": "f8b859a9099d47b7b638fa5346c28c36"
    },
    {
      "name": "Patch_13_3",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-08 22:18:13.615686350 -0400\n+++ /tmp/Arja_Defects4J_Closure_21/patches_i5hy/Patch_3/patched/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-08 22:48:28.746290081 -0400\n@@ -117,7 +117,8 @@\n       if (n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType == Token.COMMA)\n+\t\t\tbreak;\n           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n           else break;\n         }\n\n\n",
      "correctness": "P",
      "id": "14dd95b04d124ac1b1c883a6ef93be17"
    },
    {
      "name": "Patch_64",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a..da75ef3 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -114,7 +114,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n+      if (parent == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA) continue;",
      "correctness": "P",
      "id": "c4986b2faa2e4773a10ebeecf91cbc8f"
    },
    {
      "name": "Patch_16_12",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffectsjava\n+++ /tmp/jMutRepair_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffectsjava\n@@ -117,7 +117,7 @@\n \t\t\tif (n == (parent.getLastChild())) {\n \t\t\t\tfor (com.google.javascript.rhino.Node an : parent.getAncestors()) {\n \t\t\t\t\tint ancestorType = an.getType();\n-\t\t\t\t\tif (ancestorType == (com.google.javascript.rhino.Token.COMMA)) \t\t\t\t\t\tcontinue;\n+\t\t\t\t\tif (ancestorType >= (com.google.javascript.rhino.Token.COMMA)) \t\t\t\t\t\tcontinue;\n \t\t\t\t\tif ((ancestorType != (com.google.javascript.rhino.Token.EXPR_RESULT)) && (ancestorType != (com.google.javascript.rhino.Token.BLOCK))) \t\t\t\t\t\treturn;else\n \t\t\t\t\t\tbreak;\n \t\t\t\t}",
      "correctness": "P",
      "id": "805b6afffaa24b2b8c28d238183d5027"
    },
    {
      "name": "Patch_556_343",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a..1b232df 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -114,7 +114,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n+      if ((parent == null)) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA) continue;",
      "correctness": "P",
      "id": "24e7b1be28764ad3b5742460933e1b00"
    },
    {
      "name": "Patch_400_219",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a..ca45135 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -114,7 +114,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n+      if ((n == parent.getLastChild()) && (n.isExprResult())) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n           if (ancestorType == Token.COMMA) continue;",
      "correctness": "P",
      "id": "53dbc8b0a1ca4c76a9680bc832feafd0"
    },
    {
      "name": "Patch_14_7",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 20:01:52.431846732 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_21/patches_7sd0/Patch_7/patched/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 20:24:04.938659036 -0400\n@@ -117,7 +117,8 @@\n       if (n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType == Token.COMMA)\n+\t\t\tbreak;\n           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n           else break;\n         }\n\n\n",
      "correctness": "P",
      "id": "be68e9f3b900408396528f35ed261bfc"
    },
    {
      "name": "Patch_7_3",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 20:22:47.772160451 -0400\n+++ /tmp/GenProg_Defects4J_Closure_21/patches_vku5/Patch_3/patched/com/google/javascript/jscomp/CheckSideEffects.java\t2019-08-09 20:44:16.460063036 -0400\n@@ -114,14 +114,6 @@\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n         return;\n\n\n",
      "correctness": "P",
      "id": "050a68835524413e847ee6b5494df165"
    },
    {
      "name": "Patch_8_8",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "c0bc926cb2454176b21d7e0de6f80018"
    }
  ],
  "Closure_14": [
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..16fe8ad6 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -763,9 +763,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         // If we are coming out of the FINALLY block...\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n+// start of generated patch\n+for(Node finallyNode : cfa.finallyMap.get(parent)){\n+cfa.createEdge(fromNode,Branch.ON_EX,finallyNode);\n+}\n+// end of generated patch\n+/* start of original code\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n+ end of original code*/\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n         }",
      "correctness": "C",
      "id": "83f8b2bf8c014fffb493f53386e71ac2"
    }
  ],
  "Closure_109": [
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..3e66860a 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,12 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n+// start of generated patch\n+return parseTypeExpression(token);\n+// end of generated patch\n+/* start of original code\n           return parseTypeName(token);\n+ end of original code*/\n   }\n \n   /**",
      "correctness": "P",
      "id": "3bb33f3cc2a64d339468a62dd3e76292"
    },
    {
      "name": "Patch_50_3",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c350..cb61d8c 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,7 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+          return parseAndRecordTypeNode(token);\n   }\n \n   /**",
      "correctness": "P",
      "id": "8f6729c83b094cf8b3010572ead294bb"
    },
    {
      "name": "Patch_4_3",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c350..cb61d8c 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,7 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+          return parseAndRecordTypeNode(token);\n   }\n \n   /**",
      "correctness": "P",
      "id": "bb8d38171c5e42dbb5a8624cc599e058"
    },
    {
      "name": "Patch_2_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c350..cb61d8c 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,7 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+          return parseAndRecordTypeNode(token);\n   }\n \n   /**",
      "correctness": "P",
      "id": "65411baa8e5f4d46a6c57011d76b9bac"
    }
  ],
  "Math_81": [
    {
      "name": "Patch_3039_3039",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 2d0d72f22..cf6fca43c 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1540,6 +1540,28 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n+// start of generated patch\n+if(end-start>end){\n+b2=work[nn-13]/work[nn-15];\n+a2=a2+b2;\n+for(int i4=nn-17;i4>=4*start+2+pingPong;i4-=4){\n+if(b2==0.0){\n+break;\n+}\n+b1=b2;\n+if(work[i4]>work[i4-2]){\n+return ;\n+}\n+b2=b2*(work[i4]/work[i4-2]);\n+a2=a2+b2;\n+if(100*Math.max(b2,b1)<a2||cnst1<a2){\n+break;\n+}\n+}\n+a2=cnst3*a2;\n+}\n+// end of generated patch\n+/* start of original code\n                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n@@ -1559,6 +1581,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                     }\n                     a2 = cnst3 * a2;\n                 }\n+ end of original code*/\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);",
      "correctness": "P",
      "id": "1476c986ffb2478891bdfaed15952730"
    },
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1542,20 +1542,22 @@\n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                if (false) {\n+                    if (end - start > 2) {\n+                        b2 = work[nn - 13] / work[nn - 15];\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n+                        for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+                            if (b2 == 0.0) {\n+                                break;\n+                            }\n+                            b1 = b2;\n+                            if (work[i4]  >  work[i4 - 2]) {\n+                                return;\n+                            }\n+                            b2 = b2 * (work[i4] / work[i4 - 2]);\n+                            a2 = a2 + b2;\n+                            if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n+                                break;\n+                            }\n                         }\n+                        a2 = cnst3 * a2;\n                     }\n-                    a2 = cnst3 * a2;\n                 }\n",
      "correctness": "P",
      "id": "649c7ca12ef04b8ca41ed4f4cd5e92fb"
    },
    {
      "name": "Patch_28_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 2d0d72f..31c8133 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1540,8 +1540,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+if (end - start > 2&&!(end - start>=(double)0.0)) {                    b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {",
      "correctness": "P",
      "id": "9ac7b5d3ba264ddb8ac3fd0f46226289"
    },
    {
      "name": "Patch_31_27",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 03:57:56.123154400 -0400\n+++ /tmp/Arja_Defects4J_Math_81/patches_mozh/Patch_27/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 04:07:09.787437282 -0400\n@@ -902,21 +902,6 @@\n                     diagMax    = work[4 * i0];\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n-                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {\n-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n-                            (work[i + 2] <= TOLERANCE_2 * sigma)) {\n-                            // insert a split\n-                            work[i + 2]  = -sigma;\n-                            split        = i / 4;\n-                            diagMax      = 0;\n-                            offDiagMin   = work[i + 6];\n-                            previousEMin = work[i + 7];\n-                        } else {\n-                            diagMax      = Math.max(diagMax, work[i + 4]);\n-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);\n-                            previousEMin = Math.min(previousEMin, work[i + 3]);\n-                        }\n-                    }\n                     work[4 * n0 - 2] = offDiagMin;\n                     work[4 * n0 - 1] = previousEMin;\n                     i0 = split + 1;\n@@ -1539,27 +1524,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n",
      "correctness": "P",
      "id": "ad2abedd28cb40e7abb7a99d660be28e"
    },
    {
      "name": "Patch_412_146",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 2d0d72f..28bd240 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1540,7 +1540,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n+                if (end - start <= 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n",
      "correctness": "P",
      "id": "a2f22c8759df47cf8b18fe387ffe17c9"
    },
    {
      "name": "Patch_15_15",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava\n+++ /tmp/jMutRepair_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava\n@@ -1540,7 +1540,7 @@\n \t\t\t\t\t\tdouble a2 = ((work[(np - 8)]) / b2) * (1 + ((work[(np - 4)]) / b1));\n \n \n-\t\t\t\t\t\tif ((end - start) > 2) {\n+\t\t\t\t\t\tif ((end - start) == 2) {\n \t\t\t\t\t\t\tb2 = (work[(nn - 13)]) / (work[(nn - 15)]);\n \t\t\t\t\t\t\ta2 = a2 + b2;\n \t\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {",
      "correctness": "P",
      "id": "2a79c508839b48dfaf131fee935395f1"
    },
    {
      "name": "Patch_8_8",
      "contributor": "jKali",
      "diff": "--- /tmp/jKali_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava\n+++ /tmp/jKali_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava\n@@ -1540,18 +1540,18 @@\n \t\t\t\t\t\tdouble a2 = ((work[(np - 8)]) / b2) * (1 + ((work[(np - 4)]) / b1));\n \n \n-\t\t\t\t\t\tif ((end - start) > 2) {\n-\t\t\t\t\t\t\tb2 = (work[(nn - 13)]) / (work[(nn - 15)]);\n+\t\t\t\t\t\tif (false) {\n+\t\t\t\t\t\t\tb2 = (this.work[(nn - 13)]) / (this.work[(nn - 15)]);\n \t\t\t\t\t\t\ta2 = a2 + b2;\n-\t\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {\n+\t\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (this.pingPong)); i4 -= 4) {\n \t\t\t\t\t\t\t\tif (b2 == 0.0) {\n \t\t\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\tb1 = b2;\n-\t\t\t\t\t\t\t\tif ((work[i4]) > (work[(i4 - 2)])) {\n+\t\t\t\t\t\t\t\tif ((this.work[i4]) > (this.work[(i4 - 2)])) {\n \t\t\t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tb2 = b2 * ((work[i4]) / (work[(i4 - 2)]));\n+\t\t\t\t\t\t\t\tb2 = b2 * ((this.work[i4]) / (this.work[(i4 - 2)]));\n \t\t\t\t\t\t\t\ta2 = a2 + b2;\n \t\t\t\t\t\t\t\tif (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {\n \t\t\t\t\t\t\t\t\tbreak;",
      "correctness": "P",
      "id": "4fb24819234b4d928bed936b60d03f85"
    },
    {
      "name": "Patch_8_6",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava\n+++ /tmp/jGenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpljava\n@@ -1540,25 +1540,25 @@\n \t\t\t\t\t\tdouble a2 = ((work[(np - 8)]) / b2) * (1 + ((work[(np - 4)]) / b1));\n \n \n-\t\t\t\t\t\tif ((end - start) > 2) {\n-\t\t\t\t\t\t\tb2 = (work[(nn - 13)]) / (work[(nn - 15)]);\n-\t\t\t\t\t\t\ta2 = a2 + b2;\n-\t\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {\n-\t\t\t\t\t\t\t\tif (b2 == 0.0) {\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tb1 = b2;\n-\t\t\t\t\t\t\t\tif ((work[i4]) > (work[(i4 - 2)])) {\n-\t\t\t\t\t\t\t\t\treturn;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tb2 = b2 * ((work[i4]) / (work[(i4 - 2)]));\n-\t\t\t\t\t\t\t\ta2 = a2 + b2;\n-\t\t\t\t\t\t\t\tif (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\ta2 = cnst3 * a2;\n-\t\t\t\t\t\t}\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n \n \t\t\t\t\t\tif (a2 < cnst1) {\n \t\t\t\t\t\t\ttau = (gam * (1 - (java.lang.Math.sqrt(a2)))) / (1 + a2);\n",
      "correctness": "P",
      "id": "5fc91615b6554fa39bfd6c5e003fe98f"
    },
    {
      "name": "Patch_291_217",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 2d0d72f..28bd240 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1540,7 +1540,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n+                if (end - start <= 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {",
      "correctness": "P",
      "id": "15bdec86dd054c8db3492cb2c7722985"
    },
    {
      "name": "Patch_166_147",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 2d0d72f..28bd240 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1540,7 +1540,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n+                if (end - start <= 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {",
      "correctness": "P",
      "id": "87efec8dce6b43f281c14fe5c93d1440"
    },
    {
      "name": "Patch_844_620",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 2d0d72f..a072e99 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1540,7 +1540,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n+                if (end - start==2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {",
      "correctness": "P",
      "id": "ecf1ca0facaa4c72a805dcf4fba76bd5"
    },
    {
      "name": "Patch_6_5",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 16:10:56.113624847 -0400\n+++ /tmp/RSRepair_Defects4J_Math_81/patches_c3ae/Patch_5/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 16:17:12.681817246 -0400\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n",
      "correctness": "P",
      "id": "2d5fe4420f5e425dbf47d1273f3ba980"
    },
    {
      "name": "Patch_5_5",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 05:16:19.013557221 -0400\n+++ /tmp/GenProg_Defects4J_Math_81/patches_kor0/Patch_5/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-04 05:26:03.877856043 -0400\n@@ -903,19 +903,6 @@\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n                     for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {\n-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n-                            (work[i + 2] <= TOLERANCE_2 * sigma)) {\n-                            // insert a split\n-                            work[i + 2]  = -sigma;\n-                            split        = i / 4;\n-                            diagMax      = 0;\n-                            offDiagMin   = work[i + 6];\n-                            previousEMin = work[i + 7];\n-                        } else {\n-                            diagMax      = Math.max(diagMax, work[i + 4]);\n-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);\n-                            previousEMin = Math.min(previousEMin, work[i + 3]);\n-                        }\n                     }\n                     work[4 * n0 - 2] = offDiagMin;\n                     work[4 * n0 - 1] = previousEMin;\n@@ -1539,26 +1526,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                computeGershgorinCircles();\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n",
      "correctness": "P",
      "id": "300b964a426f44998e23fef4ae42bc89"
    },
    {
      "name": "Patch_4_4",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "1fcb6a60a3f34ae28fc63a8f52740080"
    }
  ],
  "Math_79": [
    {
      "name": "Patch_8_8",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 46368dc9f..2f417f819 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -1621,12 +1621,22 @@ public final class MathUtils {\n      * @return the L<sub>2</sub> distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n+// start of generated patch\n+double sum=0;\n+for(int i=0;i<p1.length;i++){\n+ final double dp=p1[i]-p2[i];\n+sum+=dp*dp;\n+}\n+return Math.sqrt(sum);\n+// end of generated patch\n+/* start of original code\n       int sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n           final int dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);\n+ end of original code*/\n     }\n \n     /**",
      "correctness": "C",
      "id": "6339cfac053248e39ef1b5db4603d52e"
    },
    {
      "name": "Patch_2_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 46368dc..ad77a56 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -1621,9 +1621,9 @@ public final class MathUtils {\n      * @return the L<sub>2</sub> distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n-      int sum = 0;\n+      double sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n-          final int dp = p1[i] - p2[i];\n+          final double dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);",
      "correctness": "C",
      "id": "01d3f34c0f7743f28da57fee0b637b09"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 46368dc..ad77a56 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -1621,9 +1621,9 @@ public final class MathUtils {\n      * @return the L<sub>2</sub> distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n-      int sum = 0;\n+      double sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n-          final int dp = p1[i] - p2[i];\n+          final double dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);",
      "correctness": "C",
      "id": "de4c1c093117493492d3ae11f44fe6cf"
    }
  ],
  "Time_7": [
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..1ea5e67e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -705,9 +705,16 @@ public class DateTimeFormatter {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n+// start of generated patch\n+long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);\n+chrono=selectChronology(chrono);\n+int defaultYear=chrono.year().get(instantMillis);\n+// end of generated patch\n+/* start of original code\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         int defaultYear = chrono.year().get(instantLocal);\n+ end of original code*/\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);",
      "correctness": "C",
      "id": "af02898713c8495689d2b22971e7547d"
    },
    {
      "name": "Patch_115",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a..f8489b2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -707,7 +707,7 @@ public class DateTimeFormatter {\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+        int defaultYear = chrono.year().get(instantMillis);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);",
      "correctness": "C",
      "id": "9e7ca67bbb5c4e2381ff384f4d49a44b"
    },
    {
      "name": "Patch_13_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a..f8489b2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -707,7 +707,7 @@ public class DateTimeFormatter {\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+        int defaultYear = chrono.year().get(instantMillis);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);",
      "correctness": "C",
      "id": "add61f9280f540ccaa6df2fbc9a65ebc"
    },
    {
      "name": "Patch_8_6",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a..f8489b2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -707,7 +707,7 @@ public class DateTimeFormatter {\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+        int defaultYear = chrono.year().get(instantMillis);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);",
      "correctness": "C",
      "id": "7ce6a48fc2634bea9a08409f48fe042a"
    },
    {
      "name": "Patch_167_35",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a..f8489b2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -707,7 +707,7 @@ public class DateTimeFormatter {\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+        int defaultYear = chrono.year().get(instantMillis);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);",
      "correctness": "C",
      "id": "19eff2ad1e3a4aeba66ebd8513c59945"
    }
  ],
  "Closure_62": [
    {
      "name": "Patch_979_979",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..c1488582 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -94,6 +94,20 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // padding equal to the excerpt and arrow at the end\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n+// start of generated patch\n+if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){\n+for(int i=0;i<charno;i++){\n+char c=sourceExcerpt.charAt(i);\n+if(Character.isWhitespace(c)){\n+b.append(c);\n+}else {\n+b.append(' ');\n+}\n+}\n+b.append(\"^\\n\");\n+}\n+// end of generated patch\n+/* start of original code\n       if (excerpt.equals(LINE)\n           && 0 <= charno && charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n@@ -106,6 +120,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n         }\n         b.append(\"^\\n\");\n       }\n+ end of original code*/\n     }\n     return b.toString();\n   }",
      "correctness": "C",
      "id": "af64a38df50a4268971c101af2eb6c71"
    },
    {
      "name": "Patch_1_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884..420dbc0 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n",
      "correctness": "C",
      "id": "29017df693f14377b6e3a76529c37b32"
    },
    {
      "name": "Patch_14_14",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Closure_62/src/com/google/javascript/jscomp/LightweightMessageFormatterjava\n+++ /tmp/jMutRepair_Defects4J_Closure_62/src/com/google/javascript/jscomp/LightweightMessageFormatterjava\n@@ -94,8 +94,8 @@\n \n \n \n-\t\t\tif (((excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \n-\t\t\t(0 <= charno)) && (charno < (sourceExcerpt.length()))) {\n+\t\t\tif (((this.excerpt.equals(com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE)) && \n+\t\t\t(0 <= charno)) && (charno <= (sourceExcerpt.length()))) {\n \t\t\t\tfor (int i = 0; i < charno; i++) {\n \t\t\t\t\tchar c = sourceExcerpt.charAt(i);\n \t\t\t\t\tif (java.lang.Character.isWhitespace(c)) {",
      "correctness": "C",
      "id": "cbba907881e0443b91180dea321360b8"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..7c3857fc 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno || charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
      "correctness": "P",
      "id": "f709053787cb48a49db2bcdc78242ca3"
    },
    {
      "name": "Patch_6_5",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884..420dbc0 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno && charno <= sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
      "correctness": "C",
      "id": "4aeffe0fc07a435eaaef204bca5b932d"
    },
    {
      "name": "Patch_8_8",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884..ff1e396 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+          && 0 <= charno && charno<=sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
      "correctness": "C",
      "id": "2c2beed90d5c490bad2fb9ff2356c3ce"
    }
  ],
  "Closure_46": [
    {
      "name": "Patch_21_21",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java\nindex 7289803e..c4ff612d 100755\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n@@ -139,6 +139,19 @@ class RecordType extends PrototypeObjectType {\n \n   @Override\n   public JSType getLeastSupertype(JSType that) {\n+// start of generated patch\n+if(!that.isRecordType()){\n+return super.getLeastSupertype(that);\n+}\n+RecordTypeBuilder builder=new RecordTypeBuilder(registry);\n+for(String property : properties.keySet()){\n+if(that.toMaybeRecordType().hasProperty(property)&&that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))){\n+builder.addProperty(property,getPropertyType(property),getPropertyNode(property));\n+}\n+}\n+return getLeastSupertype(this,that);\n+// end of generated patch\n+/* start of original code\n     if (!that.isRecordType()) {\n       return super.getLeastSupertype(that);\n     }\n@@ -152,6 +165,7 @@ class RecordType extends PrototypeObjectType {\n       }\n     }\n     return builder.build();\n+ end of original code*/\n   }\n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {",
      "correctness": "P",
      "id": "89f7dc39fade4be581b9ac459025b72e"
    },
    {
      "name": "Patch_9",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java\nold mode 100755\nnew mode 100644\nindex 7289803..9c61b02\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n@@ -137,22 +137,7 @@ class RecordType extends PrototypeObjectType {\n         propertyNode);\n   }\n \n-  @Override\n-  public JSType getLeastSupertype(JSType that) {\n-    if (!that.isRecordType()) {\n-      return super.getLeastSupertype(that);\n-    }\n-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n-    return builder.build();\n-  }\n+  \n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n       RecordType thatRecord = that.toMaybeRecordType();",
      "correctness": "C",
      "id": "ceb12045e19c4597a64e904ec2025995"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java\nold mode 100755\nnew mode 100644\nindex 7289803..9c61b02\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n@@ -137,22 +137,7 @@ class RecordType extends PrototypeObjectType {\n         propertyNode);\n   }\n \n-  @Override\n-  public JSType getLeastSupertype(JSType that) {\n-    if (!that.isRecordType()) {\n-      return super.getLeastSupertype(that);\n-    }\n-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n-    return builder.build();\n-  }\n+  \n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n       RecordType thatRecord = that.toMaybeRecordType();",
      "correctness": "C",
      "id": "69e5b8ce59314d9cb14808009882d202"
    },
    {
      "name": "Patch_37_6",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java\nold mode 100755\nnew mode 100644\nindex 7289803..5cc8b64\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n@@ -139,7 +139,7 @@ class RecordType extends PrototypeObjectType {\n \n   @Override\n   public JSType getLeastSupertype(JSType that) {\n-    if (!that.isRecordType()) {\n+    if (!that.isNumberObjectType()) {\n       return super.getLeastSupertype(that);\n     }\n     RecordTypeBuilder builder = new RecordTypeBuilder(registry);",
      "correctness": "P",
      "id": "fb2b43b1fb5647088cb9159f0ec3c973"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java\nold mode 100755\nnew mode 100644\nindex 7289803..9c61b02\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n@@ -137,22 +137,7 @@ class RecordType extends PrototypeObjectType {\n         propertyNode);\n   }\n \n-  @Override\n-  public JSType getLeastSupertype(JSType that) {\n-    if (!that.isRecordType()) {\n-      return super.getLeastSupertype(that);\n-    }\n-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String property : properties.keySet()) {\n-      if (that.toMaybeRecordType().hasProperty(property) &&\n-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n-              getPropertyType(property))) {\n-        builder.addProperty(property, getPropertyType(property),\n-            getPropertyNode(property));\n-      }\n-    }\n-    return builder.build();\n-  }\n+  \n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n       RecordType thatRecord = that.toMaybeRecordType();",
      "correctness": "C",
      "id": "0d45e8cadef34e8f91053c2373f93a38"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "0f77bea687f7450ca6d617a9169abd0a"
    }
  ],
  "Closure_126": [
    {
      "name": "Patch_32_32",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..817547ad 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,21 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n+// start of generated patch\n+if(!n.isName()){\n+return ;\n+}\n+if(NodeUtil.hasFinally(n)){\n+Node finallyBlock=n.getLastChild();\n+tryMinimizeExits(finallyBlock,exitType,labelName);\n+}\n+// end of generated patch\n+/* start of original code\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n+ end of original code*/\n     }\n \n     // Just a 'label'.",
      "correctness": "P",
      "id": "5edb232a13bb4b1185d9b96c4524f680"
    },
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2019-08-11 08:42:04.502157309 -0400\n+++ /tmp/Arja_Defects4J_Closure_126/patches_jjv5/Patch_1/patched/com/google/javascript/jscomp/MinimizeExitPoints.java\t2019-08-11 09:05:19.376403652 -0400\n@@ -134,14 +134,6 @@\n         Node catchCodeBlock = catchNode.getLastChild();\n         tryMinimizeExits(catchCodeBlock, exitType, labelName);\n       }\n-      /* Don't try to minimize the exits of finally blocks, as this\n-       * can cause problems if it changes the completion type of the finally\n-       * block. See ECMA 262 Sections 8.9 & 12.14\n-       */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n     }\n \n     // Just a 'label'.\n\n\n",
      "correctness": "C",
      "id": "91b9c37c413046be9891e5f122e9d811"
    },
    {
      "name": "Patch_16_7",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f17..0cf101f 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,7 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+      \n     }\n \n     // Just a 'label'.\n",
      "correctness": "C",
      "id": "78e26db5804e4510998c7784597f56cb"
    },
    {
      "name": "Patch_2_2",
      "contributor": "jKali",
      "diff": "--- /tmp/jKali_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPointsjava\n+++ /tmp/jKali_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPointsjava\n@@ -138,7 +138,7 @@\n \n \n \n-\t\t\tif (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\n+\t\t\tif (false) {\n \t\t\t\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\n \t\t\t\ttryMinimizeExits(finallyBlock, exitType, labelName);\n \t\t\t}",
      "correctness": "C",
      "id": "60db911638c54aad95d9684bf4cbe27e"
    },
    {
      "name": "Patch_19_12",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPointsjava\n+++ /tmp/jGenProg_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPointsjava\n@@ -138,10 +138,10 @@\n \n \n \n-\t\t\tif (com.google.javascript.jscomp.NodeUtil.hasFinally(n)) {\n-\t\t\t\tcom.google.javascript.rhino.Node finallyBlock = n.getLastChild();\n-\t\t\t\ttryMinimizeExits(finallyBlock, exitType, labelName);\n-\t\t\t}\n+\n+\n+\n+\n \t\t}\n ",
      "correctness": "C",
      "id": "389c7303891b44c7991804128cbbfa3d"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..69c0ba44 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,7 +138,7 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n+      if (NodeUtil.isImmutableValue(n)) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }",
      "correctness": "P",
      "id": "9c2001b91d274afb9e8b52c4e1dbbbde"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f17..ab2b0c4 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,7 +138,7 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n+      if ((n.isIf())) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }",
      "correctness": "P",
      "id": "4597c7125345475e984bf5d993e732dc"
    },
    {
      "name": "Patch_2_2",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f17..29503e4 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,7 +138,7 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n+      if ((NodeUtil.hasFinally(n)) && (n.isLabel())) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }",
      "correctness": "P",
      "id": "7efe64e262cf48aba75ee80b056a2a67"
    },
    {
      "name": "Patch_9_2",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2019-08-13 22:55:30.981631648 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_126/patches_qwe1/Patch_2/patched/com/google/javascript/jscomp/MinimizeExitPoints.java\t2019-08-13 23:17:11.110207799 -0400\n@@ -140,7 +140,7 @@\n        */\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+        StringBuilder builder = new StringBuilder();\n       }\n     }\n \n\n\n",
      "correctness": "C",
      "id": "5f02c52e7a254f95949767103a25b88f"
    },
    {
      "name": "Patch_9_5",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_126/src/com/google/javascript/jscomp/MinimizeExitPoints.java\t2019-08-13 22:51:28.523554508 -0400\n+++ /tmp/GenProg_Defects4J_Closure_126/patches_efag/Patch_5/patched/com/google/javascript/jscomp/MinimizeExitPoints.java\t2019-08-13 23:13:06.909516277 -0400\n@@ -140,7 +140,6 @@\n        */\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n     }\n \n\n\n",
      "correctness": "C",
      "id": "12b4e28390b8465f955ff2450110c6ff"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "C",
      "id": "1a583d485e0e4275b8a7bc8c72680f08"
    }
  ],
  "Math_75": [
    {
      "name": "Patch_8_8",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..4395d85e4 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,12 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n+// start of generated patch\n+return getPct((Comparable<?>)v);\n+// end of generated patch\n+/* start of original code\n         return getCumPct((Comparable<?>) v);\n+ end of original code*/\n     }\n \n     /**",
      "correctness": "C",
      "id": "2dadd2fb5f36467db38ce04340201c42"
    },
    {
      "name": "Patch_6_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d728..68c8bf2 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,7 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+        return getPct((Comparable<?>) v);\n     }\n \n     /**",
      "correctness": "C",
      "id": "ce694cae75584dbf9dc1a74315bda58f"
    },
    {
      "name": "Patch_7_4",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d728..68c8bf2 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,7 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+        return getPct((Comparable<?>) v);\n     }\n \n     /**",
      "correctness": "C",
      "id": "7a5db52ebfad4816a2e2dc2aea662b52"
    },
    {
      "name": "Patch_3_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d728..68c8bf2 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,7 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+        return getPct((Comparable<?>) v);\n     }\n \n     /**",
      "correctness": "C",
      "id": "230cf5512eb240c097e70424617d7129"
    }
  ],
  "Math_35": [
    {
      "name": "Patch_19_19",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\nindex 67b368deb..0ec5f37c2 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n@@ -47,8 +47,17 @@ public class ElitisticListPopulation extends ListPopulation {\n     public ElitisticListPopulation(final List<Chromosome> chromosomes,\n                                    final int populationLimit,\n                                    final double elitismRate) {\n+// start of generated patch\n+super(chromosomes,populationLimit);\n+if(elitismRate<0||elitismRate>1){\n+throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE,elitismRate,0,1);\n+}\n+this.elitismRate=elitismRate;\n+// end of generated patch\n+/* start of original code\n         super(chromosomes, populationLimit);\n         this.elitismRate = elitismRate;\n+ end of original code*/\n     }\n \n     /**\n@@ -61,8 +70,17 @@ public class ElitisticListPopulation extends ListPopulation {\n      * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range\n      */\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n+// start of generated patch\n+super(populationLimit);\n+if(elitismRate<0||elitismRate>1){\n+throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE,elitismRate,0,1);\n+}\n+this.elitismRate=elitismRate;\n+// end of generated patch\n+/* start of original code\n         super(populationLimit);\n         this.elitismRate = elitismRate;\n+ end of original code*/\n     }\n \n     /**",
      "correctness": "C",
      "id": "901c5bcd20db475baec124fc772c398f"
    },
    {
      "name": "Patch_8_8",
      "contributor": "ACS",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\nindex 67b368deb..ece2fe730 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n@@ -49,6 +49,8 @@ public class ElitisticListPopulation extends ListPopulation {\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n         this.elitismRate = elitismRate;\n+      if (elitismRate>(double)1.0){throw new OutOfRangeException(null,null,null);}\n+      if (elitismRate<(double)0.0){throw new OutOfRangeException(null,null,null);}\n     }\n \n     /**\n@@ -63,6 +65,8 @@ public class ElitisticListPopulation extends ListPopulation {\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n         this.elitismRate = elitismRate;\n+      if (elitismRate>(double)1.0){throw new OutOfRangeException(null,null,null);}\n+      if (elitismRate<(double)0.0){throw new OutOfRangeException(null,null,null);}\n     }\n \n     /**\n",
      "correctness": "C",
      "id": "5a4ba766b63747ee9e0436702c0c4b36"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\nindex 67b368d..6a840e4 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n@@ -48,7 +48,7 @@ public class ElitisticListPopulation extends ListPopulation {\n                                    final int populationLimit,\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n-        this.elitismRate = elitismRate;\n+        setElitismRate(elitismRate);\n     }\n \n     /**",
      "correctness": "C",
      "id": "c1e48630a0bc48c3b33aa7367ece8ae7"
    },
    {
      "name": "Patch_2_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\nindex 67b368d..830579e 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n@@ -62,7 +62,7 @@ public class ElitisticListPopulation extends ListPopulation {\n      */\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n-        this.elitismRate = elitismRate;\n+        setElitismRate(elitismRate);\n     }\n \n     /**",
      "correctness": "C",
      "id": "3d53c3ed9323495799724e9d679aa8c2"
    }
  ],
  "Closure_107": [
    {
      "name": "Patch_3_3",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..58ed7dfa 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -849,6 +849,12 @@ public class CommandLineRunner extends\n       } catch (IOException e) {\n         throw new RuntimeException(\"Reading XTB file\", e);\n       }\n+} else // start of generated patch\n+if(options.messageBundle!=null){\n+options.messageBundle=new EmptyMessageBundle();\n+}\n+// end of generated patch\n+/* start of original code\n     } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n       // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n       // translations file, they might reasonably try to write their own\n@@ -860,6 +866,7 @@ public class CommandLineRunner extends\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n     }\n+ end of original code*/\n \n     return options;\n   }",
      "correctness": "P",
      "id": "d52f8840b48c4e14ad5e6e092582b1bc"
    },
    {
      "name": "Patch_4_4",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_107/src/com/google/javascript/jscomp/CommandLineRunner.java\t2019-08-11 01:38:29.457044271 -0400\n+++ /tmp/Arja_Defects4J_Closure_107/patches_kyto/Patch_4/patched/com/google/javascript/jscomp/CommandLineRunner.java\t2019-08-11 02:02:05.697382650 -0400\n@@ -850,15 +850,6 @@\n         throw new RuntimeException(\"Reading XTB file\", e);\n       }\n     } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n-      options.messageBundle = new EmptyMessageBundle();\n     }\n \n     return options;\n\n\n",
      "correctness": "P",
      "id": "10e42c9a95dd48d6abd66f4b2f367849"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b3547..54f5f08 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -858,7 +858,7 @@ public class CommandLineRunner extends\n       // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n-      options.messageBundle = new EmptyMessageBundle();\n+      \n     }\n \n     return options;",
      "correctness": "P",
      "id": "4307a01b042c4756914a058d7f92bd78"
    },
    {
      "name": "Patch_6_3",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_107/src/com/google/javascript/jscomp/CommandLineRunner.java\t2019-08-13 17:10:51.413908459 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_107/patches_8mez/Patch_3/patched/com/google/javascript/jscomp/CommandLineRunner.java\t2019-08-13 17:33:10.480258852 -0400\n@@ -850,15 +850,7 @@\n         throw new RuntimeException(\"Reading XTB file\", e);\n       }\n     } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n-      options.messageBundle = new EmptyMessageBundle();\n+      int start = 0;\n     }\n \n     return options;\n\n\n",
      "correctness": "P",
      "id": "fbf32821c7f14550b27c0a3c7214ff1f"
    },
    {
      "name": "Patch_1_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_107/src/com/google/javascript/jscomp/CommandLineRunner.java\t2019-08-13 15:06:31.704248185 -0400\n+++ /tmp/GenProg_Defects4J_Closure_107/patches_opji/Patch_1/patched/com/google/javascript/jscomp/CommandLineRunner.java\t2019-08-13 15:36:53.034326265 -0400\n@@ -850,15 +850,6 @@\n         throw new RuntimeException(\"Reading XTB file\", e);\n       }\n     } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n-      options.messageBundle = new EmptyMessageBundle();\n     }\n \n     return options;\n\n\n",
      "correctness": "P",
      "id": "1622a94ca6af4897b76b528d9c10f098"
    }
  ],
  "Lang_27": [
    {
      "name": "Patch_337_337",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..3117daac 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -485,11 +485,19 @@ public class NumberUtils {\n             }\n             mant = str.substring(0, decPos);\n         } else {\n+if(expPos>-1&&expPos<str.length()-1){\n+mant=str.substring(0,expPos);\n+}else {\n+mant=str;\n+}\n+// end of generated patch\n+/* start of original code\n             if (expPos > -1) {\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n             }\n+ end of original code*/\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar) && lastChar != '.') {",
      "correctness": "P",
      "id": "81ac2497e57d434cbf4ff58e6d86ef7d"
    },
    {
      "name": "Patch_158_97",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8..b23bb45 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -486,7 +486,7 @@ public class NumberUtils {\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+                mant = str.substring(0, INTEGER_ZERO);\n             } else {\n                 mant = str;\n             }",
      "correctness": "P",
      "id": "3a061a68812f47efb14709e02bcdd0d9"
    }
  ],
  "Closure_68": [
    {
      "name": "Patch_6659_6659",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 26a56a7a..446f18c2 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1757,9 +1757,17 @@ public final class JsDocInfoParser {\n   private Node parseFunctionType(JsDocToken token) {\n     // NOTE(nicksantos): We're not implementing generics at the moment, so\n     // just throw out TypeParameters.\n+// start of generated patch\n+if(token!=JsDocToken.LP){\n+restoreLookAhead(token);\n+return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n+}\n+// end of generated patch\n+/* start of original code\n     if (token != JsDocToken.LP) {\n       return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n     }\n+ end of original code*/\n \n     Node functionType = newNode(Token.FUNCTION);\n     Node parameters = null;",
      "correctness": "C",
      "id": "2be3e920f93c4e30886fe362e0356d9b"
    }
  ],
  "Math_5": [
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..cfe532bba 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -301,9 +301,16 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n             return NaN;\n         }\n \n+// start of generated patch\n+if(real==0.0&&imaginary==0.0){\n+return INF;\n+}\n+// end of generated patch\n+/* start of original code\n         if (real == 0.0 && imaginary == 0.0) {\n             return NaN;\n         }\n+ end of original code*/\n \n         if (isInfinite) {\n             return ZERO;",
      "correctness": "C",
      "id": "7f7661965cff449393341ef1d7587025"
    },
    {
      "name": "Patch_2_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f2..4524eed 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -302,7 +302,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+if (this.equals(new Complex(0,0))){return INF;}            return NaN;\n         }\n \n         if (isInfinite) {",
      "correctness": "C",
      "id": "e1d94dab6d534648b9654c15e3129437"
    },
    {
      "name": "Patch_67_52",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complexjava\n+++ /tmp/jGenProg_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complexjava\n@@ -302,23 +302,8 @@\n \t\t}\n \n \t\tif (((real) == 0.0) && ((imaginary) == 0.0)) {\n-\t\t\treturn org.apache.commons.math3.complex.Complex.NaN;\n-\t\t}\n \n-\t\tif (isInfinite) {\n-\t\t\treturn org.apache.commons.math3.complex.Complex.ZERO;\n-\t\t}\n \n-\t\tif ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) {\n-\t\t\tdouble q = (real) / (imaginary);\n-\t\t\tdouble scale = 1.0 / (((real) * q) + (imaginary));\n-\t\t\treturn createComplex((scale * q), (-scale));\n-\t\t}else {\n-\t\t\tdouble q = (imaginary) / (real);\n-\t\t\tdouble scale = 1.0 / (((imaginary) * q) + (real));\n-\t\t\treturn createComplex(scale, ((-scale) * q));\n-\t\t}\n-\t}\n \n \n \n@@ -335,21 +320,6 @@\n \n \n \n-\t@java.lang.Override\n-\tpublic boolean equals(java.lang.Object other) {\n-\t\tif ((this) == other) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (other instanceof org.apache.commons.math3.complex.Complex) {\n-\t\t\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other));\n-\t\t\tif (c.isNaN) {\n-\t\t\t\treturn isNaN;\n-\t\t\t}else {\n-\t\t\t\treturn ((real) == (c.real)) && ((imaginary) == (c.imaginary));\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n \n \n \n@@ -358,32 +328,18 @@\n \n \n \n-\t@java.lang.Override\n-\tpublic int hashCode() {\n-\t\tif (isNaN) {\n-\t\t\treturn 7;\n-\t\t}\n-\t\treturn 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + \n-\t\t(org.apache.commons.math3.util.MathUtils.hash(real)));\n-\t}\n \n \n \n \n \n \n-\tpublic double getImaginary() {\n-\t\treturn imaginary;\n-\t}\n \n \n \n \n \n \n-\tpublic double getReal() {\n-\t\treturn real;\n-\t}\n \n \n \n@@ -392,9 +348,6 @@\n \n \n \n-\tpublic boolean isNaN() {\n-\t\treturn isNaN;\n-\t}\n \n \n \n@@ -405,9 +358,6 @@\n \n \n \n-\tpublic boolean isInfinite() {\n-\t\treturn isInfinite;\n-\t}\n \n \n \n@@ -433,18 +383,68 @@\n \n \n \n-\tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws \n-\torg.apache.commons.math3.exception.NullArgumentException {\n-\t\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor);\n-\t\tif ((isNaN) || (factor.isNaN)) {\n-\t\t\treturn org.apache.commons.math3.complex.Complex.NaN;\n-\t\t}\n-\t\tif ((((java.lang.Double.isInfinite(real)) || \n-\t\t(java.lang.Double.isInfinite(imaginary))) || \n-\t\t(java.lang.Double.isInfinite(factor.real))) || \n-\t\t(java.lang.Double.isInfinite(factor.imaginary))) {\n \n-\t\t\treturn org.apache.commons.math3.complex.Complex.INF;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\t\t\treturn org.apache.commons.math3.complex.Complex.INF;} \t\tif (isInfinite) { \t\t\treturn org.apache.commons.math3.complex.Complex.ZERO;} \t\tif ((org.apache.commons.math3.util.FastMath.abs(real)) < (org.apache.commons.math3.util.FastMath.abs(imaginary))) { \t\t\tdouble q = (real) / (imaginary); \t\t\tdouble scale = 1.0 / (((real) * q) + (imaginary)); \t\t\treturn createComplex((scale * q), (-scale));}else { \t\t\tdouble q = (imaginary) / (real); \t\t\tdouble scale = 1.0 / (((imaginary) * q) + (real)); \t\t\treturn createComplex(scale, ((-scale) * q));}} \t@java.lang.Override \tpublic boolean equals(java.lang.Object other) { \t\tif ((this) == other) { \t\t\treturn true;} \t\tif (other instanceof org.apache.commons.math3.complex.Complex) { \t\t\torg.apache.commons.math3.complex.Complex c = ((org.apache.commons.math3.complex.Complex) (other)); \t\t\tif (c.isNaN) { \t\t\t\treturn isNaN;}else { \t\t\t\treturn ((real) == (c.real)) && ((imaginary) == (c.imaginary));}} \t\treturn false;} \t@java.lang.Override \tpublic int hashCode() { \t\tif (isNaN) { \t\t\treturn 7;} \t\treturn 37 * ((17 * (org.apache.commons.math3.util.MathUtils.hash(imaginary))) + (org.apache.commons.math3.util.MathUtils.hash(real)));} \tpublic double getImaginary() { \t\treturn imaginary;} \tpublic double getReal() { \t\treturn real;} \tpublic boolean isNaN() { \t\treturn isNaN;} \tpublic boolean isInfinite() { \t\treturn isInfinite;} \tpublic org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor) throws org.apache.commons.math3.exception.NullArgumentException { \t\torg.apache.commons.math3.util.MathUtils.checkNotNull(factor); \t\tif ((isNaN) || (factor.isNaN)) { \t\t\treturn org.apache.commons.math3.complex.Complex.NaN;} \t\tif ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) { \t\t\treturn org.apache.commons.math3.complex.Complex.INF;\n \t\t}\n \t\treturn createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), \n \t\t(((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));",
      "correctness": "C",
      "id": "37493331d56f4d878c0b92012e11d768"
    },
    {
      "name": "Patch_2_2",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f2..ac8185b 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -302,7 +302,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+            return INF;\n         }\n \n         if (isInfinite) {",
      "correctness": "C",
      "id": "dc71c9e4640e4163a15332cab783a0b8"
    },
    {
      "name": "Patch_510_172",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_5/src/main/java/org/apache/commons/math3/complex/Complex.java\t2019-06-23 06:54:01.923268947 -0400\n+++ /tmp/RSRepair_Defects4J_Math_5/patches_6lmm/Patch_473/patched/org/apache/commons/math3/complex/Complex.java\t2019-06-23 07:42:13.551534862 -0400\n@@ -302,7 +302,7 @@\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+            return INF;\n         }\n \n         if (isInfinite) {\n\n\n",
      "correctness": "C",
      "id": "7ba11254ca684fcb831d4b2b0157d968"
    }
  ],
  "Math_33": [
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..fa0cfc825 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,9 +335,16 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n+// start of generated patch\n+if(Precision.compareTo(entry,0.0,epsilon)>0){\n+columnsToDrop.add(i);\n+}\n+// end of generated patch\n+/* start of original code\n             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                 columnsToDrop.add(i);\n             }\n+ end of original code*/\n         }\n \n         // non-basic artificial variables",
      "correctness": "C",
      "id": "5c462842b946492b8c5536a2c1dffaf8"
    },
    {
      "name": "Patch_40",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a..42321ac 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,7 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            if (Precision.compareTo(entry, 0d, this.epsilon) > 0) {\n                 columnsToDrop.add(i);\n             }\n         }",
      "correctness": "C",
      "id": "3f26066a82634f8b8b8efb78be71667a"
    },
    {
      "name": "Patch_64_17",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a..42321ac 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,7 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            if (Precision.compareTo(entry, 0d, this.epsilon) > 0) {\n                 columnsToDrop.add(i);\n             }\n         }",
      "correctness": "C",
      "id": "6d190b0e58b1449181fb05b14e5fee86"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -337,4 +337,6 @@\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                columnsToDrop.add(i);\n+            if (org.apache.commons.math3.optimization.linear.SimplexTableau.this.numSlackVariables < org.apache.commons.math3.optimization.linear.SimplexTableau.this.constraints.size()) {\n+                if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+                    columnsToDrop.add(i);\n+                }\n             }\n",
      "correctness": "P",
      "id": "416033e4c26e4ab69f9748299ce871cc"
    }
  ],
  "Closure_73": [
    {
      "name": "Patch_1_1",
      "contributor": "SimFix",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..6392591a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,6 +1042,14 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n+// start of generated patch\n+if(c>0x1f&&c<0x7f){\n+sb.append(c);\n+}else {\n+appendHexJavaScriptRepresentation(sb,c);\n+}\n+// end of generated patch\n+/* start of original code\n             if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n@@ -1050,6 +1058,7 @@ class CodeGenerator {\n               // so we play it safe and unicode escape them.\n               appendHexJavaScriptRepresentation(sb, c);\n             }\n+ end of original code*/\n           }\n       }\n     }",
      "correctness": "C",
      "id": "fba8e37900004e318ac9494f39390347"
    },
    {
      "name": "Patch_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74f..823d897 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,7 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+            if (c > 0x1f && c < 0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
      "correctness": "C",
      "id": "3f810f0fce35493eacbb11f779f069c4"
    },
    {
      "name": "Patch_5_5",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..823d897a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,7 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+            if (c > 0x1f && c < 0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
      "correctness": "C",
      "id": "d77cb8df55b94814b39e3ce376e13bc1"
    },
    {
      "name": "Patch_11_9",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74f..823d897 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,7 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+            if (c > 0x1f && c < 0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
      "correctness": "C",
      "id": "7bc3b0fc84ae42c3b51ecf64796c4b8a"
    },
    {
      "name": "Patch_8_8",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74f..fc0d0f4 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,7 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+            if (c > 0x1f && c<0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
      "correctness": "C",
      "id": "c502c410f35845f99636194e2aec4ae3"
    }
  ],
  "Math_84": [
    {
      "name": "Patch_2_2",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..aa20db734 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -87,12 +87,19 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+// start of generated patch\n+if(comparator.compare(contracted,best)<=0){\n+return ;\n+}\n+// end of generated patch\n+/* start of original code\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n \n             // check convergence\n                 return;\n             }\n+ end of original code*/\n \n         }\n ",
      "correctness": "P",
      "id": "ca622644b16e4a9db18b6bcc78ce7164"
    },
    {
      "name": "Patch_53_43",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2019-08-04 04:15:24.315689947 -0400\n+++ /tmp/Arja_Defects4J_Math_84/patches_pkxe/Patch_43/patched/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2019-08-04 04:23:23.735934895 -0400\n@@ -87,12 +87,7 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+            break;\n \n         }\n \n\n\n",
      "correctness": "P",
      "id": "4c3e421d63f94787afb0cb91543ac224"
    },
    {
      "name": "Patch_1_1",
      "contributor": "jMutRepair",
      "diff": "--- /tmp/jMutRepair_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionaljava\n+++ /tmp/jMutRepair_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionaljava\n@@ -87,7 +87,7 @@\n \n \n \t\t\tfinal org.apache.commons.math.optimization.RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-\t\t\tif ((comparator.compare(contracted, best)) < 0) {\n+\t\t\tif ((comparator.compare(contracted, best)) == 0) {",
      "correctness": "P",
      "id": "8c28d263406e44348f08e45e7e388080"
    },
    {
      "name": "Patch_1_1",
      "contributor": "jKali",
      "diff": "--- /tmp/jKali_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionaljava\n+++ /tmp/jKali_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionaljava\n@@ -87,7 +87,7 @@\n \n \n \t\t\tfinal org.apache.commons.math.optimization.RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-\t\t\tif ((comparator.compare(contracted, best)) < 0) {\n+\t\t\tif (true) {",
      "correctness": "P",
      "id": "3ee5e2a7ae604bcf9047eb300fda1416"
    },
    {
      "name": "Patch_44_34",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionaljava\n+++ /tmp/jGenProg_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionaljava\n@@ -92,7 +92,7 @@\n \n \n \t\t\t\treturn;\n-\t\t\t}\n+\t\t\t} \t\t\treturn;\n \n \t\t} ",
      "correctness": "P",
      "id": "437b8a81ea764551b6fe9e454c6c8aa6"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9d..43b1fcf 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -87,7 +87,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (comparator.compare(contracted, best) <= 0) {\n                 // accept the contracted simplex\n \n             // check convergence",
      "correctness": "P",
      "id": "e49cc125d4ed47a3b9edc69b43843dce"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9d..43b1fcf 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -87,7 +87,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (comparator.compare(contracted, best) <= 0) {\n                 // accept the contracted simplex\n \n             // check convergence",
      "correctness": "P",
      "id": "17b910d2c6ce4d5dbc9947b88cc69127"
    },
    {
      "name": "Patch_62_43",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2019-08-04 16:17:17.909819916 -0400\n+++ /tmp/RSRepair_Defects4J_Math_84/patches_j67s/Patch_43/patched/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2019-08-04 16:23:07.237998397 -0400\n@@ -87,12 +87,7 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+            break;\n \n         }\n \n\n\n",
      "correctness": "P",
      "id": "52910d63a0c64a948f8556a3995e6d96"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "8255a94cd01c42999a8e98f7a89df82e"
    }
  ],
  "Math_53": [
    {
      "name": "Patch_2_2",
      "contributor": "SimFix",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..831dd3dda 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -149,9 +149,18 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      */\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n+// start of generated patch\n+MathUtils.checkNotNull(rhs);\n+if(isNaN||rhs.isNaN){\n+return NaN;\n+}\n+return createComplex(real+rhs.getReal(),imaginary+rhs.getImaginary());\n+// end of generated patch\n+/* start of original code\n         MathUtils.checkNotNull(rhs);\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n+ end of original code*/\n     }\n \n     /**",
      "correctness": "C",
      "id": "06670287eb3d48cea8a3a7df6b3778be"
    },
    {
      "name": "Patch_61_50",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complex.java\t2019-08-04 00:19:09.560447720 -0400\n+++ /tmp/Arja_Defects4J_Math_53/patches_3q2v/Patch_50/patched/org/apache/commons/math/complex/Complex.java\t2019-08-04 00:56:35.685595320 -0400\n@@ -149,7 +149,9 @@\n      */\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n+        if (isNaN || rhs.isNaN) {\n+\t\t\treturn NaN;\n+\t\t}\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n\n\n",
      "correctness": "C",
      "id": "d83597e368e147d1980009d4019113b5"
    },
    {
      "name": "Patch_17_9",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complexjava\n+++ /tmp/jGenProg_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complexjava\n@@ -150,9 +150,6 @@\n \tpublic org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex rhs) throws \n \torg.apache.commons.math.exception.NullArgumentException {\n \t\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs);\n-\t\treturn createComplex(((real) + (rhs.getReal())), \n-\t\t((imaginary) + (rhs.getImaginary())));\n-\t}\n \n \n \n@@ -168,12 +165,6 @@\n \n \n \n-\tpublic org.apache.commons.math.complex.Complex conjugate() {\n-\t\tif (isNaN) {\n-\t\t\treturn org.apache.commons.math.complex.Complex.NaN;\n-\t\t}\n-\t\treturn createComplex(real, (-(imaginary)));\n-\t}\n \n \n \n@@ -210,12 +201,21 @@\n \n \n \n-\tpublic org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex rhs) throws \n-\torg.apache.commons.math.exception.NullArgumentException {\n-\t\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs);\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n \t\tif ((isNaN) || (rhs.isNaN)) {\n \t\t\treturn org.apache.commons.math.complex.Complex.NaN;\n-\t\t}\n+\t\t} \t\treturn createComplex(((real) + (rhs.getReal())), ((imaginary) + (rhs.getImaginary())));} \tpublic org.apache.commons.math.complex.Complex conjugate() { \t\tif (isNaN) { \t\t\treturn org.apache.commons.math.complex.Complex.NaN;} \t\treturn createComplex(real, (-(imaginary)));} \tpublic org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex rhs) throws org.apache.commons.math.exception.NullArgumentException { \t\torg.apache.commons.math.util.MathUtils.checkNotNull(rhs); \t\tif ((isNaN) || (rhs.isNaN)) { \t\t\treturn org.apache.commons.math.complex.Complex.NaN;}\n \n \t\tdouble c = rhs.getReal();\n \t\tdouble d = rhs.getImaginary();",
      "correctness": "C",
      "id": "5086bcb5dc9c400cb1b1fcca6ef046b1"
    },
    {
      "name": "Patch_4_3",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_53/src/main/java/org/apache/commons/math/complex/Complex.java\t2019-08-04 13:42:48.709084057 -0400\n+++ /tmp/RSRepair_Defects4J_Math_53/patches_7vyd/Patch_3/patched/org/apache/commons/math/complex/Complex.java\t2019-08-04 14:05:44.301786881 -0400\n@@ -149,7 +149,9 @@\n      */\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n+        if (isNaN || rhs.isNaN) {\n+\t\t\treturn NaN;\n+\t\t}\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n\n\n",
      "correctness": "C",
      "id": "f85cfd5f345940db8f23cadcc0681573"
    }
  ],
  "Math_97": [
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -137,9 +137,9 @@\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n+        if (this.functionValueAccuracy <= sign) {\n             // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+            // neither value is close to zero and min and max do not bracket root.\n+            throw new IllegalArgumentException\n+            (\"Function values at endpoints do not have different signs.\" +\n+            \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n+            \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n         } else {\n",
      "correctness": "P",
      "id": "4ceb69cd43784714b5a1de48a7925d6c"
    },
    {
      "name": "Patch_13_13",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87e..481fa56 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,8 +135,7 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n+if (sign >= 0&&!(sign<=(double)0.6)) {            // check if either value is close to a zero\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +",
      "correctness": "P",
      "id": "393dd6f83ff24de9be0650230bd681e8"
    },
    {
      "name": "Patch_72_40",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87e..ce523fc 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,7 +135,7 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n+        if (sign >= 1E-6) {\n             // check if either value is close to a zero\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException",
      "correctness": "P",
      "id": "f368e4b2a88d4ab2bd9ee76d6a0e631b"
    }
  ],
  "Lang_55": [
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -117,3 +117,5 @@\n         }\n-            stopTime = System.currentTimeMillis();\n+            if (this.runningState == 1) {\n+                stopTime = System.currentTimeMillis();\n+            }\n         this.runningState = STATE_STOPPED;\n",
      "correctness": "C",
      "id": "0dbfc016e53b4c59827a9e318d0de9f6"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -117,3 +117,5 @@\n         }\n-            stopTime = System.currentTimeMillis();\n+            if (org.apache.commons.lang.time.StopWatch.this.stopTime < 10) {\n+                stopTime = System.currentTimeMillis();\n+            }\n         this.runningState = STATE_STOPPED;\n",
      "correctness": "P",
      "id": "9ba1b3f7bed04ef7b1e111d1d020d523"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "C",
      "id": "1aa4e2570d604934b066fc84b3275755"
    }
  ],
  "Math_32": [
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n@@ -135,3 +135,3 @@\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if ((Boolean) tree.getAttribute()) {\n+            if (false) {\n                 // the instance covers the whole space\n",
      "correctness": "P",
      "id": "2e90f3345e6e4d78b3f8ce43e31cc55e"
    },
    {
      "name": "Patch_2_2",
      "contributor": "jKali",
      "diff": "--- /tmp/jKali_Defects4J_Math_32/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetjava\n+++ /tmp/jKali_Defects4J_Math_32/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetjava\n@@ -133,7 +133,7 @@\n \n \t\tif ((v.length) == 0) {\n \t\t\tfinal org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false);\n-\t\t\tif (((java.lang.Boolean) (tree.getAttribute()))) {\n+\t\t\tif (false) {\n \n \t\t\t\tsetSize(java.lang.Double.POSITIVE_INFINITY);\n \t\t\t\tsetBarycenter(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN);",
      "correctness": "P",
      "id": "52483890a1c04a26acf094274880cc37"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "83e59ab1305a489c93a505fab2705e0b"
    }
  ],
  "Lang_46": [
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -243,3 +243,5 @@\n                     case '/' :\n-                            out.write('\\\\');\n+                            if (escapeSingleQuote) {\n+                                out.write('\\\\');\n+                            }\n                         out.write('/');\n",
      "correctness": "C",
      "id": "77269916aea64482be1d1cfc9d07afee"
    },
    {
      "name": "Patch_5_5",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java\t2019-06-25 23:38:53.611956292 -0400\n+++ /tmp/Arja_Defects4J_Lang_46/patches_k3mh/Patch_5/patched/org/apache/commons/lang/StringEscapeUtils.java\t2019-06-25 23:43:05.535955721 -0400\n@@ -241,7 +241,9 @@\n                         out.write('\\\\');\n                         break;\n                     case '/' :\n-                            out.write('\\\\');\n+\t\t\t\t\tif (escapeSingleQuote) {\n+\t\t\t\t\t\tout.write('\\\\');\n+\t\t\t\t\t}\n                         out.write('/');\n                         break;\n                     default :\n\n\n",
      "correctness": "C",
      "id": "0bb88cc741054b47b306efcfa7767acd"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -243,3 +243,5 @@\n                     case '/' :\n-                            out.write('\\\\');\n+                            if (escapeSingleQuote) {\n+                                out.write('\\\\');\n+                            }\n                         out.write('/');\n",
      "correctness": "C",
      "id": "3663299737a7475eb4f253daf09cee46"
    },
    {
      "name": "Patch_1738_1089",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java\t2019-07-04 10:45:14.757898329 -0400\n+++ /tmp/RSRepair_Defects4J_Lang_46/patches_lza6/Patch_1089/patched/org/apache/commons/lang/StringEscapeUtils.java\t2019-07-04 11:00:00.752659211 -0400\n@@ -241,7 +241,9 @@\n                         out.write('\\\\');\n                         break;\n                     case '/' :\n-                            out.write('\\\\');\n+\t\t\t\t\tif (escapeSingleQuote) {\n+\t\t\t\t\t\tout.write('\\\\');\n+\t\t\t\t\t}\n                         out.write('/');\n                         break;\n                     default :\n\n\n",
      "correctness": "C",
      "id": "d9530e0b8f0944b6b1d5cf79b6f8fd0f"
    }
  ],
  "Math_101": [
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n@@ -377,4 +377,3 @@\n         if (\n-            source.substring(startIndex, endIndex).compareTo(\n-            getImaginaryCharacter()) != 0) {\n+            startIndex == source.length()) {\n             // set index back to initial, error index should be the start index\n",
      "correctness": "P",
      "id": "ca69e0dc7fbf409aa5d870dcfff7632c"
    }
  ],
  "Math_88": [
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -338,3 +338,5 @@\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                         if (mostNegative != coefficients[0]) {\n+                             coefficients[i] = 0;\n+                         }\n                     }\n",
      "correctness": "P",
      "id": "3b2b0133625446f1ac7933fe7e45cda9"
    },
    {
      "name": "Patch_317_260",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2019-06-27 12:27:25.988626596 -0400\n+++ /tmp/Arja_Defects4J_Math_88/patches_02mm/Patch_260/patched/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2019-06-27 12:35:13.942696952 -0400\n@@ -335,7 +335,9 @@\n                     (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n+                    coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))\n+\t\t\t\t\t\t\t- (restrictToNonNegative ? 0 : mostNegative);\n+\t\t\t\t\tif (tableau.getEntry(basicRow, j) == 1) {\n                          coefficients[i] = 0;\n                     }\n                 }\n\n\n",
      "correctness": "P",
      "id": "165e9b97d3f248eca246452b71fc23d0"
    },
    {
      "name": "Patch_117_64",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f..c6aee06 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,7 @@ class SimplexTableau implements Serializable {\n                     (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n+                    if (tableau.getEntry(basicRow, i) == 1) {\n                          coefficients[i] = 0;\n                     }\n                 }\n",
      "correctness": "P",
      "id": "70d82161a33b405ab86e83ce09410f76"
    },
    {
      "name": "Patch_9909_5900",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f..c6aee06 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,7 @@ class SimplexTableau implements Serializable {\n                     (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n+                    if (tableau.getEntry(basicRow, i) == 1) {\n                          coefficients[i] = 0;\n                     }\n                 }",
      "correctness": "P",
      "id": "9bd8dfeb05eb4903a406774d50d4d866"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -338,3 +338,5 @@\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                         if ((org.apache.commons.math.optimization.linear.SimplexTableau.this.constraints.size()) != (coefficients.length)) {\n+                             coefficients[i] = 0;\n+                         }\n                     }\n",
      "correctness": "P",
      "id": "87216f292a2e4820bd47bf6d67e4ea19"
    },
    {
      "name": "Patch_99_66",
      "contributor": "kPAR",
      "diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f..c6aee06 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,7 @@ class SimplexTableau implements Serializable {\n                     (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n+                    if (tableau.getEntry(basicRow, i) == 1) {\n                          coefficients[i] = 0;\n                     }\n                 }",
      "correctness": "P",
      "id": "da47ab2d2c5548f9b648dfc783525f65"
    },
    {
      "name": "Patch_198_105",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f..a48c4eb 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,7 @@ class SimplexTableau implements Serializable {\n                     (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n+                    if (j == i && (tableau.getEntry(basicRow, j) == 1)) {\n                          coefficients[i] = 0;\n                     }\n                 }",
      "correctness": "P",
      "id": "a125b2127b1b4e44aae508744c6642a9"
    },
    {
      "name": "Patch_67_37",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_88/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2019-07-11 20:23:59.483588319 -0400\n+++ /tmp/RSRepair_Defects4J_Math_88/patches_oqu5/Patch_37/patched/org/apache/commons/math/optimization/linear/SimplexTableau.java\t2019-07-11 20:27:26.720791410 -0400\n@@ -335,7 +335,9 @@\n                     (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n+                    coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))\n+\t\t\t\t\t\t\t- (restrictToNonNegative ? 0 : mostNegative);\n+\t\t\t\t\tif (tableau.getEntry(basicRow, j) == 1) {\n                          coefficients[i] = 0;\n                     }\n                 }\n\n\n",
      "correctness": "P",
      "id": "30684f07480b4cee88fb854721cb73b3"
    }
  ],
  "Lang_63": [
    {
      "name": "Patch_1_1",
      "contributor": "DynaMoth",
      "diff": "--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -437,3 +437,5 @@\n             int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n+            if (false) {\n+                end.add( field, newdiff );\n+            }\n             return newdiff;\n",
      "correctness": "P",
      "id": "c8f82598b2774deaa2d63738d6bfb3ea"
    },
    {
      "name": "Patch_6_6",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2019-06-26 02:31:42.539250457 -0400\n+++ /tmp/Arja_Defects4J_Lang_63/patches_xj9a/Patch_6/patched/org/apache/commons/lang/time/DurationFormatUtils.java\t2019-06-26 02:35:57.712083927 -0400\n@@ -435,7 +435,8 @@\n         int startValue = start.get(field);\n         if (endValue < startValue) {\n             int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n+            end = (Calendar) start.clone();\n+\t\t\tend.add( field, newdiff );\n             return newdiff;\n         } else {\n             return 0;\n\n\n",
      "correctness": "P",
      "id": "4b1a9d827e5842988263fd1bb3063cb6"
    },
    {
      "name": "Patch_294_57",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\nindex 127b927..5261db5 100644\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -319,7 +319,7 @@ public class DurationFormatUtils {\n         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n         hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n-        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n+        days -= reduceAndCorrect(end, end, Calendar.DAY_OF_MONTH, days);\n         months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n         years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n",
      "correctness": "P",
      "id": "c063153d17ec4353b4ff9b46a7942f56"
    },
    {
      "name": "Patch_302_174",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\nindex 127b927..c2c4af5 100644\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -283,7 +283,8 @@ public class DurationFormatUtils {\n         int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);\n         int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);\n         int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);\n-        int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);\n+        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n+\tint years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);\n \n         // each initial estimate is adjusted in case it is under 0\n         while (milliseconds < 0) {\n@@ -320,7 +321,7 @@ public class DurationFormatUtils {\n         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n         hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n         days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n-        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n+        \n         years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n \n         // This next block of code adds in values that",
      "correctness": "P",
      "id": "1bfc5bffe244424fb717c95e90709543"
    },
    {
      "name": "Patch_211_63",
      "contributor": "kPAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\nindex 127b927..5261db5 100644\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -319,7 +319,7 @@ public class DurationFormatUtils {\n         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n         hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n-        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n+        days -= reduceAndCorrect(end, end, Calendar.DAY_OF_MONTH, days);\n         months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n         years -= reduceAndCorrect(start, end, Calendar.YEAR, years);",
      "correctness": "P",
      "id": "740ae10fb4f74dc79c949675f88aedc7"
    },
    {
      "name": "Patch_627_240",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\nindex 127b927..c2c4af5 100644\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -283,7 +283,8 @@ public class DurationFormatUtils {\n         int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);\n         int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);\n         int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);\n-        int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);\n+        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n+\tint years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);\n \n         // each initial estimate is adjusted in case it is under 0\n         while (milliseconds < 0) {\n@@ -320,7 +321,7 @@ public class DurationFormatUtils {\n         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n         hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n         days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n-        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n+        \n         years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n \n         // This next block of code adds in values that",
      "correctness": "P",
      "id": "567361593ef64d5d88abf2440d47b75e"
    },
    {
      "name": "Patch_13_10",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2019-07-04 18:22:04.869908918 -0400\n+++ /tmp/RSRepair_Defects4J_Lang_63/patches_faoi/Patch_10/patched/org/apache/commons/lang/time/DurationFormatUtils.java\t2019-07-04 18:26:47.789175451 -0400\n@@ -318,7 +318,6 @@\n         milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);\n         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n-        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n         days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n         months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n         years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n@@ -435,7 +434,6 @@\n         int startValue = start.get(field);\n         if (endValue < startValue) {\n             int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n             return newdiff;\n         } else {\n             return 0;\n\n\n",
      "correctness": "P",
      "id": "a73308cf55354e35b39e2cad98aef534"
    },
    {
      "name": "Patch_1_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\t2019-07-02 00:08:16.904882845 -0400\n+++ /tmp/GenProg_Defects4J_Lang_63/patches_tcf6/Patch_1/patched/org/apache/commons/lang/time/DurationFormatUtils.java\t2019-07-02 00:12:25.233237264 -0400\n@@ -320,7 +320,6 @@\n         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n         hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n         days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n-        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n         years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n \n         // This next block of code adds in values that \n\n\n",
      "correctness": "P",
      "id": "690cc89380484f0484b6cb43151c3bc5"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "d9c9f32eca44478791fa9f44de946617"
    }
  ],
  "Math_61": [
    {
      "name": "Patch_1_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\nindex 148daad..c225e86 100644\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n@@ -14,7 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.math.distribution;\n+package org.apache.commons.math.distribution;import  org.apache.commons.math.exception.NotStrictlyPositiveException;\n \n import java.io.Serializable;\n \n@@ -91,7 +91,7 @@ public class PoissonDistributionImpl extends AbstractIntegerDistribution\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         if (p <= 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);\n+if (p <= 0){throw new NotStrictlyPositiveException(null);}            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));",
      "correctness": "C",
      "id": "c5c7710be03a428f84119869d08bd47c"
    }
  ],
  "Math_93": [
    {
      "name": "Patch_5_5",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex 7d8aa4d..1bdade6 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -25,6 +25,13 @@ import java.util.Arrays;\n  * @version $Revision$ $Date$\n  */\n public final class MathUtils {\n+private static long patch_method(int n){\n+  long result=1;\n+  for (int i=2; i <= n; i++) {\n+    result*=i;\n+  }\n+  return result;\n+}\n \n     /** Smallest positive number such that 1 - EPSILON is not numerically equal to 1. */\n     public static final double EPSILON = 0x1.0p-53;\n@@ -374,7 +381,7 @@ public final class MathUtils {\n         if (n < 0) {\n             throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n         }\n-        return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+if (n<(int)20.0){return patch_method(n);}        return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n     }\n \n     /**",
      "correctness": "P",
      "id": "6104aae4fb7e4a53ac5fa05a39447e5b"
    }
  ],
  "Math_77": [
    {
      "name": "Patch_3_2",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\nindex 37c4417..3e2ae23 100644\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n@@ -718,7 +718,7 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n-            max += Math.max(max, Math.abs(a));\n+if (max==0.0){return 6.0;}            max += Math.max(max, Math.abs(a));\n         }\n         return max;\n     }\ndiff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex e025960..78e71da 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -500,7 +500,7 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV\n         Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n-            max += iter.value();\n+if (max==0.0){return 6.0;}            max += iter.value();\n         }\n         return max;\n     }",
      "correctness": "P",
      "id": "72b4f118f66c42e5835cfc58679ee838"
    },
    {
      "name": "Patch_15_5",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\nindex 37c4417..f37dd61 100644\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n@@ -713,15 +713,7 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable\n         return sum;\n     }\n \n-    /** {@inheritDoc} */\n-    @Override\n-    public double getLInfNorm() {\n-        double max = 0;\n-        for (double a : data) {\n-            max += Math.max(max, Math.abs(a));\n-        }\n-        return max;\n-    }\n+    \n \n     /** {@inheritDoc} */\n     public double getDistance(RealVector v)\n",
      "correctness": "P",
      "id": "6bb8114216ab42e3a33f8736416442fa"
    },
    {
      "name": "Patch_18_6",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex e025960..ea004b9 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -495,15 +495,7 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV\n         return max;\n     }\n \n-    public double getLInfNorm() {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            max += iter.value();\n-        }\n-        return max;\n-    }\n+    \n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from\n",
      "correctness": "P",
      "id": "f90b1381b52b4c34a528037b9604dc96"
    },
    {
      "name": "Patch_11_5",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex e02596003..ea004b93f 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -495,15 +495,7 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV\n         return max;\n     }\n \n-    public double getLInfNorm() {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            max += iter.value();\n-        }\n-        return max;\n-    }\n+    \n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from",
      "correctness": "P",
      "id": "07983a4aeddd4e7b9f40628ad44403fe"
    },
    {
      "name": "Patch_81_42",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex e02596003..ea004b93f 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -495,15 +495,7 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV\n         return max;\n     }\n \n-    public double getLInfNorm() {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            max += iter.value();\n-        }\n-        return max;\n-    }\n+    \n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from",
      "correctness": "P",
      "id": "ceb21b019fb24358b078b2957c9dd8ed"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\nindex 37c4417..22d0a28 100644\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n@@ -718,7 +718,7 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n-            max += Math.max(max, Math.abs(a));\n+            max = Math.max(max, Math.abs(a));\n         }\n         return max;\n     }",
      "correctness": "C",
      "id": "2422da4417674d9198523957ba5a5035"
    },
    {
      "name": "Patch_2_2",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex e025960..ea004b9 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -495,15 +495,7 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV\n         return max;\n     }\n \n-    public double getLInfNorm() {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            max += iter.value();\n-        }\n-        return max;\n-    }\n+    \n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from",
      "correctness": "C",
      "id": "66ad72a918c546009c26ceb25796f0c2"
    }
  ],
  "Math_90": [
    {
      "name": "Patch_1_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex 75914d7..97d0346 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -130,7 +130,7 @@ public class Frequency implements Serializable {\n                 freqTable.put(obj, Long.valueOf(count.longValue() + 1));\n             }\n         } catch (ClassCastException ex) {   \n-            //TreeMap will throw ClassCastException if v is not comparable\n+if (!(v instanceof Comparable<?>)){throw new ClassCastException();}            //TreeMap will throw ClassCastException if v is not comparable\n             throw new IllegalArgumentException(\"Value not comparable to existing values.\");\n         }\n     }",
      "correctness": "C",
      "id": "ad729b41fd9b4b50851594ad66826631"
    }
  ],
  "Lang_24": [
    {
      "name": "Patch_1_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 4a1d845..445ce73 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -1409,7 +1409,7 @@ public class NumberUtils {\n             }\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n-                // not allowing L with an exponent or decimal point\n+if (hasDecPoint==true){return false;}                // not allowing L with an exponent or decimal point\n                 return foundDigit && !hasExp;\n             }\n             // last character is illegal",
      "correctness": "C",
      "id": "66c19db7c04d4c4fb993ad2c0780d96e"
    },
    {
      "name": "Patch_247_247",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 4a1d845..75571c2 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -1410,7 +1410,7 @@ public class NumberUtils {\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                 // not allowing L with an exponent or decimal point\n-                return foundDigit && !hasExp;\n+                return (foundDigit && !hasExp) && !(hasDecPoint || hasExp);\n             }\n             // last character is illegal\n             return false;",
      "correctness": "C",
      "id": "554d0a8a6e8543debe487f9d848649cf"
    },
    {
      "name": "Patch_12_12",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 4a1d845..75571c2 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -1410,7 +1410,7 @@ public class NumberUtils {\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                 // not allowing L with an exponent or decimal point\n-                return foundDigit && !hasExp;\n+                return (foundDigit && !hasExp) && !(hasDecPoint || hasExp);\n             }\n             // last character is illegal\n             return false;",
      "correctness": "C",
      "id": "da690c5ca3764d139f07e2b5af4ca958"
    }
  ],
  "Math_25": [
    {
      "name": "Patch_2_2",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java\nindex 1da2c45..afcb19b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java\n@@ -322,7 +322,7 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {\n             } else {\n                     // In some ill-conditioned cases (cf. MATH-844), the guesser\n                     // procedure cannot produce sensible results.\n-\n+if (c2==0.0){throw new MathIllegalStateException();}\n                 a = FastMath.sqrt(c1 / c2);\n                 omega = FastMath.sqrt(c2 / c3);\n             }",
      "correctness": "C",
      "id": "ee2ce92222a1462b83a2086bcd27a98c"
    }
  ],
  "Time_15": [
    {
      "name": "Patch_1_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2..10cb24c 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,7 +135,7 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n-                return -val1;\n+if (val1==Long.MIN_VALUE){throw new ArithmeticException();}                return -val1;\n             case 0:\n                 return 0L;\n             case 1:",
      "correctness": "C",
      "id": "5301380a36524e88865aedb9d1530350"
    }
  ],
  "Chart_14": [
    {
      "name": "Patch_20_8",
      "contributor": "ACS",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..cd0a402 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2163,7 +2163,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+if (markers == null){return false;}        boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }\n@@ -2445,7 +2445,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+if (markers == null){return false;}        boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }\ndiff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..a6234ab 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2290,7 +2290,7 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+if (markers == null){return false;}        boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }\n@@ -2526,7 +2526,7 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+if (markers == null){return false;}        boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "C",
      "id": "050f6ca7aeb642c6b51b1b053195a8bf"
    },
    {
      "name": "Patch_124_3",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..c10fd5a 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2290,7 +2290,7 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = this.annotations.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }\n",
      "correctness": "P",
      "id": "24270a56e23a4ecd8f4583720167537b"
    },
    {
      "name": "Patch_170_4",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..8399cea 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2526,7 +2526,7 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = this.annotations.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }\n",
      "correctness": "P",
      "id": "183419e13cdf441e93c6b9372070290c"
    },
    {
      "name": "Patch_78_2",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..6888e79 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2445,7 +2445,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = this.annotations.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }\n",
      "correctness": "P",
      "id": "ffe9295fc9f243b8958f7eb11a45efb3"
    },
    {
      "name": "Patch_39_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..d997068 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2163,7 +2163,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = this.annotations.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }\n",
      "correctness": "P",
      "id": "fcf28b7171614fe9bf0dbda9112b2062"
    },
    {
      "name": "Patch_832_204",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..8399cea 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2526,7 +2526,7 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = this.annotations.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "P",
      "id": "a17d6324642b4df4aeb3fc5c2b6eb67f"
    },
    {
      "name": "Patch_610_149",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..c10fd5a 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2290,7 +2290,7 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = this.annotations.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "P",
      "id": "0d245033c78949309ab3e71bb375ffc3"
    },
    {
      "name": "Patch_194_47",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..d997068 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2163,7 +2163,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = this.annotations.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "P",
      "id": "7f13f0cbeda44e30936fe9486090726b"
    },
    {
      "name": "Patch_388_94",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..6888e79 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2445,7 +2445,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = this.annotations.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "P",
      "id": "2304631328824c6badaf512ab16ee897"
    },
    {
      "name": "Patch_9_6",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..74dfab4 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2290,7 +2290,10 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        if (markers == null) {\n+    return false;\n+}\n+boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "C",
      "id": "fa1808b1056f4871a6b4c3214e28d55d"
    },
    {
      "name": "Patch_6_4",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..1f15fe3 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2445,7 +2445,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        if (markers == null) {\n+    return false;\n+}\n+boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "C",
      "id": "4ca09c97178843cfbe27c46b9cbbd01e"
    },
    {
      "name": "Patch_3_2",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..165b1c1 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2163,7 +2163,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        if (markers == null) {\n+    return false;\n+}\n+boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "C",
      "id": "02df81abd5824b95b381a93106b61dee"
    },
    {
      "name": "Patch_12_8",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..5cacbc6 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2526,7 +2526,10 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        if (markers == null) {\n+    return false;\n+}\n+boolean removed = markers.remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "C",
      "id": "5ff29c4b251e45d789990a2066fc1876"
    },
    {
      "name": "Patch_38_1",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..b2e1e8b 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2163,7 +2163,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = getAnnotations().remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "P",
      "id": "a6bc83de5b5b487b8dde98292f88d6c9"
    },
    {
      "name": "Patch_115_3",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..3a361b2 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2290,7 +2290,7 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = getAnnotations().remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "P",
      "id": "067a4408b7d04f44814cdee3220752cb"
    },
    {
      "name": "Patch_154_4",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 50cf416..ed59298 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -2526,7 +2526,7 @@ public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = getAnnotations().remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "P",
      "id": "7f76252519734e4186c0f37e60ecca2d"
    },
    {
      "name": "Patch_76_2",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex dc7d06b..86d07f3 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -2445,7 +2445,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n             markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                     index));\n         }\n-        boolean removed = markers.remove(marker);\n+        boolean removed = getAnnotations().remove(marker);\n         if (removed && notify) {\n             fireChangeEvent();\n         }",
      "correctness": "P",
      "id": "537b31f2ebc94980817fae74043ee3a3"
    }
  ],
  "Chart_19": [
    {
      "name": "Patch_6_4",
      "contributor": "ACS",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..268ae73 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -695,7 +695,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n-        return this.domainAxes.indexOf(axis);\n+if (axis == null){throw new IllegalArgumentException();}        return this.domainAxes.indexOf(axis);\n     }\n     \n     /**\n@@ -970,7 +970,7 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.7\n      */\n     public int getRangeAxisIndex(ValueAxis axis) {\n-        int result = this.rangeAxes.indexOf(axis);\n+if (axis == null){throw new IllegalArgumentException();}        int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) { // try the parent plot\n             Plot parent = getParent();\n             if (parent instanceof CategoryPlot) {",
      "correctness": "C",
      "id": "06aa7e67e88b4c47809741ccfe311426"
    },
    {
      "name": "Patch_81_49",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..5f38aed 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -695,7 +695,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n-        return this.domainAxes.indexOf(axis);\n+        if (axis == null) {\n+    throw new IllegalArgumentException(\"Null 'axis' argument.\");\n+}\n+return this.domainAxes.indexOf(axis);\n     }\n     \n     /**\n",
      "correctness": "C",
      "id": "9faede241a9b4e3a8eb59f195c5dee15"
    },
    {
      "name": "Patch_164_98",
      "contributor": "AVATAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..b81a415 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -970,7 +970,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.7\n      */\n     public int getRangeAxisIndex(ValueAxis axis) {\n-        int result = this.rangeAxes.indexOf(axis);\n+        if (axis == null) {\n+    throw new IllegalArgumentException(\"Null 'axis' argument.\");\n+}\n+int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) { // try the parent plot\n             Plot parent = getParent();\n             if (parent instanceof CategoryPlot) {\n",
      "correctness": "C",
      "id": "5d7c3b938fc744f29dcebd02b9797c57"
    },
    {
      "name": "Patch_292_96",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..6e8e92c 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -970,7 +970,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.7\n      */\n     public int getRangeAxisIndex(ValueAxis axis) {\n-        int result = this.rangeAxes.indexOf(axis);\n+        if (axis == null) {\n+    throw new IllegalArgumentException(\"Empty variable: \" + axis);\n+}\n+int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) { // try the parent plot\n             Plot parent = getParent();\n             if (parent instanceof CategoryPlot) {",
      "correctness": "C",
      "id": "19bc476cf2da43059425eae2c291c563"
    },
    {
      "name": "Patch_144_48",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..abebeed 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -695,7 +695,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n-        return this.domainAxes.indexOf(axis);\n+        if (axis == null) {\n+    throw new IllegalArgumentException(\"Empty variable: \" + axis);\n+}\n+return this.domainAxes.indexOf(axis);\n     }\n     \n     /**",
      "correctness": "C",
      "id": "acb26807dd164700b0c6a2dad064e0e9"
    },
    {
      "name": "Patch_51_49",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..5f38aed 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -695,7 +695,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n-        return this.domainAxes.indexOf(axis);\n+        if (axis == null) {\n+    throw new IllegalArgumentException(\"Null 'axis' argument.\");\n+}\n+return this.domainAxes.indexOf(axis);\n     }\n     \n     /**",
      "correctness": "C",
      "id": "ce18e428349945f893fef457cea217b1"
    },
    {
      "name": "Patch_56_52",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..b81a415 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -970,7 +970,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.7\n      */\n     public int getRangeAxisIndex(ValueAxis axis) {\n-        int result = this.rangeAxes.indexOf(axis);\n+        if (axis == null) {\n+    throw new IllegalArgumentException(\"Null 'axis' argument.\");\n+}\n+int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) { // try the parent plot\n             Plot parent = getParent();\n             if (parent instanceof CategoryPlot) {",
      "correctness": "C",
      "id": "f274d1df8817420aa49126960b058e65"
    },
    {
      "name": "Patch_68_59",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..fa80ec2 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -695,7 +695,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n-        return this.domainAxes.indexOf(axis);\n+        if (axis == null) {\n+\t    throw new IllegalArgumentException(\"Null 'axis' argument.\");\n+\t}\n+return this.domainAxes.indexOf(axis);\n     }\n     \n     /**",
      "correctness": "C",
      "id": "d050c31c438a4c718df157a5844fbd90"
    },
    {
      "name": "Patch_143_118",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex cf3f52f..a51c0a9 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -970,7 +970,10 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.7\n      */\n     public int getRangeAxisIndex(ValueAxis axis) {\n-        int result = this.rangeAxes.indexOf(axis);\n+        if (axis == null) {\n+\t    throw new IllegalArgumentException(\"Null 'axis' argument.\");\n+\t}\n+int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) { // try the parent plot\n             Plot parent = getParent();\n             if (parent instanceof CategoryPlot) {",
      "correctness": "C",
      "id": "9d43615c992740e7a69afb7f0c48a64b"
    }
  ],
  "Math_4": [
    {
      "name": "Patch_2_2",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\nindex a146cb6..ee8f12b 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n@@ -112,7 +112,7 @@ public class SubLine {\n         // compute the intersection on infinite line\n         Vector3D v1D = line.intersection(subLine.line);\n \n-        // check location of point with respect to first sub-line\n+if (v1D == null){return null;}        // check location of point with respect to first sub-line\n         Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n \n         // check location of point with respect to second sub-line\ndiff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\nindex a9d621a..0b1b07e 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n@@ -116,7 +116,7 @@ public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n         // compute the intersection on infinite line\n         Vector2D v2D = line1.intersection(line2);\n \n-        // check location of point with respect to first sub-line\n+if (v2D == null){return null;}        // check location of point with respect to first sub-line\n         Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n \n         // check location of point with respect to second sub-line",
      "correctness": "C",
      "id": "ef5f19b86ff74669a9de3e7cedbee7de"
    },
    {
      "name": "Patch_24_6",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\nindex a146cb6..ea79097 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n@@ -113,7 +113,10 @@ public class SubLine {\n         Vector3D v1D = line.intersection(subLine.line);\n \n         // check location of point with respect to first sub-line\n-        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n+        if (v1D == null) {\n+    return null;\n+}\n+Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n \n         // check location of point with respect to second sub-line\n         Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));\n",
      "correctness": "C",
      "id": "b0f99f750efa42d88a83d667480208ac"
    },
    {
      "name": "Patch_40_11",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\nindex a9d621a..c7ebae9 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n@@ -117,7 +117,10 @@ public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n         Vector2D v2D = line1.intersection(line2);\n \n         // check location of point with respect to first sub-line\n-        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n+        if (v2D == null) {\n+    return null;\n+}\n+Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n \n         // check location of point with respect to second sub-line\n         Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));\n",
      "correctness": "C",
      "id": "1ac4c26026d143e38f015109a25f1d7c"
    },
    {
      "name": "Patch_24_6",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\nindex a146cb6..ea79097 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n@@ -113,7 +113,10 @@ public class SubLine {\n         Vector3D v1D = line.intersection(subLine.line);\n \n         // check location of point with respect to first sub-line\n-        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n+        if (v1D == null) {\n+    return null;\n+}\n+Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n \n         // check location of point with respect to second sub-line\n         Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));",
      "correctness": "C",
      "id": "51e2329975184c19a0df0e3d5fdf0b32"
    },
    {
      "name": "Patch_41_9",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\nindex a9d621a..c7ebae9 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n@@ -117,7 +117,10 @@ public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n         Vector2D v2D = line1.intersection(line2);\n \n         // check location of point with respect to first sub-line\n-        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n+        if (v2D == null) {\n+    return null;\n+}\n+Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n \n         // check location of point with respect to second sub-line\n         Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));",
      "correctness": "C",
      "id": "479a220238bd49778a3bd566070f6363"
    },
    {
      "name": "Patch_2_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\nindex a146cb6..097f07f 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n@@ -113,7 +113,10 @@ public class SubLine {\n         Vector3D v1D = line.intersection(subLine.line);\n \n         // check location of point with respect to first sub-line\n-        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n+        if (remainingRegion == null) {\n+    throw new IllegalArgumentException(\"Null 'remainingRegion' argument.\");\n+}\n+Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n \n         // check location of point with respect to second sub-line\n         Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));",
      "correctness": "P",
      "id": "57c93b5b6ec94a3097bccba9832ecc39"
    },
    {
      "name": "Patch_4_2",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\nindex a9d621a..ca71016 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n@@ -117,7 +117,10 @@ public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n         Vector2D v2D = line1.intersection(line2);\n \n         // check location of point with respect to first sub-line\n-        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n+        if (line1 == null) {\n+    throw new IllegalArgumentException(\"Null 'line1' argument.\");\n+}\n+Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n \n         // check location of point with respect to second sub-line\n         Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));",
      "correctness": "P",
      "id": "0e77a84a32cd494ba28b91b920839c3b"
    },
    {
      "name": "Patch_28_12",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\nindex a9d621a..80638c6 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n@@ -117,7 +117,10 @@ public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n         Vector2D v2D = line1.intersection(line2);\n \n         // check location of point with respect to first sub-line\n-        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n+        if (v2D == null) {\n+\t    return null;\n+\t}\n+Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n \n         // check location of point with respect to second sub-line\n         Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));",
      "correctness": "C",
      "id": "0f20d4e08bed4b9395d471eeccb1bb96"
    },
    {
      "name": "Patch_16_6",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\nindex a146cb6..89c9822 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n@@ -113,7 +113,10 @@ public class SubLine {\n         Vector3D v1D = line.intersection(subLine.line);\n \n         // check location of point with respect to first sub-line\n-        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n+        if (v1D == null) {\n+\t    return null;\n+\t}\n+Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n \n         // check location of point with respect to second sub-line\n         Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));",
      "correctness": "C",
      "id": "f0e8d0cfab2f433ba100a628f9ddb2d1"
    }
  ],
  "Math_3": [
    {
      "name": "Patch_1_1",
      "contributor": "ACS",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\nindex 67b368d..3e4ead8 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java\n@@ -14,7 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.commons.math3.genetics;\n+package org.apache.commons.math3.genetics;import  org.apache.commons.math3.exception.OutOfRangeException;import  org.apache.commons.math3.exception.OutOfRangeException;import  org\n \n import java.util.Collections;\n import java.util.List;\n@@ -48,7 +48,7 @@ public class ElitisticListPopulation extends ListPopulation {\n                                    final int populationLimit,\n                                    final double elitismRate) {\n         super(chromosomes, populationLimit);\n-        this.elitismRate = elitismRate;\n+if (elitismRate>(double)1.0){throw new OutOfRangeException(null,null,null);}if (elitismRate<(double)0.0){throw new OutOfRangeException(null,null,null);}         this.elitismRate = elitismRate;\n     }\n \n     /**\n@@ -62,7 +62,7 @@ public class ElitisticListPopulation extends ListPopulation {\n      */\n     public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n         super(populationLimit);\n-        this.elitismRate = elitismRate;\n+if (elitismRate>(double)1.0){throw new OutOfRangeException(null,null,null);}if (elitismRate<(double)0.0){throw new OutOfRangeException(null,null,null);}        this.elitismRate = \n     }\n \n     /**\n",
      "correctness": "C",
      "id": "9fffa76a81314934b25fd51b65826a55"
    }
  ],
  "Math_99": [
    {
      "name": "Patch_3_3",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex d51ec7a..89ee746 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -540,7 +540,7 @@ public final class MathUtils {\n         int u = p;\n         int v = q;\n         if ((u == 0) || (v == 0)) {\n-            return (Math.abs(u) + Math.abs(v));\n+if (u==Integer.MIN_VALUE){throw new ArithmeticException();}if (v==Integer.MIN_VALUE){throw new ArithmeticException();}            return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n         // -2^31, while positive numbers can only be as large as 2^31-1\n@@ -711,7 +711,7 @@ public final class MathUtils {\n             return 0;\n         }\n         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n-        return lcm;\n+if (lcm==Integer.MIN_VALUE){throw new ArithmeticException();}        return lcm;\n     }\n \n     /** ",
      "correctness": "C",
      "id": "d7538cab6a904dd68e1747268b2292a1"
    }
  ],
  "Math_89": [
    {
      "name": "Patch_1_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex c8deca3..1887afe 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -107,7 +107,7 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n-            addValue((Comparable<?>) v);            \n+if (!(v instanceof Comparable<?>)){throw new IllegalArgumentException();}            addValue((Comparable<?>) v);            \n     }\n     \n     /**",
      "correctness": "C",
      "id": "1fc09335060b405783a64c6ece9f33d6"
    },
    {
      "name": "Patch_6_6",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex c8deca3..7ecb4f1 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -107,7 +107,12 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n-            addValue((Comparable<?>) v);            \n+            if (v instanceof Comparable<?>) {\n+\taddValue((Comparable<?>) v);\n+} else {\n+\tthrow new IllegalArgumentException(\"Illegal argument: v\");\n+}\n+            \n     }\n     \n     /**\n",
      "correctness": "C",
      "id": "d32c0835532c4b1dac661e02fe5ca1ff"
    },
    {
      "name": "Patch_12_11",
      "contributor": "kPAR",
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex c8deca3..7ecb4f1 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -107,7 +107,12 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n-            addValue((Comparable<?>) v);            \n+            if (v instanceof Comparable<?>) {\n+\taddValue((Comparable<?>) v);\n+} else {\n+\tthrow new IllegalArgumentException(\"Illegal argument: v\");\n+}\n+            \n     }\n     \n     /**",
      "correctness": "C",
      "id": "bd007e9100be48a18e91bf3bd7a49d1d"
    },
    {
      "name": "Patch_14_12",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex c8deca3..bfe0188 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -107,7 +107,12 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n-            addValue((Comparable<?>) v);            \n+            if (v instanceof Comparable<?>) {\n+\taddValue((Comparable<?>) v);\n+\t} else {\n+\tthrow new IllegalArgumentException(\"Illegal argument: v\");\n+}\n+            \n     }\n     \n     /**",
      "correctness": "C",
      "id": "5b6ee50fe51b4cf1a1d2b09df29c5ed8"
    }
  ],
  "Lang_7": [
    {
      "name": "Patch_1_1",
      "contributor": "ACS",
      "diff": "\ndiff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex d49da7f..dc96426 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -450,7 +450,7 @@ public class NumberUtils {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n+if (str.startsWith(\"--\")==true){throw new NumberFormatException();}            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x",
      "correctness": "C",
      "id": "2fd170e9edb04297b9f5950a36c441b6"
    },
    {
      "name": "Patch_5_3",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex d49da7f..efa89f0 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,9 +449,7 @@ public class NumberUtils {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n+        \n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n",
      "correctness": "C",
      "id": "50b768bad412461387289a7d657197b1"
    },
    {
      "name": "Patch_23_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex d49da7f..7522c29 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,7 +449,7 @@ public class NumberUtils {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if (str.startsWith(\"--\", INTEGER_ONE)) {\n             return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {",
      "correctness": "P",
      "id": "914f6a273801495eb39a5b758c2abe75"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex d49da7f..5115fe5 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,7 +449,7 @@ public class NumberUtils {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if ((StringUtils.isBlank(str))) {\n             return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {",
      "correctness": "P",
      "id": "15c741a4045648b6a1cb9d4d097d036e"
    },
    {
      "name": "Patch_2_2",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex d49da7f..f5e5b68 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,7 +449,7 @@ public class NumberUtils {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n+        if ((str.startsWith(\"--\")) && (StringUtils.isBlank(str))) {\n             return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {",
      "correctness": "P",
      "id": "a9e5a04f1b2d41ae93654ca106214c55"
    }
  ],
  "Closure_88": [
    {
      "name": "Patch_2_2",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\t2019-08-11 02:48:25.697964329 -0400\n+++ /tmp/Arja_Defects4J_Closure_88/patches_5kgc/Patch_2/patched/com/google/javascript/jscomp/DeadAssignmentsElimination.java\t2019-08-11 03:00:01.786668843 -0400\n@@ -324,10 +324,6 @@\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n       }\n\n\n",
      "correctness": "P",
      "id": "ee01f4c921c44b53ac7de32a9050134e"
    },
    {
      "name": "Patch_2_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\t2019-08-12 21:29:27.370333317 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_88/patches_w6j9/Patch_1/patched/com/google/javascript/jscomp/DeadAssignmentsElimination.java\t2019-08-12 21:41:44.429519316 -0400\n@@ -324,10 +324,6 @@\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n       }\n\n\n",
      "correctness": "P",
      "id": "330683a1d97247cf8dec8398b8a3400f"
    },
    {
      "name": "Patch_3_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\t2019-08-12 18:12:41.559543243 -0400\n+++ /tmp/GenProg_Defects4J_Closure_88/patches_men0/Patch_1/patched/com/google/javascript/jscomp/DeadAssignmentsElimination.java\t2019-08-12 18:24:35.995404949 -0400\n@@ -324,10 +324,7 @@\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n+        int type = n.getType();\n       } else {\n         return VariableLiveness.READ;\n       }\n\n\n",
      "correctness": "P",
      "id": "32ae97342a3b4dd393af6a1e8f9ededb"
    }
  ],
  "Closure_86": [
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_86/src/com/google/javascript/jscomp/NodeUtil.java\t2019-08-11 02:24:31.909415027 -0400\n+++ /tmp/Arja_Defects4J_Closure_86/patches_lkci/Patch_1/patched/com/google/javascript/jscomp/NodeUtil.java\t2019-08-11 02:36:14.933208918 -0400\n@@ -2459,10 +2459,7 @@\n             || isToStringMethodCall(value)\n             || locals.apply(value);\n       case Token.NEW:\n-        // TODO(nicksantos): This needs to be changed so that it\n-        // returns true iff we're sure the value was never aliased from inside\n-        // the constructor (similar to callHasLocalResult)\n-        return true;\n+        return false;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n\n\n",
      "correctness": "C",
      "id": "21aa9fa28f8c422cbdc17a07c70e3569"
    },
    {
      "name": "Patch_8_4",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_86/src/com/google/javascript/jscomp/NodeUtil.java\t2019-08-12 19:13:16.108236485 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_86/patches_rrlx/Patch_4/patched/com/google/javascript/jscomp/NodeUtil.java\t2019-08-12 19:25:20.472318617 -0400\n@@ -2459,10 +2459,7 @@\n             || isToStringMethodCall(value)\n             || locals.apply(value);\n       case Token.NEW:\n-        // TODO(nicksantos): This needs to be changed so that it\n-        // returns true iff we're sure the value was never aliased from inside\n-        // the constructor (similar to callHasLocalResult)\n-        return true;\n+        return false;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n\n\n",
      "correctness": "C",
      "id": "16b418b2440d4be68c250bd630b46919"
    },
    {
      "name": "Patch_38_25",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_86/src/com/google/javascript/jscomp/NodeUtil.java\t2019-08-12 17:28:55.433238713 -0400\n+++ /tmp/GenProg_Defects4J_Closure_86/patches_s16k/Patch_25/patched/com/google/javascript/jscomp/NodeUtil.java\t2019-08-12 17:41:37.766163818 -0400\n@@ -2459,10 +2459,7 @@\n             || isToStringMethodCall(value)\n             || locals.apply(value);\n       case Token.NEW:\n-        // TODO(nicksantos): This needs to be changed so that it\n-        // returns true iff we're sure the value was never aliased from inside\n-        // the constructor (similar to callHasLocalResult)\n-        return true;\n+        return false;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n\n\n",
      "correctness": "C",
      "id": "0f30b607d3f14f41b646ad4649d90f1d"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "c8d29d257dc24576aa2488d7267d7840"
    }
  ],
  "Closure_59": [
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2019-08-10 16:42:49.663444746 -0400\n+++ /tmp/Arja_Defects4J_Closure_59/patches_sibh/Patch_1/patched/com/google/javascript/jscomp/Compiler.java\t2019-08-10 17:02:18.547001441 -0400\n@@ -252,12 +252,6 @@\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n-\n     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n       options.setWarningLevel(\n           DiagnosticGroups.ES5_STRICT,\n\n\n",
      "correctness": "P",
      "id": "039fad0deffc4e60a8b70ac0d1101a44"
    },
    {
      "name": "Patch_53_8",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246..1248cda 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,11 +252,7 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n+    \n \n     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n       options.setWarningLevel(\n@@ -272,6 +268,12 @@ public class Compiler extends AbstractCompiler {\n     guards.add(options.getWarningsGuard());\n \n     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n+\tif (options.checkGlobalThisLevel.isOn()) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          options.checkGlobalThisLevel);\n+    }\n+\n \n     // All passes must run the variable check. This synthesizes\n     // variables later so that the compiler doesn't crash. It also",
      "correctness": "P",
      "id": "fedcd090ee064b31911487c6a7c199d8"
    },
    {
      "name": "Patch_25_19",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246..f39c57f 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,7 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+    if ((options.checkGlobalThisLevel.isOn()) && !(options.enables(DiagnosticGroups.CHECK_TYPES))) {\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
      "correctness": "P",
      "id": "5eebaefe57294480ad2681440653310f"
    },
    {
      "name": "Patch_12_11",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246..1248cda 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,11 +252,7 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n+    \n \n     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n       options.setWarningLevel(\n@@ -272,6 +268,12 @@ public class Compiler extends AbstractCompiler {\n     guards.add(options.getWarningsGuard());\n \n     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n+\tif (options.checkGlobalThisLevel.isOn()) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.GLOBAL_THIS,\n+          options.checkGlobalThisLevel);\n+    }\n+\n \n     // All passes must run the variable check. This synthesizes\n     // variables later so that the compiler doesn't crash. It also",
      "correctness": "P",
      "id": "38159bf8663042448c7b97fe83410464"
    },
    {
      "name": "Patch_2_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\\t2019-08-11 18:15:10.477585979 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_59/patches_dmmq/Patch_1/patched/com/google/javascript/jscomp/Compiler.java\\t2019-08-11 18:35:02.446770581 -0400\n@@ -252,12 +252,6 @@\n           CheckLevel.OFF);\n     }\n\n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n-\n     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n       options.setWarningLevel(\n           DiagnosticGroups.ES5_STRICT,\n\n\n",
      "correctness": "P",
      "id": "9b250577138f4a729364b61f81091a03"
    },
    {
      "name": "Patch_3_2",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_59/src/com/google/javascript/jscomp/Compiler.java\t2019-08-11 15:22:29.548827304 -0400\n+++ /tmp/GenProg_Defects4J_Closure_59/patches_9yxs/Patch_2/patched/com/google/javascript/jscomp/Compiler.java\t2019-08-11 15:42:14.854050012 -0400\n@@ -252,12 +252,6 @@\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n-\n     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n       options.setWarningLevel(\n           DiagnosticGroups.ES5_STRICT,\n\n\n",
      "correctness": "P",
      "id": "015af024d7e946d292bc3539ed0ec763"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "52739ddbd32143e680c8ff66b7c8828a"
    }
  ],
  "Closure_55": [
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2019-08-10 15:05:25.685771047 -0400\n+++ /tmp/Arja_Defects4J_Closure_55/patches_rylk/Patch_1/patched/com/google/javascript/jscomp/FunctionRewriter.java\t2019-08-10 15:26:39.495499663 -0400\n@@ -114,7 +114,7 @@\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    return false;\n   }\n \n   /**\n\n\n",
      "correctness": "P",
      "id": "d1436ff034f540c19b08ce9b9d00a876"
    },
    {
      "name": "Patch_56_2",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2019-08-11 07:58:43.539488576 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_55/patches_paaq/Patch_2/patched/com/google/javascript/jscomp/FunctionRewriter.java\t2019-08-11 08:18:45.471196126 -0400\n@@ -114,7 +114,7 @@\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    return false;\n   }\n \n   /**\n\n\n",
      "correctness": "P",
      "id": "069fb8a27b594ea296544a438ef2ac1d"
    },
    {
      "name": "Patch_34_7",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_55/src/com/google/javascript/jscomp/FunctionRewriter.java\t2019-08-11 12:28:15.904598757 -0400\n+++ /tmp/GenProg_Defects4J_Closure_55/patches_40l6/Patch_7/patched/com/google/javascript/jscomp/FunctionRewriter.java\t2019-08-11 12:50:23.133009981 -0400\n@@ -114,7 +114,7 @@\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    return false;\n   }\n \n   /**\n\n\n",
      "correctness": "P",
      "id": "5d7f5e7b524540fcb52b97c1713fcc95"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "78f397c254214da3b10e048a8f23d852"
    }
  ],
  "Closure_3": [
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2019-08-08 23:34:03.373208090 -0400\n+++ /tmp/Arja_Defects4J_Closure_3/patches_kaxo/Patch_1/patched/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2019-08-08 23:58:13.241874140 -0400\n@@ -152,20 +152,7 @@\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n-      if (c.canInline()) {\n-        c.inlineVariable();\n-\n-        // If definition c has dependencies, then inlining it may have\n-        // introduced new dependencies for our other inlining candidates.\n-        //\n-        // MustBeReachingVariableDef uses this dependency graph in its\n-        // analysis, so some of these candidates may no longer be valid.\n-        // We keep track of when the variable dependency graph changed\n-        // so that we can back off appropriately.\n-        if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n-        }\n-      }\n+      break;\n     }\n   }\n \n\n\n",
      "correctness": "P",
      "id": "0273dbbf1312433d8812da3c989fb76e"
    },
    {
      "name": "Patch_1_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2019-08-09 00:36:54.554115355 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_3/patches_sf5t/Patch_1/patched/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2019-08-09 01:00:45.834216883 -0400\n@@ -152,20 +152,7 @@\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n-      if (c.canInline()) {\n-        c.inlineVariable();\n-\n-        // If definition c has dependencies, then inlining it may have\n-        // introduced new dependencies for our other inlining candidates.\n-        //\n-        // MustBeReachingVariableDef uses this dependency graph in its\n-        // analysis, so some of these candidates may no longer be valid.\n-        // We keep track of when the variable dependency graph changed\n-        // so that we can back off appropriately.\n-        if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n-        }\n-      }\n+      int index = -1;\n     }\n   }\n \n\n\n",
      "correctness": "P",
      "id": "9e184d78fe084570981c5afb8fa4ce3d"
    },
    {
      "name": "Patch_2_2",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2019-08-09 00:25:19.809857609 -0400\n+++ /tmp/GenProg_Defects4J_Closure_3/patches_opir/Patch_2/patched/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\t2019-08-09 00:52:33.103206686 -0400\n@@ -152,20 +152,6 @@\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n-      if (c.canInline()) {\n-        c.inlineVariable();\n-\n-        // If definition c has dependencies, then inlining it may have\n-        // introduced new dependencies for our other inlining candidates.\n-        //\n-        // MustBeReachingVariableDef uses this dependency graph in its\n-        // analysis, so some of these candidates may no longer be valid.\n-        // We keep track of when the variable dependency graph changed\n-        // so that we can back off appropriately.\n-        if (!c.defMetadata.depends.isEmpty()) {\n-          inlinedNewDependencies.add(t.getScope().getVar(c.varName));\n-        }\n-      }\n     }\n   }\n \n\n\n",
      "correctness": "P",
      "id": "3ed5fac0df1c4465ba1bb850e7a33bba"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "5c36b8da047e4901b9e4fe18e0e15ead"
    }
  ],
  "Math_22": [
    {
      "name": "Patch_27_22",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2019-08-03 19:45:19.554803416 -0400\n+++ /tmp/Arja_Defects4J_Math_22/patches_fvu1/Patch_22/patched/org/apache/commons/math3/distribution/FDistribution.java\t2019-08-03 21:11:33.382696340 -0400\n@@ -272,7 +272,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        return false;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2019-08-03 19:45:19.554803416 -0400\n+++ /tmp/Arja_Defects4J_Math_22/patches_fvu1/Patch_22/patched/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2019-08-03 21:11:33.418696358 -0400\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n",
      "correctness": "C",
      "id": "e29c7b2262bb47cd925d09df0e3f44dc"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/FDistribution.java b/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\nindex 8b0993c..e301e2e 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\n@@ -272,7 +272,7 @@ public class FDistribution extends AbstractRealDistribution {\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        return false;\n     }\n \n     /** {@inheritDoc} */",
      "correctness": "C",
      "id": "d359bffea2da492ca6e3f8466180fd98"
    },
    {
      "name": "Patch_2_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java b/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\nindex 5d32f6e..0d279de 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\n@@ -181,7 +181,7 @@ public class UniformRealDistribution extends AbstractRealDistribution {\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**",
      "correctness": "C",
      "id": "f53642019cb24432941c1146ce06fdce"
    }
  ],
  "Closure_78": [
    {
      "name": "Patch_19_6",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2019-08-10 23:04:10.925417809 -0400\n+++ /tmp/Arja_Defects4J_Closure_78/patches_uol3/Patch_6/patched/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2019-08-10 23:24:26.888439424 -0400\n@@ -708,14 +708,12 @@\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval % rval;\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n",
      "correctness": "C",
      "id": "c34cd1c5805a492db615f2ba6c5e1721"
    },
    {
      "name": "Patch_232_122",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2019-08-12 10:36:08.007359108 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_78/patches_kfko/Patch_122/patched/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2019-08-12 10:55:36.969312147 -0400\n@@ -708,14 +708,13 @@\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          Node parameterName = Node.newString(Token.NAME, \"jscomp_throw_param\");\n           return null;\n         }\n         result = lval % rval;\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval / rval;\n\n\n",
      "correctness": "C",
      "id": "2b4fe9d6abc44ad58b139de2ae0b6a13"
    },
    {
      "name": "Patch_21_15",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_78/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2019-08-12 08:42:54.553141085 -0400\n+++ /tmp/GenProg_Defects4J_Closure_78/patches_1y5r/Patch_15/patched/com/google/javascript/jscomp/PeepholeFoldConstants.java\t2019-08-12 09:03:04.323153375 -0400\n@@ -708,14 +708,13 @@\n         break;\n       case Token.MOD:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n           return null;\n         }\n         result = lval % rval;\n         break;\n       case Token.DIV:\n         if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+          int start = 0;\n           return null;\n         }\n         result = lval / rval;\n\n\n",
      "correctness": "C",
      "id": "d9943bd9dca94af3bdcbf2ff3920a9e4"
    }
  ],
  "Closure_130": [
    {
      "name": "Patch_4_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2019-08-11 15:34:19.872765841 -0400\n+++ /tmp/Arja_Defects4J_Closure_130/patches_yd1l/Patch_1/patched/com/google/javascript/jscomp/CollapseProperties.java\t2019-08-11 15:56:17.329232939 -0400\n@@ -169,21 +169,6 @@\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n-          }\n-        }\n-      }\n-\n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n       if ((name.type == Name.Type.OBJECTLIT ||\n\n\n",
      "correctness": "P",
      "id": "6290d4cf8c744123bedd5e24d425e9bd"
    },
    {
      "name": "Patch_1_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2019-08-14 04:11:19.541376628 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_130/patches_3c48/Patch_1/patched/com/google/javascript/jscomp/CollapseProperties.java\t2019-08-14 04:33:31.684602309 -0400\n@@ -169,21 +169,6 @@\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n-          }\n-        }\n-      }\n-\n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n       if ((name.type == Name.Type.OBJECTLIT ||\n\n\n",
      "correctness": "P",
      "id": "2a01b6c504f14142baaa4666d4597bcb"
    },
    {
      "name": "Patch_1_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_130/src/com/google/javascript/jscomp/CollapseProperties.java\t2019-08-14 03:55:33.367353396 -0400\n+++ /tmp/GenProg_Defects4J_Closure_130/patches_yur4/Patch_1/patched/com/google/javascript/jscomp/CollapseProperties.java\t2019-08-14 04:16:48.673401682 -0400\n@@ -169,21 +169,6 @@\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n-          }\n-        }\n-      }\n-\n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n       if ((name.type == Name.Type.OBJECTLIT ||\n\n\n",
      "correctness": "P",
      "id": "0ef12a46726c4b559fb0f0a9d99bf1c4"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "e7a6800b86244c6fbf8bec83142894ff"
    }
  ],
  "Lang_59": [
    {
      "name": "Patch_20_20",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Lang_59/src/java/org/apache/commons/lang/text/StrBuilder.java\t2019-06-26 01:33:35.351940696 -0400\n+++ /tmp/Arja_Defects4J_Lang_59/patches_gb3h/Patch_20/patched/org/apache/commons/lang/text/StrBuilder.java\t2019-06-26 01:37:59.995940097 -0400\n@@ -881,7 +881,8 @@\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                buffer = new char[CAPACITY];\n+\t\t\t\tstr.getChars(0, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n\n\n",
      "correctness": "P",
      "id": "3571bb81d572439b9e483987a93bde68"
    },
    {
      "name": "Patch_12_3",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 886d424..4c14509 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -881,7 +881,7 @@ public class StrBuilder implements Cloneable {\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                str.getChars(0, width, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n",
      "correctness": "C",
      "id": "20caad26b0e14fe7a31c09efad42d815"
    },
    {
      "name": "Patch_20_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 886d424..4c14509 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -881,7 +881,7 @@ public class StrBuilder implements Cloneable {\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                str.getChars(0, width, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);",
      "correctness": "C",
      "id": "8ac6e3ede39642e791ac4fb3183bf2a7"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 886d424..4c14509 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -881,7 +881,7 @@ public class StrBuilder implements Cloneable {\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                str.getChars(0, width, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);",
      "correctness": "C",
      "id": "570e3a27033e4d798aefc28b42a8e7f6"
    },
    {
      "name": "Patch_4_4",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 886d424..4c14509 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -881,7 +881,7 @@ public class StrBuilder implements Cloneable {\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                str.getChars(0, width, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);",
      "correctness": "C",
      "id": "1f7660cec45042fdb6d84493e6cd9202"
    },
    {
      "name": "Patch_155_107",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Lang_59/src/java/org/apache/commons/lang/text/StrBuilder.java\t2019-07-04 17:16:53.217441559 -0400\n+++ /tmp/RSRepair_Defects4J_Lang_59/patches_8pf9/Patch_107/patched/org/apache/commons/lang/text/StrBuilder.java\t2019-07-04 17:22:58.370820204 -0400\n@@ -881,7 +881,8 @@\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                ensureCapacity(size + 5);\n+\t\t\t\tstr.getChars(0, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n\n\n",
      "correctness": "P",
      "id": "b60c40c8010a4d189dee2ba83246abb2"
    },
    {
      "name": "Patch_34_27",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Lang_59/src/java/org/apache/commons/lang/text/StrBuilder.java\t2019-07-01 22:26:47.246192356 -0400\n+++ /tmp/GenProg_Defects4J_Lang_59/patches_pct9/Patch_27/patched/org/apache/commons/lang/text/StrBuilder.java\t2019-07-01 22:31:22.523401822 -0400\n@@ -881,7 +881,8 @@\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                buffer = new char[str.length() + CAPACITY];\n+\t\t\t\tstr.getChars(0, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n\n\n",
      "correctness": "P",
      "id": "5ae79feafed54510b805aa1b6694ae70"
    }
  ],
  "Math_49": [
    {
      "name": "Patch_130_99",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\t2019-08-03 22:36:30.545300930 -0400\n+++ /tmp/Arja_Defects4J_Math_49/patches_24my/Patch_99/patched/org/apache/commons/math/linear/OpenMapRealVector.java\t2019-08-03 23:22:13.070702152 -0400\n@@ -355,7 +355,8 @@\n     public OpenMapRealVector ebeDivide(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n-        Iterator iter = res.entries.iterator();\n+        checkVectorDimensions(v.length);\n+\t\tIterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n@@ -367,7 +368,7 @@\n     public OpenMapRealVector ebeMultiply(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n-        Iterator iter = res.entries.iterator();\n+        Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n@@ -380,7 +381,7 @@\n     public OpenMapRealVector ebeMultiply(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n-        Iterator iter = res.entries.iterator();\n+        Iterator iter = entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n\n\n",
      "correctness": "P",
      "id": "1ba97f89bbe749b38e2efdcdc25304c3"
    }
  ],
  "Closure_33": [
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2019-08-10 04:16:17.727546252 -0400\n+++ /tmp/Arja_Defects4J_Closure_33/patches_h3z6/Patch_1/patched/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2019-08-10 04:35:39.170615308 -0400\n@@ -555,27 +555,6 @@\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n \n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n-    }\n+    \n   }\n }\n\n\n",
      "correctness": "P",
      "id": "d6522e30ce114676bea06eb41129c3ca"
    },
    {
      "name": "Patch_12_1",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2019-08-10 08:45:30.497187791 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_33/patches_g6t3/Patch_1/patched/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2019-08-10 09:07:11.248300021 -0400\n@@ -555,27 +555,6 @@\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n \n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n-    }\n+    \n   }\n }\n\n\n",
      "correctness": "P",
      "id": "e4527f1416fb4dd0981cd84c761c2924"
    },
    {
      "name": "Patch_1_1",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2019-08-10 10:04:57.547268424 -0400\n+++ /tmp/GenProg_Defects4J_Closure_33/patches_1gbp/Patch_1/patched/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2019-08-10 10:25:49.577276601 -0400\n@@ -555,27 +555,6 @@\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n \n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n-    }\n+    \n   }\n }\n\n\n",
      "correctness": "P",
      "id": "08cd5c058c014f94a313eb9db6d6bdaf"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "e43dc7c56f624cb59484a25517fb7d22"
    }
  ],
  "Closure_131": [
    {
      "name": "Patch_2_2",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_131/src/com/google/javascript/rhino/TokenStream.java\t2019-08-11 15:56:21.453209360 -0400\n+++ /tmp/Arja_Defects4J_Closure_131/patches_52pm/Patch_2/patched/com/google/javascript/rhino/TokenStream.java\t2019-08-11 16:20:53.936790048 -0400\n@@ -196,10 +196,7 @@\n       }\n \n       for (int i = 1; i < length; i++) {\n-        if (\n-            !Character.isJavaIdentifierPart(s.charAt(i))) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n",
      "correctness": "P",
      "id": "fafc6c98419549f296efa59e1ca1669e"
    },
    {
      "name": "Patch_81_27",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_131/src/com/google/javascript/rhino/TokenStream.java\t2019-08-14 04:33:36.812366762 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_131/patches_1yxv/Patch_27/patched/com/google/javascript/rhino/TokenStream.java\t2019-08-14 04:56:13.536519149 -0400\n@@ -196,10 +196,7 @@\n       }\n \n       for (int i = 1; i < length; i++) {\n-        if (\n-            !Character.isJavaIdentifierPart(s.charAt(i))) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n",
      "correctness": "P",
      "id": "4f2f3db84a3146c497e26354077a58d0"
    },
    {
      "name": "Patch_190_70",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_131/src/com/google/javascript/rhino/TokenStream.java\t2019-08-14 04:16:52.577448423 -0400\n+++ /tmp/GenProg_Defects4J_Closure_131/patches_rek5/Patch_70/patched/com/google/javascript/rhino/TokenStream.java\t2019-08-14 04:40:33.951011824 -0400\n@@ -196,10 +196,7 @@\n       }\n \n       for (int i = 1; i < length; i++) {\n-        if (\n-            !Character.isJavaIdentifierPart(s.charAt(i))) {\n-          return false;\n-        }\n+        return false;\n       }\n \n       return true;\n\n\n",
      "correctness": "P",
      "id": "1b8c03571bbf48149245e6c5020917a7"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "fb1450bbcf5b449ca48d1a5011981b01"
    }
  ],
  "Closure_117": [
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypeValidator.java\t2019-08-11 05:36:17.152281494 -0400\n+++ /tmp/Arja_Defects4J_Closure_117/patches_eprm/Patch_1/patched/com/google/javascript/jscomp/TypeValidator.java\t2019-08-11 05:58:26.511489937 -0400\n@@ -725,34 +725,6 @@\n \n     // The best type name is the actual type name.\n \n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n-    if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n-        }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n-        }\n-      }\n-    }\n-\n     JSType type = getJSType(n);\n     if (dereference) {\n       ObjectType dereferenced = type.dereference();\n\n\n",
      "correctness": "P",
      "id": "5af9ce608d6241f384e5ff5b25347608"
    },
    {
      "name": "Patch_137_91",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024a..0f0c2ad 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -728,7 +728,21 @@ class TypeValidator {\n     // If we're analyzing a GETPROP, the property may be inherited by the\n     // prototype chain. So climb the prototype chain and find out where\n     // the property was originally defined.\n-    if (n.isGetProp()) {\n+    \n+\n+    JSType type = getJSType(n);\n+    if (dereference) {\n+      ObjectType dereferenced = type.dereference();\n+      if (dereferenced != null) {\n+        type = dereferenced;\n+      }\n+    }\n+    if (type.isFunctionPrototypeType() ||\n+        (type.toObjectType() != null &&\n+         type.toObjectType().getConstructor() != null)) {\n+      return type.toString();\n+    }\n+\tif (n.isGetProp()) {\n       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n       if (objectType != null) {\n         String propName = n.getLastChild().getString();\n@@ -753,18 +767,6 @@ class TypeValidator {\n       }\n     }\n \n-    JSType type = getJSType(n);\n-    if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n-    }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n-    }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;",
      "correctness": "C",
      "id": "ef7b2ed3404c4070974a3958f2489634"
    },
    {
      "name": "Patch_53_19",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypeValidator.java\t2019-08-14 02:07:54.434849435 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_117/patches_dgl3/Patch_19/patched/com/google/javascript/jscomp/TypeValidator.java\t2019-08-14 02:29:55.860661853 -0400\n@@ -725,34 +725,6 @@\n \n     // The best type name is the actual type name.\n \n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n-    if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n-        }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n-        }\n-      }\n-    }\n-\n     JSType type = getJSType(n);\n     if (dereference) {\n       ObjectType dereferenced = type.dereference();\n\n\n",
      "correctness": "P",
      "id": "a10269ef61d249b490342281d1532b55"
    },
    {
      "name": "Patch_94_35",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Closure_117/src/com/google/javascript/jscomp/TypeValidator.java\t2019-08-13 23:58:05.775697913 -0400\n+++ /tmp/GenProg_Defects4J_Closure_117/patches_5zlj/Patch_35/patched/com/google/javascript/jscomp/TypeValidator.java\t2019-08-14 00:19:29.463834626 -0400\n@@ -725,34 +725,6 @@\n \n     // The best type name is the actual type name.\n \n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n-    if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n-        }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n-        }\n-      }\n-    }\n-\n     JSType type = getJSType(n);\n     if (dereference) {\n       ObjectType dereferenced = type.dereference();\n\n\n",
      "correctness": "P",
      "id": "2805a895ba3f48bd944299cfae1a7c64"
    },
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "502904a772b049f7980400bc7dfdd7c4"
    }
  ],
  "Lang_50": [
    {
      "name": "Patch_340_340",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java\t2019-06-26 00:14:05.167951507 -0400\n+++ /tmp/Arja_Defects4J_Lang_50/patches_w8jx/Patch_340/patched/org/apache/commons/lang/time/FastDateFormat.java\t2019-06-26 00:22:16.511950393 -0400\n@@ -282,7 +282,10 @@\n             key = new Pair(key, timeZone);\n         }\n \n-        if (locale != null) {\n+        if (locale == null) {\n+\t\t\tlocale = Locale.getDefault();\n+\t\t}\n+\t\tif (locale != null) {\n             key = new Pair(key, locale);\n         }\n \n@@ -290,7 +293,6 @@\n         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n-                locale = Locale.getDefault();\n             }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n@@ -468,7 +470,8 @@\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n-            if (locale == null) {\n+            key = new Pair(key, locale);\n+\t\t\tif (locale == null) {\n                 locale = Locale.getDefault();\n             }\n             try {\n\n\n",
      "correctness": "P",
      "id": "c4ef3de95dcb49fd93bdb0baea21c5bb"
    },
    {
      "name": "Patch_106_18",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/time/FastDateFormat.java b/src/java/org/apache/commons/lang/time/FastDateFormat.java\nindex 8a26f28..2bd90b5 100644\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n@@ -287,7 +287,7 @@ public class FastDateFormat extends Format {\n         }\n \n \n-        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();",
      "correctness": "P",
      "id": "fd48f9c523ef4fba8679475b6d0c3df5"
    },
    {
      "name": "Patch_237_42",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/time/FastDateFormat.java b/src/java/org/apache/commons/lang/time/FastDateFormat.java\nindex 8a26f28..52df684 100644\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n@@ -466,7 +466,7 @@ public class FastDateFormat extends Format {\n             key = new Pair(key, locale);\n         }\n \n-        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n             if (locale == null) {\n                 locale = Locale.getDefault();",
      "correctness": "P",
      "id": "15edcebecfbd4ae58571b6523dca7c76"
    }
  ],
  "Chart_12": [
    {
      "name": "Patch_14_14",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Chart_12/source/org/jfree/chart/plot/MultiplePiePlot.java\t2019-06-25 08:53:49.092150152 -0400\n+++ /tmp/Arja_Defects4J_Chart_12/patches_4vxr/Patch_14/patched/org/jfree/chart/plot/MultiplePiePlot.java\t2019-06-25 09:02:03.660365672 -0400\n@@ -142,7 +142,7 @@\n      */\n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n-        this.dataset = dataset;\n+        setDataset(dataset);\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();\n\n\n",
      "correctness": "C",
      "id": "5ca4f76878674ca58cbebec9391bd32b"
    },
    {
      "name": "Patch_66_55",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Chart_12/source/org/jfree/chart/plot/MultiplePiePlotjava\n+++ /tmp/jGenProg_Defects4J_Chart_12/source/org/jfree/chart/plot/MultiplePiePlotjava\n@@ -143,28 +143,12 @@\n \tpublic MultiplePiePlot(org.jfree.data.category.CategoryDataset dataset) {\n \t\tsuper();\n \t\tthis.dataset = dataset;\n-\t\torg.jfree.chart.plot.PiePlot piePlot = new org.jfree.chart.plot.PiePlot(null);\n-\t\tthis.pieChart = new org.jfree.chart.JFreeChart(piePlot);\n-\t\tthis.pieChart.removeLegend();\n-\t\tthis.dataExtractOrder = org.jfree.chart.util.TableOrder.BY_COLUMN;\n-\t\tthis.pieChart.setBackgroundPaint(null);\n-\t\torg.jfree.chart.title.TextTitle seriesTitle = new org.jfree.chart.title.TextTitle(\"Series Title\", \n-\t\tnew java.awt.Font(\"SansSerif\", java.awt.Font.BOLD, 12));\n-\t\tseriesTitle.setPosition(org.jfree.chart.util.RectangleEdge.BOTTOM);\n-\t\tthis.pieChart.setTitle(seriesTitle);\n-\t\tthis.aggregatedItemsKey = \"Other\";\n-\t\tthis.aggregatedItemsPaint = java.awt.Color.lightGray;\n-\t\tthis.sectionPaints = new java.util.HashMap();\n-\t}\n \n \n \n \n \n \n-\tpublic org.jfree.data.category.CategoryDataset getDataset() {\n-\t\treturn this.dataset;\n-\t}\n \n \n \n@@ -172,19 +156,35 @@\n \n \n \n-\tpublic void setDataset(org.jfree.data.category.CategoryDataset dataset) {\n \n \n-\t\tif ((this.dataset) != null) {\n-\t\t\tthis.dataset.removeChangeListener(this);\n-\t\t}\n \n \n-\t\tthis.dataset = dataset;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n \t\tif (dataset != null) {\n \t\t\tsetDatasetGroup(dataset.getGroup());\n \t\t\tdataset.addChangeListener(this);\n-\t\t}\n+\t\t} \t\torg.jfree.chart.plot.PiePlot piePlot = new org.jfree.chart.plot.PiePlot(null); \t\tthis.pieChart = new org.jfree.chart.JFreeChart(piePlot); \t\tthis.pieChart.removeLegend(); \t\tthis.dataExtractOrder = org.jfree.chart.util.TableOrder.BY_COLUMN; \t\tthis.pieChart.setBackgroundPaint(null); \t\torg.jfree.chart.title.TextTitle seriesTitle = new org.jfree.chart.title.TextTitle(\"Series Title\", new java.awt.Font(\"SansSerif\", java.awt.Font.BOLD, 12)); \t\tseriesTitle.setPosition(org.jfree.chart.util.RectangleEdge.BOTTOM); \t\tthis.pieChart.setTitle(seriesTitle); \t\tthis.aggregatedItemsKey = \"Other\"; \t\tthis.aggregatedItemsPaint = java.awt.Color.lightGray; \t\tthis.sectionPaints = new java.util.HashMap();} \tpublic org.jfree.data.category.CategoryDataset getDataset() { \t\treturn this.dataset;} \tpublic void setDataset(org.jfree.data.category.CategoryDataset dataset) { \t\tif ((this.dataset) != null) { \t\t\tthis.dataset.removeChangeListener(this);} \t\tthis.dataset = dataset; \t\tif (dataset != null) { \t\t\tsetDatasetGroup(dataset.getGroup()); \t\t\tdataset.addChangeListener(this);}\n \n \n \t\tdatasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, dataset));",
      "correctness": "C",
      "id": "20b7400120564969b31256d7e2445d66"
    },
    {
      "name": "Patch_7_5",
      "contributor": "FixMiner",
      "diff": "diff --git a/source/org/jfree/chart/plot/MultiplePiePlot.java b/source/org/jfree/chart/plot/MultiplePiePlot.java\nindex fedc205..5fe04cb 100644\n--- a/source/org/jfree/chart/plot/MultiplePiePlot.java\n+++ b/source/org/jfree/chart/plot/MultiplePiePlot.java\n@@ -142,7 +142,7 @@ public class MultiplePiePlot extends Plot implements Cloneable, Serializable {\n      */\n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n-        this.dataset = dataset;\n+        setDataset(dataset);\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();",
      "correctness": "C",
      "id": "7e5d245d487649ef8bbd7bf1207f3ec0"
    },
    {
      "name": "Patch_26_15",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/chart/plot/MultiplePiePlot.java b/source/org/jfree/chart/plot/MultiplePiePlot.java\nindex fedc205..5fe04cb 100644\n--- a/source/org/jfree/chart/plot/MultiplePiePlot.java\n+++ b/source/org/jfree/chart/plot/MultiplePiePlot.java\n@@ -142,7 +142,7 @@ public class MultiplePiePlot extends Plot implements Cloneable, Serializable {\n      */\n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n-        this.dataset = dataset;\n+        setDataset(dataset);\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();",
      "correctness": "C",
      "id": "8cf9ee2829d6418eac8d859757a78f9f"
    },
    {
      "name": "Patch_55_32",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Chart_12/source/org/jfree/chart/plot/MultiplePiePlot.java\t2019-06-28 12:40:22.311488174 -0400\n+++ /tmp/RSRepair_Defects4J_Chart_12/patches_xde6/Patch_32/patched/org/jfree/chart/plot/MultiplePiePlot.java\t2019-06-28 12:47:30.305040157 -0400\n@@ -142,7 +142,11 @@\n      */\n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n-        this.dataset = dataset;\n+        if (dataset != null) {\n+\t\t\tsetDatasetGroup(dataset.getGroup());\n+\t\t\tdataset.addChangeListener(this);\n+\t\t}\n+\t\tthis.dataset = dataset;\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();\n\n\n",
      "correctness": "P",
      "id": "e9e4794aa32e4418b238c8e6813fc79c"
    },
    {
      "name": "Patch_473_438",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Chart_12/source/org/jfree/chart/plot/MultiplePiePlot.java\t2019-06-25 15:13:32.030768658 -0400\n+++ /tmp/GenProg_Defects4J_Chart_12/patches_b3n0/Patch_438/patched/org/jfree/chart/plot/MultiplePiePlot.java\t2019-06-25 15:26:55.066491725 -0400\n@@ -142,7 +142,11 @@\n      */\n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n-        this.dataset = dataset;\n+        if (dataset != null) {\n+\t\t\tsetDatasetGroup(dataset.getGroup());\n+\t\t\tdataset.addChangeListener(this);\n+\t\t}\n+\t\tdouble ep = 0.0;\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();\n\n\n",
      "correctness": "P",
      "id": "4f90e9d5a755432291720d0d377162c2"
    }
  ],
  "Math_58": [
    {
      "name": "Patch_1_1",
      "contributor": "ARJA",
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2019-08-04 00:56:41.649598368 -0400\n+++ /tmp/Arja_Defects4J_Math_58/patches_4nsq/Patch_1/patched/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2019-08-04 01:35:43.410794830 -0400\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n",
      "correctness": "C",
      "id": "68114e5a3f0f40d097945c04fdf2ea36"
    },
    {
      "name": "Patch_3_3",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac39..e1b54f4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,7 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit(guess);\n     }\n \n     /**",
      "correctness": "C",
      "id": "7009bafcc0df422ea1ffdca0fcac9fbf"
    },
    {
      "name": "Patch_2_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac39..e1b54f4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,7 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit(guess);\n     }\n \n     /**",
      "correctness": "C",
      "id": "1a2f2d1b34874cc680fa4ee262097ae4"
    },
    {
      "name": "Patch_25_7",
      "contributor": "RSRepair-A",
      "diff": "--- /tmp/RSRepair_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2019-08-04 14:05:48.469789009 -0400\n+++ /tmp/RSRepair_Defects4J_Math_58/patches_ugri/Patch_7/patched/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2019-08-04 14:27:20.978449385 -0400\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n",
      "correctness": "C",
      "id": "2e63db2d585f4a19b8fde54b60ba92f2"
    }
  ],
  "Closure_18": [
    {
      "name": "Patch_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 8898f77..97f8b05 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n+      if (options.dependencyOptions.needsManagement() || options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.",
      "correctness": "P",
      "id": "d57bf70b008d4c169273fad8ca69e263"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 8898f77..97f8b05 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n+      if (options.dependencyOptions.needsManagement() || options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.",
      "correctness": "P",
      "id": "95f85f7b7d73402fb30cefd3a8d56fd8"
    },
    {
      "name": "Patch_17_16",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 8898f77..97f8b05 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n+      if (options.dependencyOptions.needsManagement() || options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.",
      "correctness": "P",
      "id": "5de6a4894a3647ea8eb2e0b129befe6a"
    },
    {
      "name": "Patch_39_35",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 8898f77..d58251e 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n+      if ((options.dependencyOptions.needsManagement() && options.closurePass) || !(options.enables(DiagnosticGroups.CHECK_TYPES))) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.",
      "correctness": "P",
      "id": "c0dd91cc782443f3891386ac7f129434"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "bc830e5824ea4756a6eca50c173bb30e"
    }
  ],
  "Math_62": [
    {
      "name": "Patch_290_90",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\nindex 1200544..720324c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n@@ -159,7 +159,7 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti\n             try {\n                 final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n                 final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n-                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n+                optima[i] = optimizer.optimize(f, goal, FastMath.min(min, bound2), FastMath.max(bound1, bound2));\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {\n",
      "correctness": "P",
      "id": "0e04cb13273e47efba06d6a6a75b63f9"
    },
    {
      "name": "Patch_116_83",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\nindex 1200544..720324c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n@@ -159,7 +159,7 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti\n             try {\n                 final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n                 final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n-                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n+                optima[i] = optimizer.optimize(f, goal, FastMath.min(min, bound2), FastMath.max(bound1, bound2));\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {",
      "correctness": "P",
      "id": "c95e1835d0b841b887a2b0b3444bbe76"
    },
    {
      "name": "Patch_181_90",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\nindex 1200544..720324c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n@@ -159,7 +159,7 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti\n             try {\n                 final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n                 final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n-                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n+                optima[i] = optimizer.optimize(f, goal, FastMath.min(min, bound2), FastMath.max(bound1, bound2));\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {",
      "correctness": "P",
      "id": "cb3fafd089e948a3825a010ae506a2d6"
    }
  ],
  "Lang_20": [
    {
      "name": "Patch_121_20",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 3c2cf3f..4441214 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -3380,7 +3380,7 @@ public class StringUtils {\n             return EMPTY;\n         }\n \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n+        StringBuilder buf = new StringBuilder((16) + separator.length());\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n",
      "correctness": "P",
      "id": "75e5bdf28859457895f87eacb631b65b"
    },
    {
      "name": "Patch_53_10",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 3c2cf3f..919cc6a 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -3295,7 +3295,7 @@ public class StringUtils {\n             return EMPTY;\n         }\n         \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n+        StringBuilder buf = new StringBuilder((16) + 1);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n",
      "correctness": "P",
      "id": "7cda5eba9a224ae38efa2d40fee07954"
    },
    {
      "name": "Patch_5_3",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 3c2cf3f..7f1e65a 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -3295,7 +3295,7 @@ public class StringUtils {\n             return EMPTY;\n         }\n         \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n+        StringBuilder buf = new StringBuilder(noOfItems + 1);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {",
      "correctness": "P",
      "id": "a1c4d6850eb64be88e5da7948ed57da6"
    },
    {
      "name": "Patch_13_8",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 3c2cf3f..b80ac21 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -3380,7 +3380,7 @@ public class StringUtils {\n             return EMPTY;\n         }\n \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n+        StringBuilder buf = new StringBuilder(noOfItems + separator.length());\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {",
      "correctness": "P",
      "id": "dfc85ea8975b47db98333157d3e98d75"
    },
    {
      "name": "Patch_34_6",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 3c2cf3f..f079122 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -3295,7 +3295,7 @@ public class StringUtils {\n             return EMPTY;\n         }\n         \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n+        StringBuilder buf = new StringBuilder();\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {",
      "correctness": "P",
      "id": "64334890671e47dc8f0c08ac3b5c4c8d"
    },
    {
      "name": "Patch_68_12",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 3c2cf3f..a308c6e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -3380,7 +3380,7 @@ public class StringUtils {\n             return EMPTY;\n         }\n \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n+        StringBuilder buf = new StringBuilder();\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {",
      "correctness": "P",
      "id": "2b365e7c958944cdae21fb4700b09efa"
    }
  ],
  "Time_18": [
    {
      "name": "Patch_109",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d..c9e9415 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,7 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n-\n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n-        }\n-        return instant;\n-    }\n+    \n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
      "correctness": "P",
      "id": "bcd637b9171e4d4a9d15d08084533a18"
    }
  ],
  "Closure_31": [
    {
      "name": "Patch_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b76bbb5..afba4f0 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1281,8 +1281,7 @@ public class Compiler extends AbstractCompiler {\n       boolean staleInputs = false;\n \n       // Check if the sources need to be re-ordered.\n-      if (options.dependencyOptions.needsManagement() &&\n-          !options.skipAllPasses &&\n+      if (options.dependencyOptions.needsManagement() || !options.skipAllPasses &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they",
      "correctness": "P",
      "id": "3cc27a4ba3ff4f1a83a135362d94a73b"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b76bbb5..afba4f0 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1281,8 +1281,7 @@ public class Compiler extends AbstractCompiler {\n       boolean staleInputs = false;\n \n       // Check if the sources need to be re-ordered.\n-      if (options.dependencyOptions.needsManagement() &&\n-          !options.skipAllPasses &&\n+      if (options.dependencyOptions.needsManagement() || !options.skipAllPasses &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they",
      "correctness": "P",
      "id": "3f94a799b1d345469ed24b688ea91795"
    },
    {
      "name": "Patch_41_31",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b76bbb5..3ceaa76 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1282,7 +1282,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       if (options.dependencyOptions.needsManagement() &&\n-          !options.skipAllPasses &&\n+          (jsRoot != null) &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they",
      "correctness": "C",
      "id": "108750753315418197cbcc5ffad7d65a"
    },
    {
      "name": "Patch_39_39",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b76bbb5..179feea 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1281,9 +1281,9 @@ public class Compiler extends AbstractCompiler {\n       boolean staleInputs = false;\n \n       // Check if the sources need to be re-ordered.\n-      if (options.dependencyOptions.needsManagement() &&\n+      if ((options.dependencyOptions.needsManagement() &&\n           !options.skipAllPasses &&\n-          options.closurePass) {\n+          options.closurePass) || !(options.enables(DiagnosticGroups.CHECK_TYPES))) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.",
      "correctness": "P",
      "id": "d210e347c24c4b9da8e7dd4690e8aa3b"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "C",
      "id": "1dad3005db8b4c56a36df0727a6eebf0"
    }
  ],
  "Lang_22": [
    {
      "name": "Patch_8_8",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java\nindex b36a156..6627221 100644\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -581,7 +581,7 @@ public final class Fraction extends Number implements Comparable<Fraction> {\n     private static int greatestCommonDivisor(int u, int v) {\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n+        if (Math.abs(v) <= 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n",
      "correctness": "P",
      "id": "3dcf3906d7504671b3d3e274ebb38259"
    },
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java\nindex b36a156..04f1e4c 100644\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -581,7 +581,7 @@ public final class Fraction extends Number implements Comparable<Fraction> {\n     private static int greatestCommonDivisor(int u, int v) {\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n+        if (Math.abs(u) <= 1 && Math.abs(v) <= 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to",
      "correctness": "P",
      "id": "63306aa6088942e59ab8c04201d7dd09"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java\nindex b36a156..04f1e4c 100644\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -581,7 +581,7 @@ public final class Fraction extends Number implements Comparable<Fraction> {\n     private static int greatestCommonDivisor(int u, int v) {\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n+        if (Math.abs(u) <= 1 && Math.abs(v) <= 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to",
      "correctness": "P",
      "id": "89bf2b6e530646c385310a2e14cf1376"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java\nindex b36a156..0fdfc36 100644\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -581,7 +581,7 @@ public final class Fraction extends Number implements Comparable<Fraction> {\n     private static int greatestCommonDivisor(int u, int v) {\n         // From Commons Math:\n         //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n+        if (Math.abs(u)==1 || Math.abs(v) <= 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to",
      "correctness": "P",
      "id": "344d3666c47c49949669eddcc1b257c8"
    }
  ],
  "Closure_2": [
    {
      "name": "Patch_24",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db..488b37a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1571,7 +1571,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Set<String> currentPropertyNames;\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+      if (implicitProto != null) {\n+\tcurrentPropertyNames = implicitProto.getOwnPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n@@ -1585,6 +1586,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       }\n       currentProperties.put(name, interfaceType);\n     }\n+}\n+\n     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n       checkInterfaceConflictProperties(t, n, functionName, properties,\n           currentProperties, iType);",
      "correctness": "C",
      "id": "4f389d3617fb4cdba4715ca9ada3e395"
    },
    {
      "name": "Patch_4_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..45821f32 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1571,6 +1571,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Set<String> currentPropertyNames;\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n+    if (implicitProto != null) {\n       currentPropertyNames = implicitProto.getOwnPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n@@ -1585,6 +1586,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       }\n       currentProperties.put(name, interfaceType);\n     }\n+    }\n     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n       checkInterfaceConflictProperties(t, n, functionName, properties,\n           currentProperties, iType);",
      "correctness": "C",
      "id": "51691b0ede094b06a7244b0e018e2b0f"
    },
    {
      "name": "Patch_1_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db..488b37a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1571,7 +1571,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Set<String> currentPropertyNames;\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+      if (implicitProto != null) {\n+\tcurrentPropertyNames = implicitProto.getOwnPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n@@ -1585,6 +1586,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       }\n       currentProperties.put(name, interfaceType);\n     }\n+}\n+\n     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n       checkInterfaceConflictProperties(t, n, functionName, properties,\n           currentProperties, iType);",
      "correctness": "C",
      "id": "ff7c85c240ec4335af0951fe467e7ca7"
    },
    {
      "name": "Patch_3_2",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db..f4bb6ef 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1571,7 +1571,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Set<String> currentPropertyNames;\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+      if (implicitProto != null) {\n+\tcurrentPropertyNames = implicitProto.getOwnPropertyNames();\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n@@ -1585,6 +1586,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       }\n       currentProperties.put(name, interfaceType);\n     }\n+\t}\n+\n     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n       checkInterfaceConflictProperties(t, n, functionName, properties,\n           currentProperties, iType);",
      "correctness": "C",
      "id": "41901458e48e4f77baa9047528716b44"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "1b6f91e150e049c6936993837fbff16e"
    }
  ],
  "Lang_6": [
    {
      "name": "Patch_18_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010ea..0500460 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,7 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                pos += Character.charCount(Character.codePointAt(input, pt));\n             }\n         }\n     }\n",
      "correctness": "C",
      "id": "023e35d7a980408d88492cf1c7a89bee"
    },
    {
      "name": "Patch_10_8",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010ea..0500460 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,7 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                pos += Character.charCount(Character.codePointAt(input, pt));\n             }\n         }\n     }",
      "correctness": "C",
      "id": "29cd11bb3abc42a5a02f5ae4444512e2"
    },
    {
      "name": "Patch_2_2",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010ea..0500460 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,7 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                pos += Character.charCount(Character.codePointAt(input, pt));\n             }\n         }\n     }",
      "correctness": "C",
      "id": "9ba3bbb06c07477a9f3d53ae975eaeac"
    }
  ],
  "Mockito_38": [
    {
      "name": "Patch_11",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc5..42b89f6 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -45,6 +45,9 @@ public class ArgumentMatchingTool {\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n+        if (arg == null) {\n+    return false;\n+}\n+return StringDescription.toString(m).equals(arg.toString());\n     }\n }",
      "correctness": "C",
      "id": "5a5df1720af541fdb545bceea5e44f4e"
    },
    {
      "name": "Patch_19_7",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc5..42b89f6 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -45,6 +45,9 @@ public class ArgumentMatchingTool {\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n+        if (arg == null) {\n+    return false;\n+}\n+return StringDescription.toString(m).equals(arg.toString());\n     }\n }",
      "correctness": "C",
      "id": "8a76d48af8eb40cdba0aa8008c32ae29"
    },
    {
      "name": "Patch_28_9",
      "contributor": "TBar",
      "diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc5..b4e88ae 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -45,6 +45,9 @@ public class ArgumentMatchingTool {\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n+        if (arg == null) {\n+\t    return false;\n+\t}\n+return StringDescription.toString(m).equals(arg.toString());\n     }\n }",
      "correctness": "C",
      "id": "dcb63c42b1604d1cb81902f3b122acbb"
    }
  ],
  "Lang_13": [
    {
      "name": "Patch_12_3",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/SerializationUtils.java b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\nindex 1ee636c..8010115 100644\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n@@ -251,23 +251,7 @@ public class SerializationUtils {\n \n         }\n \n-        /**\n-         * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>\n-         * of the current <code>Thread</code> to resolve the class.\n-         * @param desc An instance of class <code>ObjectStreamClass</code>.\n-         * @return A <code>Class</code> object corresponding to <code>desc</code>.\n-         * @throws IOException Any of the usual Input/Output exceptions.\n-         * @throws ClassNotFoundException If class of a serialized object cannot be found.\n-         */\n-        @Override\n-        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-            String name = desc.getName();\n-            try {\n-                return Class.forName(name, false, classLoader);\n-            } catch (ClassNotFoundException ex) {\n-                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n-            }\n-        }\n+        \n \n     }\n",
      "correctness": "P",
      "id": "113e7feeb6df41d1baafa703791c82ee"
    },
    {
      "name": "Patch_10_7",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/SerializationUtils.java b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\nindex 1ee636c..8010115 100644\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n@@ -251,23 +251,7 @@ public class SerializationUtils {\n \n         }\n \n-        /**\n-         * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>\n-         * of the current <code>Thread</code> to resolve the class.\n-         * @param desc An instance of class <code>ObjectStreamClass</code>.\n-         * @return A <code>Class</code> object corresponding to <code>desc</code>.\n-         * @throws IOException Any of the usual Input/Output exceptions.\n-         * @throws ClassNotFoundException If class of a serialized object cannot be found.\n-         */\n-        @Override\n-        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-            String name = desc.getName();\n-            try {\n-                return Class.forName(name, false, classLoader);\n-            } catch (ClassNotFoundException ex) {\n-                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n-            }\n-        }\n+        \n \n     }",
      "correctness": "P",
      "id": "db130849707947f8930e1653d6b36406"
    }
  ],
  "Lang_57": [
    {
      "name": "Patch_2_1",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex ceb886e..158b8eb 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -220,7 +220,7 @@ public class LocaleUtils {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return cAvailableLocaleSet.contains(locale);\n+        return cAvailableLocaleList.contains(locale);\n     }\n \n     //-----------------------------------------------------------------------\n",
      "correctness": "C",
      "id": "5ec0116ebf5640309d62d4b49e8a5904"
    },
    {
      "name": "Patch_11_4",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex ceb886e..139d9a7 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -220,7 +220,7 @@ public class LocaleUtils {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return cAvailableLocaleSet.contains(locale);\n+        return availableLocaleList().contains(locale);\n     }\n \n     //-----------------------------------------------------------------------",
      "correctness": "C",
      "id": "e7323e8b39c54f4f9f76fc9097c04e0a"
    },
    {
      "name": "Patch_7_6",
      "contributor": "kPAR",
      "diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex ceb886e..aaa27dc 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -220,7 +220,10 @@ public class LocaleUtils {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return cAvailableLocaleSet.contains(locale);\n+        if (cAvailableLocaleSet == null) {\n+    return false;\n+}\n+return cAvailableLocaleSet.contains(locale);\n     }\n \n     //-----------------------------------------------------------------------",
      "correctness": "P",
      "id": "15f8005db3b040b3be4a1308b2953c89"
    },
    {
      "name": "Patch_37_17",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex ceb886e..139d9a7 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -220,7 +220,7 @@ public class LocaleUtils {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return cAvailableLocaleSet.contains(locale);\n+        return availableLocaleList().contains(locale);\n     }\n \n     //-----------------------------------------------------------------------",
      "correctness": "C",
      "id": "9288230ba8fd477f8f626e1518568540"
    }
  ],
  "Mockito_29": [
    {
      "name": "Patch_8",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/org/mockito/internal/matchers/Same.java b/src/org/mockito/internal/matchers/Same.java\nindex 6c172fe..22b1a4b 100644\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n@@ -26,7 +26,10 @@ public class Same extends ArgumentMatcher<Object> implements Serializable {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n-        description.appendText(wanted.toString());\n+        if (wanted != null) {\n+\tdescription.appendText(wanted.toString());\n+}\n+\n         appendQuoting(description);\n         description.appendText(\")\");\n     }",
      "correctness": "C",
      "id": "1537c6b000b14e819c56592b072e35b5"
    },
    {
      "name": "Patch_8_2",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/org/mockito/internal/matchers/Same.java b/src/org/mockito/internal/matchers/Same.java\nindex 6c172fee2..978030ee2 100644\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n@@ -26,7 +26,10 @@ public class Same extends ArgumentMatcher<Object> implements Serializable {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n-        description.appendText(wanted.toString());\n+        if (wanted != null) {\n+description.appendText(wanted.toString());\n+}\n+\n         appendQuoting(description);\n         description.appendText(\")\");\n     }",
      "correctness": "C",
      "id": "767f6458e1374b2faba8d8e1523158c9"
    },
    {
      "name": "Patch_5_4",
      "contributor": "TBar",
      "diff": "diff --git a/src/org/mockito/internal/matchers/Same.java b/src/org/mockito/internal/matchers/Same.java\nindex 6c172fe..35f2e7d 100644\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n@@ -26,7 +26,10 @@ public class Same extends ArgumentMatcher<Object> implements Serializable {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n-        description.appendText(wanted.toString());\n+        if (wanted != null) {\n+\tdescription.appendText(wanted.toString());\n+\t}\n+\n         appendQuoting(description);\n         description.appendText(\")\");\n     }",
      "correctness": "C",
      "id": "188ae69b0e564ccdbd20a74fb0253cbd"
    }
  ],
  "Lang_10": [
    {
      "name": "Patch_44_2",
      "contributor": "AVATAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159b..aaef1f7 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -304,13 +304,7 @@ public class FastDateParser implements DateParser, Serializable {\n         boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n+            \n             wasWhite= false;\n             switch(c) {\n             case '\\'':\n",
      "correctness": "C",
      "id": "134f5fa6562c4686b0dba9cc82b271ae"
    },
    {
      "name": "Patch_119_5",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159b..aaef1f7 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -304,13 +304,7 @@ public class FastDateParser implements DateParser, Serializable {\n         boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n+            \n             wasWhite= false;\n             switch(c) {\n             case '\\'':",
      "correctness": "C",
      "id": "63518da43b7448d88bf076e67b2027a8"
    },
    {
      "name": "Patch_7_7",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159b..44c2db8 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -304,7 +304,7 @@ public class FastDateParser implements DateParser, Serializable {\n         boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n+            if((Character.isWhitespace(c)) && !(!wasWhite)) {\n                 if(!wasWhite) {\n                     wasWhite= true;\n                     regex.append(\"\\\\s*+\");",
      "correctness": "C",
      "id": "e4f38c45fedb484ba2e4596f1d870b54"
    },
    {
      "name": "Patch_21_6",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159b..aaef1f7 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -304,13 +304,7 @@ public class FastDateParser implements DateParser, Serializable {\n         boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n+            \n             wasWhite= false;\n             switch(c) {\n             case '\\'':",
      "correctness": "C",
      "id": "a1d720b69ed449a0862dd3a61555155e"
    }
  ],
  "Math_56": [
    {
      "name": "Patch_127_75",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_56/src/main/java/org/apache/commons/math/util/MultidimensionalCounterjava\n+++ /tmp/jGenProg_Defects4J_Math_56/src/main/java/org/apache/commons/math/util/MultidimensionalCounterjava\n@@ -236,9 +236,9 @@\n \n \t\tint idx = 1;\n \t\twhile (count < index) {\n-\t\t\tcount += idx;\n+\t\t\tcount += idx; \t\t\twhile (count < index) { \t\t\t\tcount += idx;\n \t\t\t++idx;\n-\t\t} \n+\t\t\t} \t\t\t++idx;} \n \t\t--idx;\n \t\tindices[last] = idx;",
      "correctness": "P",
      "id": "93008ed476ee410a8fb6b3c29cd2ab51"
    }
  ],
  "Math_40": [
    {
      "name": "Patch_193_56",
      "contributor": "jGenProg",
      "diff": "--- /tmp/jGenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverjava\n+++ /tmp/jGenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverjava\n@@ -232,7 +232,7 @@\n \t\t\tdouble targetY;\n \t\t\tif (agingA >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)) {\n \n-\t\t\t\ttargetY = (-(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.REDUCTION_FACTOR)) * yB;\n+\t\t\t\ttargetY = (-(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.REDUCTION_FACTOR)) * yB; \t\t\t\tsignChangeIndex = 2;\n \t\t\t}else \t\t\t\tif (agingB >= (org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.MAXIMAL_AGING)) {\n \n \t\t\t\t\ttargetY = (-(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.REDUCTION_FACTOR)) * yA;",
      "correctness": "P",
      "id": "62a96227c5ce42b194b8677fc2912b88"
    }
  ],
  "Lang_19": [
    {
      "name": "Patch_758_78",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ac..5cf5c62 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 4 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;",
      "correctness": "P",
      "id": "b81cf4f088a1414d825941a18a9b0521"
    }
  ],
  "Math_68": [
    {
      "name": "Patch_208_131",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex d1b36ea..8b2f2e9 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -388,7 +388,13 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                 }\n \n                 // test for successful iteration.\n-                if (ratio >= 1.0e-4) {\n+                if (((Math.abs(actRed) <= costRelativeTolerance) &&\n+                         (preRed <= costRelativeTolerance) &&\n+                         (ratio <= 2.0)) ||\n+                        (delta <= parRelativeTolerance * xNorm)) {\n+                        return new VectorialPointValuePair(point, objective);\n+                    }\n+\tif (ratio >= 1.0e-4) {\n                     // successful iteration, update the norm\n                     firstIteration = false;\n                     xNorm = 0;\n@@ -412,12 +418,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                 // tests for convergence.\n                     // we use the vectorial convergence checker\n                     // we use the Levenberg-Marquardt specific convergence parameters\n-                    if (((Math.abs(actRed) <= costRelativeTolerance) &&\n-                         (preRed <= costRelativeTolerance) &&\n-                         (ratio <= 2.0)) ||\n-                        (delta <= parRelativeTolerance * xNorm)) {\n-                        return new VectorialPointValuePair(point, objective);\n-                    }\n+                    \n \n                 // tests for termination and stringent tolerances\n                 // (2.2204e-16 is the machine epsilon for IEEE754)",
      "correctness": "P",
      "id": "b289644cbd6b4051ab11e8bff30e019a"
    }
  ],
  "Closure_10": [
    {
      "name": "Patch_63_4",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef2792..eeb12d4 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,7 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }",
      "correctness": "C",
      "id": "63e477a1f9b846e78fee17a6eaa8d6c3"
    },
    {
      "name": "Patch_34_9",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef2792..eeb12d4 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,7 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }",
      "correctness": "C",
      "id": "3b8904dcadba445ea8bb3231978a6b8f"
    },
    {
      "name": "Patch_161_73",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef2792..eeb12d4 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,7 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }",
      "correctness": "C",
      "id": "83e09b713c9c4898a3ed404c6845c1bf"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "6bfc36f1191147069b4aa33a08f53ad5"
    }
  ],
  "Closure_13": [
    {
      "name": "Patch_28_9",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088..b269e70 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -123,8 +123,10 @@ class PeepholeOptimizationsPass\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n-        traverse(c);\n+        \n         Node next = c.getNext();\n+\ttraverse(c);\n+\n         c = next;\n       }",
      "correctness": "C",
      "id": "45ce40ce76d84040a9c7ef33cd9e764c"
    },
    {
      "name": "Patch_10_6",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088..b269e70 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -123,8 +123,10 @@ class PeepholeOptimizationsPass\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n-        traverse(c);\n+        \n         Node next = c.getNext();\n+\ttraverse(c);\n+\n         c = next;\n       }",
      "correctness": "C",
      "id": "381930df4e7b407295b2f2ed38cef994"
    }
  ],
  "Math_64": [
    {
      "name": "Patch_599_199",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex 5091493..b2d50f1 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -362,7 +362,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n                 // evaluate the function at x + p and calculate its norm\n                 updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n+                \n \n                 // compute the scaled actual reduction\n                 double actRed = -1.0;\n@@ -432,6 +432,8 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                     residuals = oldRes;\n                     oldRes    = tmpVec;\n                 }\n+\tcurrent = new VectorialPointValuePair(point, objective);\n+\n                 if (checker==null) {\n                 \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n                         (preRed <= costRelativeTolerance) &&",
      "correctness": "P",
      "id": "4ff4f63a38fd4452a96b894927528ba1"
    }
  ],
  "Lang_56": [
    {
      "name": "Patch_5_4",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/java/org/apache/commons/lang/time/FastDateFormat.java b/src/java/org/apache/commons/lang/time/FastDateFormat.java\nindex 89d8073..f1ff58f 100644\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n@@ -137,7 +137,7 @@ public class FastDateFormat extends Format {\n     /**\n      * The parsed rules.\n      */\n-    private Rule[] mRules;\n+    private transient  Rule[] mRules;\n     /**\n      * The estimated maximum length.\n      */",
      "correctness": "C --",
      "id": "0f0c5585b9e14389bf9a3e7f0c45e535"
    }
  ],
  "Math_34": [
    {
      "name": "Patch_2_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\nindex 1eb0053..3f3919c 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n@@ -206,6 +206,6 @@ public abstract class ListPopulation implements Population {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n+        return getChromosomes().iterator();\n     }\n }",
      "correctness": "C",
      "id": "365a68ff990c4c7497fa063b25cdb753"
    }
  ],
  "Math_30": [
    {
      "name": "Patch_1_1",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce..a161737 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -170,7 +170,7 @@ public class MannWhitneyUTest {\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+        final double n1n2prod = n1 * n2;\n \n         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n         final double EU = n1n2prod / 2.0;",
      "correctness": "C",
      "id": "af620515cb3c4fa0b4e297d8787f8330"
    }
  ],
  "Time_26": [
    {
      "name": "Patch_194_27",
      "contributor": "FixMiner",
      "diff": "diff --git a/src/main/java/org/joda/time/chrono/ZonedChronology.java b/src/main/java/org/joda/time/chrono/ZonedChronology.java\nindex f165f3d..3de48de 100644\n--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java\n@@ -464,7 +464,7 @@ public final class ZonedChronology extends AssembledChronology {\n         public long set(long instant, int value) {\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, value);\n-            long result = iZone.convertLocalToUTC(localInstant, false);\n+            long result = iZone.convertLocalToUTC(localInstant, false, instant);\n             if (get(result) != value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +",
      "correctness": "C",
      "id": "23d4b874ac544fbbbf83ae83d644e054"
    },
    {
      "name": "Patch_61_47",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/joda/time/chrono/ZonedChronology.java b/src/main/java/org/joda/time/chrono/ZonedChronology.java\nindex f165f3d..3de48de 100644\n--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java\n@@ -464,7 +464,7 @@ public final class ZonedChronology extends AssembledChronology {\n         public long set(long instant, int value) {\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, value);\n-            long result = iZone.convertLocalToUTC(localInstant, false);\n+            long result = iZone.convertLocalToUTC(localInstant, false, instant);\n             if (get(result) != value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +",
      "correctness": "C",
      "id": "5217f867efe0444aa616e827acd9713a"
    },
    {
      "name": "Patch_72_29",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/joda/time/chrono/ZonedChronology.java b/src/main/java/org/joda/time/chrono/ZonedChronology.java\nindex f165f3d..3de48de 100644\n--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java\n@@ -464,7 +464,7 @@ public final class ZonedChronology extends AssembledChronology {\n         public long set(long instant, int value) {\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, value);\n-            long result = iZone.convertLocalToUTC(localInstant, false);\n+            long result = iZone.convertLocalToUTC(localInstant, false, instant);\n             if (get(result) != value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +",
      "correctness": "C",
      "id": "6b7ef6819f9142ccb7969de434313bd7"
    }
  ],
  "Math_42": [
    {
      "name": "Patch_1_1",
      "contributor": "Nopol",
      "diff": "a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -412,11 +412,13 @@\n               // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n+          if ((org.apache.commons.math.optimization.linear.SimplexTableau.this.numArtificialVariables) != (org.apache.commons.math.optimization.linear.SimplexTableau.this.numSlackVariables)) {\n+              if (basicRows.contains(basicRow)) {\n+                  // if multiple variables can take a given value\n+                  // then we choose the first and set the rest equal to 0\n+                  coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+              } else {\n+                  basicRows.add(basicRow);\n+                  coefficients[i] =\n                   (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                   (restrictToNonNegative ? 0 : mostNegative);\n+              }\n           }\n",
      "correctness": "P",
      "id": "027a49fca72d42268469c7f5dac80048"
    }
  ],
  "Closure_70": [
    {
      "name": "Patch_17_11",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66..aa7e245 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1742,7 +1742,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+                  jsDocParameter.getJSType(), false);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);",
      "correctness": "C",
      "id": "ea6a336ccf51446f88e7e1eaeb96befa"
    },
    {
      "name": "Patch_71_24",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66..aa7e245 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1742,7 +1742,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+                  jsDocParameter.getJSType(), false);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);",
      "correctness": "C",
      "id": "7ea64b348083424e98620a6a5a447f10"
    }
  ],
  "Closure_4": [
    {
      "name": "Patch_38_21",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c4..012d8f5 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -187,7 +187,7 @@ class NamedType extends ProxyObjectType {\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    if (detectInheritanceCycle()) {\n       handleTypeCycle(t);\n     }",
      "correctness": "C",
      "id": "3ef81efeed96460e843a9820af2b1387"
    },
    {
      "name": "Patch_18_1",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c4..012d8f5 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -187,7 +187,7 @@ class NamedType extends ProxyObjectType {\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    if (detectInheritanceCycle()) {\n       handleTypeCycle(t);\n     }",
      "correctness": "C",
      "id": "c575ee5ca8ac4489ba556a0546f1325c"
    },
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "2c25d5aedb234a828115cc8a945dfb95"
    }
  ],
  "Lang_18": [
    {
      "name": "Patch_28_23",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e043323..a708f4e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -492,7 +492,7 @@ public class FastDateFormat extends Format {\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n-                if (tokenLen >= 4) {\n+                if ((tokenLen >= 4) || !(tokenLen == 2)) {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule = TwoDigitYearField.INSTANCE;",
      "correctness": "P",
      "id": "91c35953c333426b8841c9da0fdd1caa"
    },
    {
      "name": "Patch_24_24",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e043323..a708f4e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -492,7 +492,7 @@ public class FastDateFormat extends Format {\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n-                if (tokenLen >= 4) {\n+                if ((tokenLen >= 4) || !(tokenLen == 2)) {\n                     rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule = TwoDigitYearField.INSTANCE;",
      "correctness": "P",
      "id": "558cdf1e42ae4ee28024006055e70c63"
    }
  ],
  "Lang_21": [
    {
      "name": "Patch_85_53",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00..11ed8b4 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -262,7 +262,7 @@ public class DateUtils {\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n+                cal1.get(MODIFY_TRUNCATE) == cal2.get(Calendar.HOUR) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&",
      "correctness": "P",
      "id": "b2c2a0ff5fc4426d890a7970803c9839"
    }
  ],
  "Chart_8": [
    {
      "name": "Patch_37_1",
      "contributor": "kPAR",
      "diff": "diff --git a/source/org/jfree/data/time/Week.java b/source/org/jfree/data/time/Week.java\nindex 3cc4138..8228589 100644\n--- a/source/org/jfree/data/time/Week.java\n+++ b/source/org/jfree/data/time/Week.java\n@@ -172,7 +172,7 @@ public class Week extends RegularTimePeriod implements Serializable {\n      */\n     public Week(Date time, TimeZone zone) {\n         // defer argument checking...\n-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n+        this(time, zone, Locale.getDefault());\n     }\n \n     /**",
      "correctness": "C",
      "id": "c3b028238556497689d176de6d3de298"
    },
    {
      "name": "Patch_1_1",
      "contributor": "TBar",
      "diff": "diff --git a/source/org/jfree/data/time/Week.java b/source/org/jfree/data/time/Week.java\nindex 3cc4138..8228589 100644\n--- a/source/org/jfree/data/time/Week.java\n+++ b/source/org/jfree/data/time/Week.java\n@@ -172,7 +172,7 @@ public class Week extends RegularTimePeriod implements Serializable {\n      */\n     public Week(Date time, TimeZone zone) {\n         // defer argument checking...\n-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n+        this(time, zone, Locale.getDefault());\n     }\n \n     /**",
      "correctness": "C",
      "id": "a702311f20b0436a95780b35a9363de9"
    }
  ],
  "Math_43": [
    {
      "name": "Patch_5_5",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d51..a167454 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -155,7 +155,7 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n         secondMoment.increment(value);\n         // If mean, variance or geomean have been overridden,\n         // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+        if ((!(meanImpl instanceof Mean)) || !(!(varianceImpl instanceof Variance))) {\n             meanImpl.increment(value);\n         }\n         if (!(varianceImpl instanceof Variance)) {",
      "correctness": "P",
      "id": "75070eefa821431683eaad8f7bada013"
    },
    {
      "name": "Patch_19_19",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d51..6f8ae74 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -161,7 +161,7 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n         if (!(varianceImpl instanceof Variance)) {\n             varianceImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+        if ((!(geoMeanImpl instanceof GeometricMean)) || !(!(meanImpl instanceof Mean))) {\n             geoMeanImpl.increment(value);\n         }\n         n++;",
      "correctness": "P",
      "id": "296a58a1e3d34fd3b3505de362e94f31"
    },
    {
      "name": "Patch_10_10",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d51..356808f 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -158,7 +158,7 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n         if (!(meanImpl instanceof Mean)) {\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+        if ((!(varianceImpl instanceof Variance)) || !(!(meanImpl instanceof Mean))) {\n             varianceImpl.increment(value);\n         }\n         if (!(geoMeanImpl instanceof GeometricMean)) {",
      "correctness": "P",
      "id": "5feb1cb1b55c41a6886d3a8b4e0d642a"
    }
  ],
  "Time_17": [
    {
      "name": "Patch_58_11",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802..4a93375 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1165,7 +1165,7 @@ public abstract class DateTimeZone implements Serializable {\n         \n         // evaluate 3 hours before and after to work out if anything is happening\n         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long instantAfter = getOffset(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n         if (instantBefore == instantAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }",
      "correctness": "P",
      "id": "7a473a21ec244df297be642e3537ad64"
    },
    {
      "name": "Patch_134_66",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802..d3f20e0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1165,7 +1165,7 @@ public abstract class DateTimeZone implements Serializable {\n         \n         // evaluate 3 hours before and after to work out if anything is happening\n         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long instantAfter = convertUTCToLocal(hashCode() + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n         if (instantBefore == instantAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }",
      "correctness": "P",
      "id": "6e3b8e36183f4e11889baab239c4e37c"
    }
  ],
  "Time_4": [
    {
      "name": "Patch_12_10",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf4..9a91995 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,7 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+            Partial newPartial = new Partial(newTypes, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
      "correctness": "P",
      "id": "223a367c4e4b4a328ba6a4a6f2770113"
    },
    {
      "name": "Patch_85_21",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf4..9a91995 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,7 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+            Partial newPartial = new Partial(newTypes, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
      "correctness": "P",
      "id": "0b4193cfab5644c891e18cc7ab980d60"
    }
  ],
  "Closure_40": [
    {
      "name": "Patch_3_1",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a993..f73c012 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -632,7 +632,7 @@ final class NameAnalyzer implements CompilerPass {\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n+          JsName name = getName(ns.name, true);\n           if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));",
      "correctness": "C",
      "id": "9623e510b92c47998a767c14a9c3cd96"
    },
    {
      "name": "Patch_15_4",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a993..f73c012 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -632,7 +632,7 @@ final class NameAnalyzer implements CompilerPass {\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n+          JsName name = getName(ns.name, true);\n           if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));",
      "correctness": "C",
      "id": "7fbbdb78317e4ea18e5fef4a6afab1f1"
    }
  ],
  "Math_15": [
    {
      "name": "Patch_159_111",
      "contributor": "kPAR",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java\nindex d571325..ae461ce 100644\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n@@ -1538,7 +1538,7 @@ public class FastMath {\n         /* Handle special case x<0 */\n         if (x < 0) {\n             // y is an even integer in this case\n-            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {\n+            if ((y >= TWO_POWER_52 || y <= -TWO_POWER_52) && !(y < 8e298 && y > -8e298)) {\n                 return pow(-x, y);\n             }",
      "correctness": "P",
      "id": "bacfa74e4a6a49db943730169aecd8ea"
    },
    {
      "name": "Patch_14_14",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java\nindex d571325..ae461ce 100644\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n@@ -1538,7 +1538,7 @@ public class FastMath {\n         /* Handle special case x<0 */\n         if (x < 0) {\n             // y is an even integer in this case\n-            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {\n+            if ((y >= TWO_POWER_52 || y <= -TWO_POWER_52) && !(y < 8e298 && y > -8e298)) {\n                 return pow(-x, y);\n             }",
      "correctness": "P",
      "id": "a79657bea1794ad9a0569a1a53478371"
    }
  ],
  "Closure_35": [
    {
      "name": "Patch_138_81",
      "contributor": "kPAR",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e1092..a04cd51 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1119,7 +1119,7 @@ class TypeInference\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      ObjectType objType = ObjectType.cast(type.collapseUnion());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);",
      "correctness": "P",
      "id": "0e1b5328ff2446de912f0b2b0249a514"
    },
    {
      "name": "Patch_90_59",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e1092..a04cd51 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1119,7 +1119,7 @@ class TypeInference\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      ObjectType objType = ObjectType.cast(type.collapseUnion());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);",
      "correctness": "P",
      "id": "90786ba7632c471eaeb9a9c4398488d8"
    }
  ],
  "Mockito_26": [
    {
      "name": "Patch_9_4",
      "contributor": "TBar",
      "diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b825..ea0bba1 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -63,6 +63,6 @@ public class Primitives {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n+        primitiveValues.put(double.class, 0d);\n     }\n }\n\\ No newline at end of file",
      "correctness": "C",
      "id": "9ea6d29dd5344a688948a9507aa04a83"
    }
  ],
  "Lang_26": [
    {
      "name": "Patch_45_8",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e30da2a..65de708 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -817,7 +817,7 @@ public class FastDateFormat extends Format {\n      * @return the formatted string\n      */\n     public String format(Date date) {\n-        Calendar c = new GregorianCalendar(mTimeZone);\n+        Calendar c = new GregorianCalendar(mTimeZone, this.mLocale);\n         c.setTime(date);\n         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n     }",
      "correctness": "C",
      "id": "019bc3416c1f4958ad0ea50e3ec8ddb8"
    }
  ],
  "Math_52": [
    {
      "name": "Patch_3_3",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b34..0187223 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -341,7 +341,7 @@ public class Rotation implements Serializable {\n   Vector3D k     = v1Su1.crossProduct(v2Su2);\n   Vector3D u3    = u1.crossProduct(u2);\n   double c       = k.dotProduct(u3);\n-  if (c == 0) {\n+  if (c<=0) {\n     // the (q1, q2, q3) vector is close to the (u1, u2) plane\n     // we try other vectors\n     Vector3D v3 = Vector3D.crossProduct(v1, v2);",
      "correctness": "P",
      "id": "a44fd5ebb3ec44a5bbb69cbc12a63f03"
    }
  ],
  "Math_65": [
    {
      "name": "Patch_231_154",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 30ebfff..8eac352 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -255,7 +255,7 @@ public abstract class AbstractLeastSquaresOptimizer implements DifferentiableMul\n         double chiSquare = 0;\n         for (int i = 0; i < rows; ++i) {\n             final double residual = residuals[i];\n-            chiSquare += residual * residual / residualsWeights[i];\n+            chiSquare += residual * residual * residualsWeights[i];\n         }\n         return chiSquare;\n     }",
      "correctness": "C",
      "id": "1385ae95872349588e7ac429d6f5b16d"
    }
  ],
  "Math_96": [
    {
      "name": "Patch_107_58",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567..ab0a394 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,7 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+                    ret = (Double.doubleToRawLongBits(real)>=Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception",
      "correctness": "P",
      "id": "82a5e7279738434480a7bbc5739102b1"
    }
  ],
  "Math_11": [
    {
      "name": "Patch_2_2",
      "contributor": "TBar",
      "diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 1570681..795cd7e 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -180,7 +180,7 @@ public class MultivariateNormalDistribution\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n+        return FastMath.pow(2 * FastMath.PI, -dim / 2d) *\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n             getExponentTerm(vals);\n     }",
      "correctness": "C",
      "id": "b0861473631340bc9c3c2771e5d340b5"
    }
  ],
  "Closure_102": [
    {
      "name": "Patch_17_17",
      "contributor": "TBar",
      "diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa4555..d1757e2 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -86,12 +86,14 @@ class Normalize implements CompilerPass, Callback {\n   @Override\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n-    if (MAKE_LOCAL_NAMES_UNIQUE) {\n+    \n+    removeDuplicateDeclarations(root);\n+\tif (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n       t.traverseRoots(externs, root);\n     }\n-    removeDuplicateDeclarations(root);\n+\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n   }",
      "correctness": "C",
      "id": "2380809518a34ba6a3ebadccd5826aa9"
    }
  ],
  "Lang_47": [
    {
      "name": "Patch_66_36",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 13281ce..1f64e59 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1227,7 +1227,8 @@ public class StrBuilder implements Cloneable {\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n-            int strLen = str.length();\n+            if (str == null) str = new String();\n+ int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(0, width, buffer, size);\n             } else {",
      "correctness": "C",
      "id": "b6d5aa73454145abaa9b03d3b3eec0e2"
    },
    {
      "name": "Patch_33_18",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 13281ce..bf81de2 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1183,7 +1183,8 @@ public class StrBuilder implements Cloneable {\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n-            int strLen = str.length();\n+            if (str == null) str = new String();\n+ int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(strLen - width, strLen, buffer, size);\n             } else {",
      "correctness": "C",
      "id": "83b0ee501a8a4226bb1d88ddf12bbb9a"
    }
  ],
  "Lang_51": [
    {
      "name": "Patch_4_2",
      "contributor": "TBar",
      "diff": "diff --git a/src/java/org/apache/commons/lang/BooleanUtils.java b/src/java/org/apache/commons/lang/BooleanUtils.java\nindex 3fda4ec..d9dd2eb 100644\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -679,6 +679,8 @@ public class BooleanUtils {\n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n+\t return false;\n+\n             }\n             case 4: {\n                 char ch = str.charAt(0);",
      "correctness": "C",
      "id": "d76c28a46bcb40629b7fd1cc0171e10e"
    }
  ],
  "Chart_18": [
    {
      "name": "Patch_1594_1413",
      "contributor": "GenProg-A",
      "diff": "--- /tmp/GenProg_Defects4J_Chart_18/source/org/jfree/data/DefaultKeyedValues2D.java\t2019-06-25 17:19:06.828764944 -0400\n+++ /tmp/GenProg_Defects4J_Chart_18/patches_ru94/Patch_1413/patched/org/jfree/data/DefaultKeyedValues2D.java\t2019-06-25 17:33:47.981628400 -0400\n@@ -455,9 +455,10 @@\n         Iterator iterator = this.rows.iterator();\n         while (iterator.hasNext()) {\n             DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n-                rowData.removeValue(columnKey);\n         }\n-        this.columnKeys.remove(columnKey);\n+        if (!(this.columnKeys.contains(columnKey))) {\n+\t\t\tthrow new UnknownKeyException(\"Unrecognised columnKey: \" + columnKey);\n+\t\t}\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Chart_18/source/org/jfree/data/DefaultKeyedValues.java\t2019-06-25 17:19:06.828764944 -0400\n+++ /tmp/GenProg_Defects4J_Chart_18/patches_ru94/Patch_1413/patched/org/jfree/data/DefaultKeyedValues.java\t2019-06-25 17:33:47.985628459 -0400\n@@ -315,9 +315,7 @@\n     public void removeValue(int index) {\n         this.keys.remove(index);\n         this.values.remove(index);\n-        if (index < this.keys.size()) {\n-        rebuildIndex();\n-        }\n+        this.indexMap.clear();\n     }\n \n     /**\n@@ -332,6 +330,9 @@\n     public void removeValue(Comparable key) {\n         int index = getIndex(key);\n         if (index < 0) {\n+\t\t\tif (index < 0) {\n+\t\t\t\tthrow new UnknownKeyException(\"Key not found: \" + key);\n+\t\t\t}\n \t\t\treturn;\n         }\n         removeValue(index);\n\n\n",
      "correctness": "P",
      "id": "ed9bf138d4d140988dd7a5c5716d96d5"
    }
  ],
  "Closure_128": [
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "fd0fe96759d94883800d15509182f2fc"
    }
  ],
  "Closure_12": [
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "578345a86f864e5fbfccd8c0c06c0e30"
    }
  ],
  "Closure_51": [
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "db71c5b0878745939f847720886cf0b3"
    }
  ],
  "Closure_122": [
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "297c3defa8204a4a8014f4b508f5dd69"
    }
  ],
  "Closure_113": [
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "b1e64927bd0c42819dca108e6c5b28ff"
    }
  ],
  "Closure_66": [
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "8f5a02d5301f4630b8776fccf74c8a91"
    }
  ],
  "Closure_124": [
    {
      "name": "Patch_2_2",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "946fa20eafda40d392e6c2a796256f18"
    }
  ],
  "Closure_45": [
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "4713cbecc9cd40559a9016d12f608d5e"
    }
  ],
  "Closure_15": [
    {
      "name": "Patch_1_1",
      "contributor": "Kali-A",
      "diff": "",
      "correctness": "P",
      "id": "f28828d177a34686af5505ce4d62b5e1"
    }
  ]
}
